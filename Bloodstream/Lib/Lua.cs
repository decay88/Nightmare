using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using Bloodstream.Patchables;

namespace Bloodstream.Lib
{
    public static class Lua
    {
        public static string[] Run(string cmd, params object[] args) { return WowBase.Instance.Bridge.DoString(string.Format(cmd, args), Options: DoStringOptions.WrapReturns); }

        public static bool From1Nil(string val)
        {
            return val != null && Convert.ToInt32(val) == 1;
        }

        public static List<dynamic> HandleLuaList(string[] results, params KeyValuePair<string, Type>[] types)
        {
            var resultList = new List<dynamic>();
            for (int i = 0; i < results.Length; i += types.Length)
            {
                var store = new ExpandoObject();
                foreach (var typeKVP in types)
                    (store as IDictionary<string, object>).Add(typeKVP.Key, typeKVP.Value);
                resultList.Add(store);
            }

            return resultList;
        }

        public static bool IsFrameShown(string frameName)
        {
            return From1Nil(Run("{0}:IsShown()", frameName)[0]);
        }

        #region Lua (autogenerated)
        /// <summary>
        /// Confirms abandoning a quest. Use SetAbandonQuest() first to select the quest to abandon.
        /// </summary>
        /// <example>AbandonQuest()</example>
        internal static string[] AbandonQuest()
        {
            return Run("AbandonQuest()");
        }

        /// <summary>
        /// Unlearns a skill (used only for professions)
        /// </summary>
        /// <param name="index">Index of an entry in the skills list (between 1 and GetNumSkillLines()) (number)</param>
        /// <example>AbandonSkill(index)</example>
        internal static string[] AbandonSkill(int index)
        {
            return Run("AbandonSkill({0})", index);
        }

        /// <summary>
        /// Returns the absolute value of a number. Alias for the standard library function math.abs.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>absoluteValue=abs(x)</example>
        internal static string[] abs(int x)
        {
            return Run("abs({0})", x); //absoluteValue
        }

        /// <summary>
        /// Accepts the next upcoming periodic resurrection from a battleground spirit healer. Automatically called in the default UI in response to the AREA_SPIRIT_HEALER_IN_RANGE event which fires when the player's ghost is near a battleground spirit healer.
        /// </summary>
        /// <example>AcceptAreaSpiritHeal()</example>
        internal static string[] AcceptAreaSpiritHeal()
        {
            return Run("AcceptAreaSpiritHeal()");
        }

        /// <summary>
        /// Accepts an invitation to join an arena team
        /// </summary>
        /// <example>AcceptArenaTeam()</example>
        internal static string[] AcceptArenaTeam()
        {
            return Run("AcceptArenaTeam()");
        }

        /// <summary>
        /// Accepts the offered teleport to a battleground/arena or leaves the battleground/arena or queue. This function requires a hardware event when used to accept a teleport; it can be called without a hardware event for leaving a battleground/arena or its queue.
        /// </summary>
        /// <param name="index">Index of a battleground or arena type for which the player is queued (number)</param>
        /// <param name="accept">1 to accept the offered teleport; nil to exit the queue or leave the battleground/arena match in progress (1nil)</param>
        /// <example>AcceptBattlefieldPort(index,accept)</example>
        internal static string[] AcceptBattlefieldPort(int index, string accept)
        {
            return Run("AcceptBattlefieldPort({0},{1})", index, accept);
        }

        /// <summary>
        /// Accepts a proposed duel
        /// </summary>
        /// <example>AcceptDuel()</example>
        internal static string[] AcceptDuel()
        {
            return Run("AcceptDuel()");
        }

        /// <summary>
        /// Accepts an invitation to join a party or raid. Usable in response to the PARTY_INVITE_REQUEST event which fires when the player is invited to join a group.  This function does not automatically hide the default UI's group invite dialog; doing such requires calling StaticPopup_Hide("PARTY_INVITE"), but only after the PARTY_MEMBERS_CHANGED event fires indicating the player has successfully joined the group.
        /// </summary>
        /// <example>AcceptGroup()</example>
        internal static string[] AcceptGroup()
        {
            return Run("AcceptGroup()");
        }

        /// <summary>
        /// Accepts an invitation to join a guild. Usable in response to the GUILD_INVITE_REQUEST event, which fires when the player is invited to join a guild.
        /// </summary>
        /// <example>AcceptGuild()</example>
        internal static string[] AcceptGuild()
        {
            return Run("AcceptGuild()");
        }

        /// <summary>
        /// Accepts a level offered by the player's Recruit-a-Friend partner
        /// </summary>
        /// <example>AcceptLevelGrant()</example>
        internal static string[] AcceptLevelGrant()
        {
            return Run("AcceptLevelGrant()");
        }

        /// <summary>
        /// Accepts the quest offered by a questgiver. Usable following the QUEST_DETAIL event in which the questgiver presents the player with the details of a quest and the option to accept or decline.
        /// </summary>
        /// <example>AcceptQuest()</example>
        internal static string[] AcceptQuest()
        {
            return Run("AcceptQuest()");
        }

        /// <summary>
        /// Accepts an offered resurrection spell. Not used for self-resurrection; see UseSoulstone() for such cases.
        /// </summary>
        /// <example>AcceptResurrect()</example>
        internal static string[] AcceptResurrect()
        {
            return Run("AcceptResurrect()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>AcceptSkillUps()</example>
        internal static string[] AcceptSkillUps()
        {
            return Run("AcceptSkillUps()");
        }

        /// <summary>
        /// Accepts changes made in the Item Socketing UI. Any gems added are permanently socketed into the item, and any existing gems replaced by new gems are destroyed.  This function only has effect while the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <example>AcceptSockets()</example>
        internal static string[] AcceptSockets()
        {
            return Run("AcceptSockets()");
        }

        /// <summary>
        /// Accepts a proposed trade. Once both players have accepted, the trade process completes and the actual exchange of items/money/enchants takes place.
        /// </summary>
        /// <example>AcceptTrade()</example>
        internal static string[] AcceptTrade()
        {
            return Run("AcceptTrade()");
        }

        /// <summary>
        /// Resurrects the player at a spirit healer, accepting possible consequences. Resurrecting at a spirit healer generally results in a loss of durability (both equipped items and those in the player's bags) and may also result in the Resurrection Sickness debuff.Early in the development of World of Warcraft, resurrecting at a spirit healer caused a loss of experience points. The change to a loss of item durability was made before the initial public static release of World of Warcraft, but the name of this function was never changed.
        /// </summary>
        /// <example>AcceptXPLoss()</example>
        internal static string[] AcceptXPLoss()
        {
            return Run("AcceptXPLoss()");
        }

        /// <summary>
        /// Returns whether an action has a range restriction
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>hasRange=ActionHasRange(slot)</example>
        internal static string[] ActionHasRange(string slot)
        {
            return Run("ActionHasRange({0})", slot); //hasRange
        }

        /// <summary>
        /// Adds a chat channel to the saved list of those displayed in a chat window. Used by the default UI's function ChatFrame_AddChannel() which manages the set of channel messages shown in a displayed ChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="channel">Name of a chat channel (number)</param>
        /// <example>zoneChannel=AddChatWindowChannel(index,channel)</example>
        internal static string[] AddChatWindowChannel(int index, int channel)
        {
            return Run("AddChatWindowChannel({0},{1})", index, channel); //zoneChannel
        }

        /// <summary>
        /// Adds a message type to the saved list of those displayed in a chat window. Used by the default UI's function ChatFrame_AddMessageGroup(), which manages the set of message types shown in a displayed ChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="messageGroup">Token identifying a message type (string, chatMsgType)</param>
        /// <example>AddChatWindowMessages(index,"messageGroup")</example>
        internal static string[] AddChatWindowMessages(int index, string messageGroup)
        {
            return Run("AddChatWindowMessages({0},\"{1}\")", index, messageGroup);
        }

        /// <summary>
        /// Adds a character to the friends list
        /// </summary>
        /// <param name="name">Name of a character to add to the friends list (string)</param>
        /// <example>AddFriend("name")</example>
        internal static string[] AddFriend(string name)
        {
            return Run("AddFriend(\"{0}\")", name);
        }

        /// <summary>
        /// Adds a character to the ignore list
        /// </summary>
        /// <param name="name">Name of a character to add to the ignore list (string)</param>
        /// <example>AddIgnore("name")</example>
        internal static string[] AddIgnore(string name)
        {
            return Run("AddIgnore(\"{0}\")", name);
        }

        /// <summary>
        /// Adds a character to the muted list for voice chat. The Muted list acts for voice chat as the Ignore list does for text chat: muted characters will never be heard regardless of which voice channels they join the player in.
        /// </summary>
        /// <param name="name">Name of a character to add to the mute list (string)</param>
        /// <example>AddMute("name")</example>
        internal static string[] AddMute(string name)
        {
            return Run("AddMute(\"{0}\")", name);
        }

        /// <summary>
        /// Adds the named character to the ignore list, or removes the character if already in the ignore list
        /// </summary>
        /// <param name="fullname">Name of a character to add to or remove from the ignore list (string)</param>
        /// <example>AddOrDelIgnore("fullname")</example>
        internal static string[] AddOrDelIgnore(string fullname)
        {
            return Run("AddOrDelIgnore(\"{0}\")", fullname);
        }

        /// <summary>
        /// Adds or removes a character from the voice mute list. Adds the character to the list if he/she is not already on it; removes the character if already on the list.The Muted list acts for voice chat as the Ignore list does for text chat: muted characters will never be heard regardless of which voice channels they join the player in.
        /// </summary>
        /// <param name="unit">A unit to mute (string, unitID)</param>
        /// <param name="name">Name of a character to mute (string)</param>
        /// <example>AddOrDelMute("unit")orAddOrDelMute("name")</example>
        internal static string[] AddOrDelMute(string unit, string name)
        {
            return Run("AddOrDelMute(\"{0}\")orAddOrDelMute(\"{1}\")", unit, name);
        }

        /// <summary>
        /// Adds the named character to the friends list, or removes the character if already in the friends list
        /// </summary>
        /// <param name="name">Name of a character to add to or remove from the friends list (string)</param>
        /// <param name="note">Note text to be associated with the friends list entry created (string)</param>
        /// <example>AddOrRemoveFriend("name","note")</example>
        internal static string[] AddOrRemoveFriend(string name, string note)
        {
            return Run("AddOrRemoveFriend(\"{0}\",\"{1}\")", name, note);
        }

        /// <summary>
        /// Spends (or unspends) talent points in the Talent UI's preview mode
        /// </summary>
        /// <param name="tabIndex">Index of a talent tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="talentIndex">Index of a talent option (between 1 and GetNumTalents()) (number)</param>
        /// <param name="points">Number of points to spend on the talent, or a negative number to unspend points. Values larger than allowed for the talent will be clipped to the maximum value (e.g. attempting to spend ten points on a talent that has five ranks will only spend up to five points). (number)</param>
        /// <param name="isPet">True to edit talents for the player's pet, false to edit talents for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>AddPreviewTalentPoints(tabIndex,talentIndex,points,isPet,talentGroup)</example>
        internal static string[] AddPreviewTalentPoints(int tabIndex, int talentIndex, int points, string isPet, int talentGroup)
        {
            return Run("AddPreviewTalentPoints({0},{1},{2},{3},{4})", tabIndex, talentIndex, points, isPet, talentGroup);
        }

        /// <summary>
        /// Adds a quest to the objectives tracker
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>AddQuestWatch(questIndex)</example>
        internal static string[] AddQuestWatch(int questIndex)
        {
            return Run("AddQuestWatch({0})", questIndex);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>AddSkillUp()</example>
        internal static string[] AddSkillUp()
        {
            return Run("AddSkillUp()");
        }

        /// <summary>
        /// Adds an achievement to the objectives tracker UI
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>AddTrackedAchievement(id)</example>
        internal static string[] AddTrackedAchievement(int id)
        {
            return Run("AddTrackedAchievement({0})", id);
        }

        /// <summary>
        /// Adds the money currently on the cursor to the trade window
        /// </summary>
        /// <example>AddTradeMoney()</example>
        internal static string[] AddTradeMoney()
        {
            return Run("AddTradeMoney()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>AppendToFile()</example>
        internal static string[] AppendToFile()
        {
            return Run("AppendToFile()");
        }

        /// <summary>
        /// Purchases the selected barber shop style changes. Does not exit the barber shop session, so further changes are still allowed.The BARBER_SHOP_SUCCESS and BARBER_SHOP_APPEARANCE_APPLIED events fire once the style change takes effect.
        /// </summary>
        /// <example>ApplyBarberShopStyle()</example>
        internal static string[] ApplyBarberShopStyle()
        {
            return Run("ApplyBarberShopStyle()");
        }

        /// <summary>
        /// Disbands an arena team. Only has effect if the player is captain of the given team.
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <example>ArenaTeamDisband(team)</example>
        internal static string[] ArenaTeamDisband(string team)
        {
            return Run("ArenaTeamDisband({0})", team);
        }

        /// <summary>
        /// Invites a character to one of the player's arena teams
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <param name="name">Name of a character to invite (string)</param>
        /// <example>ArenaTeamInviteByName(team,"name")</example>
        internal static string[] ArenaTeamInviteByName(string team, string name)
        {
            return Run("ArenaTeamInviteByName({0},\"{1}\")", team, name);
        }

        /// <summary>
        /// Leaves an arena team
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <example>ArenaTeamLeave(team)</example>
        internal static string[] ArenaTeamLeave(string team)
        {
            return Run("ArenaTeamLeave({0})", team);
        }

        /// <summary>
        /// Requests arena team roster information from the server. Does not return information directly: the ARENA_TEAM_ROSTER_UPDATE event fires when information from the server becomes available, which can then be retrieved using GetNumArenaTeamMembers() and GetArenaTeamRosterInfo().Roster update requests are limited to once every 10 seconds per team. For example, calling ArenaTeamRoster(1) twice within ten seconds will not result in a second ARENA_TEAM_ROSTER_UPDATE event, but calling ArenaTeamRoster(1) and ArenaTeamRoster(2) within ten seconds will result in two ARENA_TEAM_ROSTER_UPDATE events (one for each team).
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <example>ArenaTeamRoster(team)</example>
        internal static string[] ArenaTeamRoster(string team)
        {
            return Run("ArenaTeamRoster({0})", team);
        }

        /// <summary>
        /// Promotes an arena team member to team captain. Only has effect if the player is captain of the given team.
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <param name="name">Name of a team member to promote (string)</param>
        /// <example>ArenaTeamSetLeaderByName(team,"name")</example>
        internal static string[] ArenaTeamSetLeaderByName(string team, string name)
        {
            return Run("ArenaTeamSetLeaderByName({0},\"{1}\")", team, name);
        }

        /// <summary>
        /// Removes a member from an arena team
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <param name="name">Name of a team member to remove (string)</param>
        /// <example>ArenaTeamUninviteByName(team,"name")</example>
        internal static string[] ArenaTeamUninviteByName(string team, string name)
        {
            return Run("ArenaTeamUninviteByName({0},\"{1}\")", team, name);
        }

        /// <summary>
        /// Converts an arena team size to the appropriate numeric arena team identifier
        /// </summary>
        /// <param name="teamSize">The size of the arena team (i.e. 2 for 2v2, 3 for 3v3, etc.) (number)</param>
        /// <example>teamID=ArenaTeam_GetTeamSizeID(teamSize)</example>
        internal static string[] ArenaTeam_GetTeamSizeID(int teamSize)
        {
            return Run("ArenaTeam_GetTeamSizeID({0})", teamSize); //teamID
        }

        /// <summary>
        /// Stops movement initiated by JumpOrAscendStart. Used by the JUMP binding, which also controls ascent when swimming or flying. Has no meaningful effect if called while jumping (in which case movement is generally stopped by hitting the ground).
        /// </summary>
        /// <example>AscendStop()</example>
        internal static string[] AscendStop()
        {
            return Run("AscendStop()");
        }

        /// <summary>
        /// Causes a Lua error if a condition is failed
        /// </summary>
        /// <param name="condition">Any value (commonly the result of an expression) (value)</param>
        /// <param name="message">Error message to be produced if condition is false or nil (string)</param>
        /// <example>value=assert(condition,"message")</example>
        internal static string[] assert(string condition, string message)
        {
            return Run("assert({0},\"{1}\")", condition, message); //value
        }

        /// <summary>
        /// Targets the unit targeted by another unit
        /// </summary>
        /// <param name="unit">A unit to assist (string, unitID)</param>
        /// <param name="name">The name of a unit to assist (string)</param>
        /// <example>AssistUnit("unit")orAssistUnit("name")</example>
        internal static string[] AssistUnit(string unit, string name)
        {
            return Run("AssistUnit(\"{0}\")orAssistUnit(\"{1}\")", unit, name);
        }

        /// <summary>
        /// Begins auto-attack against the player's current target. (If the "Auto Attack/Auto Shot" option is turned on, also begins Auto Shot for hunters.)
        /// </summary>
        /// <example>AttackTarget()</example>
        internal static string[] AttackTarget()
        {
            return Run("AttackTarget()");
        }

        /// <summary>
        /// Equips the item on the cursor. The item is automatically equipped in the first available slot in which it fits. To equip an item in a specific slot, see EquipCursorItem().Causes an error message (UI_ERROR_MESSAGE) if the item on the cursor cannot be equipped. Does nothing if the cursor does not contain an item.
        /// </summary>
        /// <example>AutoEquipCursorItem()</example>
        internal static string[] AutoEquipCursorItem()
        {
            return Run("AutoEquipCursorItem()");
        }

        /// <summary>
        /// Automatically takes any attached items and money from a mail message. If the message does not have body text (which can be saved as a permanent copy), also deletes the message.
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>AutoLootMailItem(mailID)</example>
        internal static string[] AutoLootMailItem(int mailID)
        {
            return Run("AutoLootMailItem({0})", mailID);
        }

        /// <summary>
        /// Withdraws the item(s) from a slot in the guild bank, automatically adding to the player's bags
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name="slot">Index of an item slot in the guild bank tab (between 1 and MAX_GUILDBANK_SLOTS_PER_TAB) (number)</param>
        /// <example>AutoStoreGuildBankItem(tab,slot)</example>
        internal static string[] AutoStoreGuildBankItem(int tab, int slot)
        {
            return Run("AutoStoreGuildBankItem({0},{1})", tab, slot);
        }

        /// <summary>
        /// Returns the inventoryID corresponding to a bank item or bag slot
        /// </summary>
        /// <param name="buttonID">Numeric ID of an item or bag slot in the bank UI (number)</param>
        /// <param name="isBag">1 if the given ID corresponds to a bank bag slot; nil if the ID corresponds to an item slot (1nil)</param>
        /// <example>inventoryID=BankButtonIDToInvSlotID(buttonID[,isBag])</example>
        internal static string[] BankButtonIDToInvSlotID(int buttonID, string isBag)
        {
            return Run("BankButtonIDToInvSlotID({0}[,{1}])", buttonID, isBag); //inventoryID
        }

        /// <summary>
        /// Resets barber shop options to the currently worn styles. Changes the underlying data (and thus the character's appearance) only; the default barbershop UI does not update.
        /// </summary>
        /// <example>BarberShopReset()</example>
        internal static string[] BarberShopReset()
        {
            return Run("BarberShopReset()");
        }

        /// <summary>
        /// . No longer used; in earlier versions of World of Warcraft, another character offering to trade would prompt the player to accept (via this function) or cancel before beginning the Trade process.
        /// </summary>
        /// <example>BeginTrade()</example>
        internal static string[] BeginTrade()
        {
            return Run("BeginTrade()");
        }

        /// <summary>
        /// Confirms enchanting an item (when the item will become soulbound as a result). Usable following the BIND_ENCHANT event which fires upon attempting to perform an enchantment that would cause the target item to become soulbound.
        /// </summary>
        /// <example>BindEnchant()</example>
        internal static string[] BindEnchant()
        {
            return Run("BindEnchant()");
        }

        /// <summary>
        /// Repurchases an item recently sold to a vendor
        /// </summary>
        /// <param name="index">Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number)</param>
        /// <example>BuybackItem(index)</example>
        internal static string[] BuybackItem(int index)
        {
            return Run("BuybackItem({0})", index);
        }

        /// <summary>
        /// Purchases the next available guild bank tab
        /// </summary>
        /// <example>BuyGuildBankTab()</example>
        internal static string[] BuyGuildBankTab()
        {
            return Run("BuyGuildBankTab()");
        }

        /// <summary>
        /// Purchases a guild charter. Usable if the player is interacting with a guild registrar (i.e. between the GUILD_REGISTRAR_SHOW and GUILD_REGISTRAR_CLOSED events).
        /// </summary>
        /// <param name="guildName">Name of the guild to be created (string)</param>
        /// <example>BuyGuildCharter("guildName")</example>
        internal static string[] BuyGuildCharter(string guildName)
        {
            return Run("BuyGuildCharter(\"{0}\")", guildName);
        }

        /// <summary>
        /// Purchases an item available from a vendor
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <param name="quantity">Number of items to purchase (between 1 and GetMerchantItemMaxStack(index)) (number)</param>
        /// <example>BuyMerchantItem(index,quantity)</example>
        public static string[] BuyMerchantItem(int index, int quantity)
        {
            return Run("BuyMerchantItem({0},{1})", index, quantity);
        }

        /// <summary>
        /// Purchases an arena team charter
        /// </summary>
        /// <param name="team">Index of the size of team to create (number, arenaTeamID)</param>
        /// <param name="name">Name of the team to create (string)</param>
        /// <example>BuyPetition(team,"name")</example>
        internal static string[] BuyPetition(string team, string name)
        {
            return Run("BuyPetition({0},\"{1}\")", team, name);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>BuySkillTier()</example>
        internal static string[] BuySkillTier()
        {
            return Run("BuySkillTier()");
        }

        /// <summary>
        /// Purchases the next available stable slot, without confirmation. Only available while interacting with a Stable Master NPC (between the PET_STABLE_SHOW and PET_STABLE_CLOSED events and only if IsAtStableMaster() returns true).
        /// </summary>
        /// <example>BuyStableSlot()</example>
        internal static string[] BuyStableSlot()
        {
            return Run("BuyStableSlot()");
        }

        /// <summary>
        /// Purchases an ability or recipe available from a trainer
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>BuyTrainerService(index)</example>
        internal static string[] BuyTrainerService(int index)
        {
            return Run("BuyTrainerService({0})", index);
        }

        /// <summary>
        /// Returns the deposit amount for the item currently being set up for auction. Only returns useful information once an item has been placed in the Create Auction UI's "auction item" slot (see ClickAuctionSellItemButton()). Deposit amount for an auction varies based on the item being auction, the auction's proposed run time, and the auction house being used (i.e. faction or neutral).
        /// </summary>
        /// <param name="runTime">Run time of the proposed auction (number) 720 - 12 hours1440 - 24 hours2880 - 48 hours</param>
        /// <example>deposit=CalculateAuctionDeposit(runTime)</example>
        internal static string[] CalculateAuctionDeposit(int runTime)
        {
            return Run("CalculateAuctionDeposit({0})", runTime); //deposit
        }

        /// <summary>
        /// Saves the event recently created (and selected for editing) to the calendar. Until this function is called, an event created with CalendarNewEvent(), CalendarNewGuildEvent(), or CalendarNewGuildAnnouncement() will not exist on the calendar -- that is, guild members or invitees will not see it, and it will not persist if the player closes the calendar, reloads the UI, or goes to view or edit another event.
        /// </summary>
        /// <example>CalendarAddEvent()</example>
        internal static string[] CalendarAddEvent()
        {
            return Run("CalendarAddEvent()");
        }

        /// <summary>
        /// Returns whether the player can add an event to the calendar
        /// </summary>
        /// <example>canAdd=CalendarCanAddEvent()</example>
        internal static string[] CalendarCanAddEvent()
        {
            return Run("CalendarCanAddEvent()"); //canAdd
        }

        /// <summary>
        /// Returns whether the player can invite others to a calendar event
        /// </summary>
        /// <example>canInvite=CalendarCanSendInvite()</example>
        internal static string[] CalendarCanSendInvite()
        {
            return Run("CalendarCanSendInvite()"); //canInvite
        }

        /// <summary>
        /// Deselects (ends viewing/editing on) an event. After calling this function, results of attempting to query or change event information are not guaranteed until a new event is created or another existing event is opened.
        /// </summary>
        /// <example>CalendarCloseEvent()</example>
        internal static string[] CalendarCloseEvent()
        {
            return Run("CalendarCloseEvent()");
        }

        /// <summary>
        /// Clears the event selection used only for CalendarContext functions. The selection state cleared by this function is used only by other CalendarContext functions; other calendar event functions use the selection state set by CalendarOpenEvent, CalendarNewEvent, CalendarNewGuildEvent, or CalendarNewGuildAnnouncement (if they use a selection state at all).
        /// </summary>
        /// <example>CalendarContextDeselectEvent()</example>
        internal static string[] CalendarContextDeselectEvent()
        {
            return Run("CalendarContextDeselectEvent()");
        }

        /// <summary>
        /// Returns whether the player can report an event invitation as spam. If all arguments are omitted, uses the event selected by CalendarContextSelectEvent.
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>canReport=CalendarContextEventCanComplain([monthOffset,]day,index)</example>
        internal static string[] CalendarContextEventCanComplain(int monthOffset, int day, int index)
        {
            return Run("CalendarContextEventCanComplain([{0},]{1},{2})", monthOffset, day, index); //canReport
        }

        /// <summary>
        /// Returns whether the player can edit an event
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>canEdit=CalendarContextEventCanEdit([monthOffset,]day,index)</example>
        internal static string[] CalendarContextEventCanEdit(int monthOffset, int day, int index)
        {
            return Run("CalendarContextEventCanEdit([{0},]{1},{2})", monthOffset, day, index); //canEdit
        }

        /// <summary>
        /// Returns whether the player can paste an event
        /// </summary>
        /// <example>canPaste=CalendarContextEventClipboard()</example>
        internal static string[] CalendarContextEventClipboard()
        {
            return Run("CalendarContextEventClipboard()"); //canPaste
        }

        /// <summary>
        /// Reports an event invitation as spam
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextEventComplain([monthOffset,]day,index)</example>
        internal static string[] CalendarContextEventComplain(int monthOffset, int day, int index)
        {
            return Run("CalendarContextEventComplain([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Copies an event for later pasting
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextEventCopy([monthOffset,]day,index)</example>
        internal static string[] CalendarContextEventCopy(int monthOffset, int day, int index)
        {
            return Run("CalendarContextEventCopy([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Returns the type of a calendar event. If all arguments are omitted, uses the event selected by CalendarContextSelectEvent.
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>calendarType=CalendarContextEventGetCalendarType([monthOffset,]day,index)</example>
        internal static string[] CalendarContextEventGetCalendarType(int monthOffset, int day, int index)
        {
            return Run("CalendarContextEventGetCalendarType([{0},]{1},{2})", monthOffset, day, index); //calendarType
        }

        /// <summary>
        /// Pastes a copied event into a given date. Does nothing if no event has been copied via CalendarContextEventCopy.
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current month</param>
        /// <param name="day">Day of the month (number)</param>
        /// <example>CalendarContextEventPaste(monthOffset,day)</example>
        internal static string[] CalendarContextEventPaste(int monthOffset, int day)
        {
            return Run("CalendarContextEventPaste({0},{1})", monthOffset, day);
        }

        /// <summary>
        /// Deletes an event from the calendar
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextEventRemove([monthOffset,]day,index)</example>
        internal static string[] CalendarContextEventRemove(int monthOffset, int day, int index)
        {
            return Run("CalendarContextEventRemove([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Signs the player up for a guild event
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextEventSignUp([monthOffset,]day,index)</example>
        internal static string[] CalendarContextEventSignUp(int monthOffset, int day, int index)
        {
            return Run("CalendarContextEventSignUp([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Returns the month, day, and index of the event selection used only for CalendarContext functions. The selection state referenced by this function is used only by other CalendarContext functions; other calendar event functions use the selection state set by CalendarOpenEvent, CalendarNewEvent, CalendarNewGuildEvent, or CalendarNewGuildAnnouncement (if they use a selection state at all).Used in the default UI to implement the calendar's context menu (on right-click).
        /// </summary>
        /// <example>monthOffset,day,index=CalendarContextGetEventIndex()</example>
        internal static string[] CalendarContextGetEventIndex()
        {
            return Run("CalendarContextGetEventIndex()"); //monthOffset,day,index
        }

        /// <summary>
        /// Accepts an event invitation
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextInviteAvailable([monthOffset,]day,index)</example>
        internal static string[] CalendarContextInviteAvailable(int monthOffset, int day, int index)
        {
            return Run("CalendarContextInviteAvailable([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Declines an event invitation
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextInviteDecline([monthOffset,]day,index)</example>
        internal static string[] CalendarContextInviteDecline(int monthOffset, int day, int index)
        {
            return Run("CalendarContextInviteDecline([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Returns whether the player has been invited to an event and not yet responded
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>pendingInvite=CalendarContextInviteIsPending([monthOffset,]day,index)</example>
        internal static string[] CalendarContextInviteIsPending(int monthOffset, int day, int index)
        {
            return Run("CalendarContextInviteIsPending([{0},]{1},{2})", monthOffset, day, index); //pendingInvite
        }

        /// <summary>
        /// Returns the player's moderator status for an event
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>modStatus=CalendarContextInviteModeratorStatus([monthOffset,]day,index)</example>
        internal static string[] CalendarContextInviteModeratorStatus(int monthOffset, int day, int index)
        {
            return Run("CalendarContextInviteModeratorStatus([{0},]{1},{2})", monthOffset, day, index); //modStatus
        }

        /// <summary>
        /// Removes an invitation from the player's calendar or removes the player from a guild event's signup list
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextInviteRemove([monthOffset,]day,index)</example>
        internal static string[] CalendarContextInviteRemove(int monthOffset, int day, int index)
        {
            return Run("CalendarContextInviteRemove([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Returns the player's invite status for an event
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>inviteStatus=CalendarContextInviteStatus([monthOffset,]day,index)</example>
        internal static string[] CalendarContextInviteStatus(int monthOffset, int day, int index)
        {
            return Run("CalendarContextInviteStatus([{0},]{1},{2})", monthOffset, day, index); //inviteStatus
        }

        /// <summary>
        /// Returns the invite type for an event
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>inviteType=CalendarContextInviteType([monthOffset,]day,index)</example>
        internal static string[] CalendarContextInviteType(int monthOffset, int day, int index)
        {
            return Run("CalendarContextInviteType([{0},]{1},{2})", monthOffset, day, index); //inviteType
        }

        /// <summary>
        /// Selects an event for use only with other CalendarContext functions. The selection state set by this function is used only by other CalendarContext functions; other calendar event functions use the selection state set by CalendarOpenEvent, CalendarNewEvent, CalendarNewGuildEvent, or CalendarNewGuildAnnouncement (if they use a selection state at all).Used in the default UI to implement the calendar's context menu (on right-click).
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current monthnil - Use the event selected by CalendarContextSelectEvent and ignore further arguments</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarContextSelectEvent([monthOffset,]day,index)</example>
        internal static string[] CalendarContextSelectEvent(int monthOffset, int day, int index)
        {
            return Run("CalendarContextSelectEvent([{0},]{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Returns default options for the guild member Mass Invite filter 
        /// </summary>
        /// <example>minLevel,maxLevel,rank=CalendarDefaultGuildFilter()</example>
        internal static string[] CalendarDefaultGuildFilter()
        {
            return Run("CalendarDefaultGuildFilter()"); //minLevel,maxLevel,rank
        }

        /// <summary>
        /// Accepts invitation to the selected calendar event. Only applies to player-created events and invitations sent by other players; has no effect if the current calendar event is of another type.
        /// </summary>
        /// <example>CalendarEventAvailable()</example>
        internal static string[] CalendarEventAvailable()
        {
            return Run("CalendarEventAvailable()");
        }

        /// <summary>
        /// Returns whether the player can edit the selected calendar event
        /// </summary>
        /// <example>canEdit=CalendarEventCanEdit()</example>
        internal static string[] CalendarEventCanEdit()
        {
            return Run("CalendarEventCanEdit()"); //canEdit
        }

        /// <summary>
        /// Returns whether an event invitee can be granted moderator authority
        /// </summary>
        /// <param name="index">Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number)</param>
        /// <example>canModerate=CalendarEventCanModerate(index)</example>
        internal static string[] CalendarEventCanModerate(int index)
        {
            return Run("CalendarEventCanModerate({0})", index); //canModerate
        }

        /// <summary>
        /// Disables the auto-approve feature (currently unused) for the selected calendar event
        /// </summary>
        /// <example>CalendarEventClearAutoApprove()</example>
        internal static string[] CalendarEventClearAutoApprove()
        {
            return Run("CalendarEventClearAutoApprove()");
        }

        /// <summary>
        /// Unlocks the selected calendar event. Locked events do not allow invitees to respond or guild members to sign up, but can still be edited.
        /// </summary>
        /// <example>CalendarEventClearLocked()</example>
        internal static string[] CalendarEventClearLocked()
        {
            return Run("CalendarEventClearLocked()");
        }

        /// <summary>
        /// Removes moderator status from a character on the selected event's invite/signup list. Moderators can change the status of characters on the invite/signup list and invite more characters, but cannot otherwise edit the event.
        /// </summary>
        /// <param name="index">Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number)</param>
        /// <example>CalendarEventClearModerator(index)</example>
        internal static string[] CalendarEventClearModerator(int index)
        {
            return Run("CalendarEventClearModerator({0})", index);
        }

        /// <summary>
        /// Declines invitation to the selected calendar event. Only applies to player-created events and invitations sent by other players; has no effect if the current calendar event is of another type.
        /// </summary>
        /// <example>CalendarEventDecline()</example>
        internal static string[] CalendarEventDecline()
        {
            return Run("CalendarEventDecline()");
        }

        /// <summary>
        /// Returns the type of the selected calendar event
        /// </summary>
        /// <example>calendarType=CalendarEventGetCalendarType()</example>
        internal static string[] CalendarEventGetCalendarType()
        {
            return Run("CalendarEventGetCalendarType()"); //calendarType
        }

        /// <summary>
        /// Returns information about an entry in the selected event's invite/signup list
        /// </summary>
        /// <param name="index">Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number)</param>
        /// <example>name,level,className,classFileName,inviteStatus,modStatus,inviteIsMine,inviteType=CalendarEventGetInvite(index)</example>
        internal static string[] CalendarEventGetInvite(int index)
        {
            return Run("CalendarEventGetInvite({0})", index); //name,level,className,classFileName,inviteStatus,modStatus,inviteIsMine,inviteType
        }

        /// <summary>
        /// Returns the time at which a character on the selected event's invite/signup list responded. Returns all zeros if the character has not yet responded or is the event's creator.
        /// </summary>
        /// <example>weekday,month,day,year,hour,minute=CalendarEventGetInviteResponseTime()</example>
        internal static string[] CalendarEventGetInviteResponseTime()
        {
            return Run("CalendarEventGetInviteResponseTime()"); //weekday,month,day,year,hour,minute
        }

        /// <summary>
        /// Returns the current sort mode for the event invite/signup list
        /// </summary>
        /// <example>criterion,reverse=CalendarEventGetInviteSortCriterion()</example>
        internal static string[] CalendarEventGetInviteSortCriterion()
        {
            return Run("CalendarEventGetInviteSortCriterion()"); //criterion,reverse
        }

        /// <summary>
        /// Returns the number of characters on the selected calendar event's invite/signup list
        /// </summary>
        /// <example>numInvites=CalendarEventGetNumInvites()</example>
        internal static string[] CalendarEventGetNumInvites()
        {
            return Run("CalendarEventGetNumInvites()"); //numInvites
        }

        /// <summary>
        /// Returns a list of localized event repetition option labels (currently unused)
        /// </summary>
        /// <example>...=CalendarEventGetRepeatOptions()</example>
        internal static string[] CalendarEventGetRepeatOptions()
        {
            return Run("CalendarEventGetRepeatOptions()"); //...
        }

        /// <summary>
        /// Returns the index of the selected entry on the selected event's invite/signup list. In the current default UI, selection behavior in the invite list is implemented but disabled; selecting an invite list entry has no effect on the behavior of other APIs.
        /// </summary>
        /// <example>index=CalendarEventGetSelectedInvite()</example>
        internal static string[] CalendarEventGetSelectedInvite()
        {
            return Run("CalendarEventGetSelectedInvite()"); //index
        }

        /// <summary>
        /// Returns a list of localized invite status labels
        /// </summary>
        /// <example>...=CalendarEventGetStatusOptions()</example>
        internal static string[] CalendarEventGetStatusOptions()
        {
            return Run("CalendarEventGetStatusOptions()"); //...
        }

        /// <summary>
        /// Returns a list of instance names and icons for dungeon or raid events
        /// </summary>
        /// <param name="eventType">Type (display style) of event to query (number) 1 - Raid dungeon2 - Five-player dungeon</param>
        /// <example>name,icon,expansion=CalendarEventGetTextures(eventType)</example>
        internal static string[] CalendarEventGetTextures(int eventType)
        {
            return Run("CalendarEventGetTextures({0})", eventType); //name,icon,expansion
        }

        /// <summary>
        /// Returns a list of event display style labels
        /// </summary>
        /// <example>...=CalendarEventGetTypes()</example>
        internal static string[] CalendarEventGetTypes()
        {
            return Run("CalendarEventGetTypes()"); //...
        }

        /// <summary>
        /// Returns whether the player has been invited to the selected event and not yet responded
        /// </summary>
        /// <example>pendingInvite=CalendarEventHasPendingInvite()</example>
        internal static string[] CalendarEventHasPendingInvite()
        {
            return Run("CalendarEventHasPendingInvite()"); //pendingInvite
        }

        /// <summary>
        /// Returns whether the selected event has unsaved changes
        /// </summary>
        /// <example>settingsChanged=CalendarEventHaveSettingsChanged()</example>
        internal static string[] CalendarEventHaveSettingsChanged()
        {
            return Run("CalendarEventHaveSettingsChanged()"); //settingsChanged
        }

        /// <summary>
        /// Attempts to invite a character to the selected event. If successful, the CALENDAR_UPDATE_INVITE_LIST event fires indicating the character has been added to the invite list; otherwise the CALENDAR_UPDATE_ERROR event fires containing a localized error message.
        /// </summary>
        /// <param name="name">Name of a character to invite (string)</param>
        /// <example>CalendarEventInvite("name")</example>
        internal static string[] CalendarEventInvite(string name)
        {
            return Run("CalendarEventInvite(\"{0}\")", name);
        }

        /// <summary>
        /// Returns whether the player has moderator status for the selected calendar event. Also returns true if the player is the event's creator.
        /// </summary>
        /// <example>isModerator=CalendarEventIsModerator()</example>
        internal static string[] CalendarEventIsModerator()
        {
            return Run("CalendarEventIsModerator()"); //isModerator
        }

        /// <summary>
        /// Removes a character from the selected event's invite/signup list. Cannot be used to remove the event's creator (fires a CALENDAR_UPDATE_ERROR event with nil error message if such is attempted).
        /// </summary>
        /// <param name="index">Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number)</param>
        /// <example>CalendarEventRemoveInvite(index)</example>
        internal static string[] CalendarEventRemoveInvite(int index)
        {
            return Run("CalendarEventRemoveInvite({0})", index);
        }

        /// <summary>
        /// Selects an entry in the selected event's invite/signup list. In the current default UI, selection behavior in the invite list is implemented but disabled; selecting an invite list entry has no effect on the behavior of other APIs.
        /// </summary>
        /// <param name="index">Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number)</param>
        /// <example>CalendarEventSelectInvite(index)</example>
        internal static string[] CalendarEventSelectInvite(int index)
        {
            return Run("CalendarEventSelectInvite({0})", index);
        }

        /// <summary>
        /// Enables the auto-approve feature (currently unused) for the selected calendar event
        /// </summary>
        /// <example>CalendarEventSetAutoApprove()</example>
        internal static string[] CalendarEventSetAutoApprove()
        {
            return Run("CalendarEventSetAutoApprove()");
        }

        /// <summary>
        /// Changes the scheduled date of the selected calendar event
        /// </summary>
        /// <param name="month">Index of the month (starting at 1 = January) (number)</param>
        /// <param name="day">Day of the month (number)</param>
        /// <param name="year">Year (full four-digit year) (number)</param>
        /// <example>CalendarEventSetDate(month,day,year)</example>
        internal static string[] CalendarEventSetDate(int month, int day, int year)
        {
            return Run("CalendarEventSetDate({0},{1},{2})", month, day, year);
        }

        /// <summary>
        /// Changes the descriptive text for the selected event
        /// </summary>
        /// <param name="description">Descriptive text to be displayed for the event (string)</param>
        /// <example>CalendarEventSetDescription("description")</example>
        internal static string[] CalendarEventSetDescription(string description)
        {
            return Run("CalendarEventSetDescription(\"{0}\")", description);
        }

        /// <summary>
        /// Locks the selected calendar event. Locked events do not allow invitees to respond or guild members to sign up, but can still be edited.
        /// </summary>
        /// <example>CalendarEventSetLocked()</example>
        internal static string[] CalendarEventSetLocked()
        {
            return Run("CalendarEventSetLocked()");
        }

        /// <summary>
        /// Changes the lockout date associated with the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the lockout date has been changed will revert it to its default of 1, 1, 1, 2000 (January 1, 2000).
        /// </summary>
        /// <param name="month">Index of the month (starting at 1 = January) (number)</param>
        /// <param name="day">Day of the month (number)</param>
        /// <param name="year">Year (full four-digit year) (number)</param>
        /// <example>CalendarEventSetLockoutDate(month,day,year)</example>
        internal static string[] CalendarEventSetLockoutDate(int month, int day, int year)
        {
            return Run("CalendarEventSetLockoutDate({0},{1},{2})", month, day, year);
        }

        /// <summary>
        /// Changes the lockout time associated with the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the lockout time has been changed will revert it to its default of 0, 0 (midnight).
        /// </summary>
        /// <param name="hour">Hour part of the time (on a 24-hour clock) (number)</param>
        /// <param name="minute">Minute part of the time (number)</param>
        /// <example>CalendarEventSetLockoutTime(hour,minute)</example>
        internal static string[] CalendarEventSetLockoutTime(int hour, int minute)
        {
            return Run("CalendarEventSetLockoutTime({0},{1})", hour, minute);
        }

        /// <summary>
        /// Grants moderator status to a character on the selected event's invite/signup list. Moderators can change the status of characters on the invite/signup list and invite more characters, but cannot otherwise edit the event.
        /// </summary>
        /// <param name="index">Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number)</param>
        /// <example>CalendarEventSetModerator(index)</example>
        internal static string[] CalendarEventSetModerator(int index)
        {
            return Run("CalendarEventSetModerator({0})", index);
        }

        /// <summary>
        /// Changes the repetition option for the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the repeat option has been changed will revert it to its default of 1 (Never).
        /// </summary>
        /// <param name="title">Index of a repeating event option; see CalendarEventGetRepeatOptions() (number)</param>
        /// <example>CalendarEventSetRepeatOption(title)</example>
        internal static string[] CalendarEventSetRepeatOption(int title)
        {
            return Run("CalendarEventSetRepeatOption({0})", title);
        }

        /// <summary>
        /// Changes the maximum number of invites/signups for the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the max size has been changed will revert it to its default of 100.
        /// </summary>
        /// <param name="size">Maximum number of invites/signups for the event (number)</param>
        /// <example>CalendarEventSetSize(size)</example>
        internal static string[] CalendarEventSetSize(int size)
        {
            return Run("CalendarEventSetSize({0})", size);
        }

        /// <summary>
        /// Sets the status of a character on the selected event's invite/signup list
        /// </summary>
        /// <param name="index">Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number)</param>
        /// <param name="inviteStatus">The player's status regarding the event (number) 1 - Invited (also used for non-invitation/non-signup events)2 - Accepted3 - Declined4 - Confirmed5 - Out6 - Standby7 - Signed up8 - Not signed up (displays as "")</param>
        /// <example>CalendarEventSetStatus(index,inviteStatus)</example>
        internal static string[] CalendarEventSetStatus(int index, int inviteStatus)
        {
            return Run("CalendarEventSetStatus({0},{1})", index, inviteStatus);
        }

        /// <summary>
        /// Changes the raid or dungeon instance for the selected event. Only applicable if the event's eventType is set to 1 or 2 (see CalendarEventSetType).A list of dungeon or raid instances can be found by calling CalendarEventGetTextures with the current eventType. That function returns three values (name, icon, and expansion) for each instance in the list; e.g. to get the index for use with this function, find the index of the instance's name in that list and divide by 3.
        /// </summary>
        /// <param name="index">Index of a dungeon or raid instance (number)</param>
        /// <example>CalendarEventSetTextureID(index)</example>
        internal static string[] CalendarEventSetTextureID(int index)
        {
            return Run("CalendarEventSetTextureID({0})", index);
        }

        /// <summary>
        /// Changes the scheduled time of the selected event
        /// </summary>
        /// <param name="hour">Hour part of the time (on a 24-hour clock) (number)</param>
        /// <param name="minute">Minute part of the time (number)</param>
        /// <example>CalendarEventSetTime(hour,minute)</example>
        internal static string[] CalendarEventSetTime(int hour, int minute)
        {
            return Run("CalendarEventSetTime({0},{1})", hour, minute);
        }

        /// <summary>
        /// Changes the title for the selected event
        /// </summary>
        /// <param name="title">A title to be displayed for the event (string)</param>
        /// <example>CalendarEventSetTitle("title")</example>
        internal static string[] CalendarEventSetTitle(string title)
        {
            return Run("CalendarEventSetTitle(\"{0}\")", title);
        }

        /// <summary>
        /// Changes the display type of the selected event
        /// </summary>
        /// <param name="eventType">Display type for the event; used in the default UI to determine which icon to show (number) 1 - Raid dungeon2 - Five-player dungeon3 - PvP event4 - Meeting5 - Other event</param>
        /// <example>CalendarEventSetType(eventType)</example>
        internal static string[] CalendarEventSetType(int eventType)
        {
            return Run("CalendarEventSetType({0})", eventType);
        }

        /// <summary>
        /// Signs the player up for the selected calendar event. Only applies to guild events; has no effect if called when the current calendar event is not a guild event.
        /// </summary>
        /// <example>CalendarEventSignUp()</example>
        internal static string[] CalendarEventSignUp()
        {
            return Run("CalendarEventSignUp()");
        }

        /// <summary>
        /// Sorts the event invite/signup list. Does not cause the list to automatically remain sorted; e.g. if sorted by status and a character's status is changed, the list will not be resorted until this function is called again.
        /// </summary>
        /// <param name="criterion">Token identifying the attribute to use for sorting the list (string) class - Sort by character class (according to the global table CLASS_SORT_ORDER)name - Sort by character namestatus - Sort by invite status</param>
        /// <param name="reverse">True to sort the lis in reverse order; otherwise false (boolean)</param>
        /// <example>CalendarEventSortInvites("criterion",reverse)</example>
        internal static string[] CalendarEventSortInvites(string criterion, string reverse)
        {
            return Run("CalendarEventSortInvites(\"{0}\",{1})", criterion, reverse);
        }

        /// <summary>
        /// Returns date information for a given month and year
        /// </summary>
        /// <param name="month">Index of a month (starting at 1 = January) (number)</param>
        /// <param name="year">Year (full four-digit year) (number)</param>
        /// <example>month,year,numDays,firstWeekday=CalendarGetAbsMonth(month,year)</example>
        internal static string[] CalendarGetAbsMonth(int month, int year)
        {
            return Run("CalendarGetAbsMonth({0},{1})", month, year); //{0},{1},numDays,firstWeekday
        }

        /// <summary>
        /// Returns the current date (in the server's time zone). Only returns valid information after the PLAYER_ENTERING_WORLD event has fired.
        /// </summary>
        /// <example>weekday,month,day,year=CalendarGetDate()</example>
        internal static string[] CalendarGetDate()
        {
            return Run("CalendarGetDate()"); //weekday,month,day,year
        }

        /// <summary>
        /// Returns information about a calendar event on a given day. Information can only be retrieved for events which might be visible in the calendar's current month -- i.e. those in the current month as well as those in (roughly) the last week of the previous month and (roughly) the first two weeks of the following month. To reliably retrieve information for events outside the calendar's current month, first change the calendar's month with CalendarSetMonth.
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current month</param>
        /// <param name="day">Day of the month containing an event (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>title,hour,minute,calendarType,sequenceType,eventType,texture,modStatus,inviteStatus,invitedBy,difficulty,inviteType=CalendarGetDayEvent(monthOffset,day,index)</example>
        internal static string[] CalendarGetDayEvent(int monthOffset, int day, int index)
        {
            return Run("CalendarGetDayEvent({0},{1},{2})", monthOffset, day, index); //title,hour,minute,calendarType,sequenceType,eventType,texture,modStatus,inviteStatus,invitedBy,difficulty,inviteType
        }

        /// <summary>
        /// Returns the month, day, and index of the selected calendar event
        /// </summary>
        /// <example>monthOffset,day,index=CalendarGetEventIndex()</example>
        internal static string[] CalendarGetEventIndex()
        {
            return Run("CalendarGetEventIndex()"); //monthOffset,day,index
        }

        /// <summary>
        /// Returns information about the selected calendar event (for player/guild events)
        /// </summary>
        /// <example>title,description,creator,eventType,repeatOption,maxSize,textureIndex,weekday,month,day,year,hour,minute,lockoutWeekday,lockoutMonth,lockoutDay,lockoutYear,lockoutHour,lockoutMinute,locked,autoApprove,pendingInvite,inviteStatus,inviteType,calendarType=CalendarGetEventInfo()</example>
        internal static string[] CalendarGetEventInfo()
        {
            return Run("CalendarGetEventInfo()"); //title,description,creator,eventType,repeatOption,maxSize,textureIndex,weekday,month,day,year,hour,minute,lockoutWeekday,lockoutMonth,lockoutDay,lockoutYear,lockoutHour,lockoutMinute,locked,autoApprove,pendingInvite,inviteStatus,inviteType,calendarType
        }

        /// <summary>
        /// Returns the index of the first invitation on a given day to which the player has not responded
        /// </summary>
        /// <param name="monthOffset">Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number)</param>
        /// <param name="day">Day of the month to query (number)</param>
        /// <example>index=CalendarGetFirstPendingInvite(monthOffset,day)</example>
        internal static string[] CalendarGetFirstPendingInvite(int monthOffset, int day)
        {
            return Run("CalendarGetFirstPendingInvite({0},{1})", monthOffset, day); //index
        }

        /// <summary>
        /// Returns additional information about a holiday event. Information can only be retrieved for events which might be visible in the calendar's current month -- i.e. those in the current month as well as those in (roughly) the last week of the previous month and (roughly) the first two weeks of the following month. To reliably retrieve information for events outside the calendar's current month, first change the calendar's month with CalendarSetMonth.
        /// </summary>
        /// <param name="monthOffset">Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number)</param>
        /// <param name="day">Day of the month to query (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>name,description,texture=CalendarGetHolidayInfo(monthOffset,day,index)</example>
        internal static string[] CalendarGetHolidayInfo(int monthOffset, int day, int index)
        {
            return Run("CalendarGetHoli{1}Info({0},{1},{2})", monthOffset, day, index); //name,description,texture
        }

        /// <summary>
        /// Returns the latest date for which events may be scheduled. Currently, Events can only be created up to one year from the last day of the current month (e.g. If the current date is May 19, 2009, the player is not allowed to create events scheduled for later than May 31, 2010). The default Calendar UI also does not allow viewing months beyond this date.
        /// </summary>
        /// <example>weekday,month,day,year=CalendarGetMaxCreateDate()</example>
        internal static string[] CalendarGetMaxCreateDate()
        {
            return Run("CalendarGetMaxCreateDate()"); //weekday,month,day,year
        }

        /// <summary>
        /// Returns the latest date usable in the calendar system. This function currently always returns December 31st, 2030 as the max date.
        /// </summary>
        /// <example>weekday,month,day,year=CalendarGetMaxDate()</example>
        internal static string[] CalendarGetMaxDate()
        {
            return Run("CalendarGetMaxDate()"); //weekday,month,day,year
        }

        /// <summary>
        /// Returns the earliest date usable in the calendar system. This function currently returns November 24th, 2004 as the minimum date.  This is the date that World of Warcraft was launched in the U.S.
        /// </summary>
        /// <example>weekday,month,day,year=CalendarGetMinDate()</example>
        internal static string[] CalendarGetMinDate()
        {
            return Run("CalendarGetMinDate()"); //weekday,month,day,year
        }

        /// <summary>
        /// Returns the earliest date for which information about past player events is available. Applies to events created by the player, invites the player accepted, and guild events or announcements. Currently, the default UI only shows past events from up to two weeks before the current date.
        /// </summary>
        /// <example>weekday,month,day,year=CalendarGetMinHistoryDate()</example>
        internal static string[] CalendarGetMinHistoryDate()
        {
            return Run("CalendarGetMinHistoryDate()"); //weekday,month,day,year
        }

        /// <summary>
        /// Returns information about a calendar month
        /// </summary>
        /// <param name="monthOffset">Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month). Defaults to the calendar's current month if omitted. (number)</param>
        /// <example>month,year,numDays,firstWeekday=CalendarGetMonth([monthOffset])</example>
        internal static string[] CalendarGetMonth(int monthOffset)
        {
            return Run("CalendarGetMonth([{0}])", monthOffset); //month,year,numDays,firstWeekday
        }

        /// <summary>
        /// Returns a list of localized month names
        /// </summary>
        /// <example>...=CalendarGetMonthNames()</example>
        internal static string[] CalendarGetMonthNames()
        {
            return Run("CalendarGetMonthNames()"); //...
        }

        /// <summary>
        /// Returns the number of calendar events on a given day
        /// </summary>
        /// <param name="monthOffset">Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number)</param>
        /// <param name="day">Day of the month to query (number)</param>
        /// <example>numEvents=CalendarGetNumDayEvents(monthOffset,day)</example>
        internal static string[] CalendarGetNumDayEvents(int monthOffset, int day)
        {
            return Run("CalendarGetNumDayEvents({0},{1})", monthOffset, day); //numEvents
        }

        /// <summary>
        /// Returns the number of calendar invitations to which the player has yet to respond
        /// </summary>
        /// <example>numInvites=CalendarGetNumPendingInvites()</example>
        internal static string[] CalendarGetNumPendingInvites()
        {
            return Run("CalendarGetNumPendingInvites()"); //numInvites
        }

        /// <summary>
        /// Returns information about a raid lockout or scheduled raid reset event. Information can only be retrieved for events which might be visible in the calendar's current month -- i.e. those in the current month as well as those in (roughly) the last week of the previous month and (roughly) the first two weeks of the following month. To reliably retrieve information for events outside the calendar's current month, first change the calendar's month with CalendarSetMonth.
        /// </summary>
        /// <param name="monthOffset">Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number)</param>
        /// <param name="day">Day of the month to query (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>title,calendarType,raidID,hour,minute,difficulty=CalendarGetRaidInfo(monthOffset,day,index)</example>
        internal static string[] CalendarGetRaidInfo(int monthOffset, int day, int index)
        {
            return Run("CalendarGetRaidInfo({0},{1},{2})", monthOffset, day, index); //title,calendarType,raidID,hour,minute,difficulty
        }

        /// <summary>
        /// Returns a list of localized weekday names
        /// </summary>
        /// <example>...=CalendarGetWeekdayNames()</example>
        internal static string[] CalendarGetWeekdayNames()
        {
            return Run("CalendarGetWeekdayNames()"); //...
        }

        /// <summary>
        /// Returns whether an update to calendar information is in progress. Returns true while the client is synchronizing its calendar information from the server; e.g. after calling CalendarOpenEvent, CalendarAddEvent, or CalendarUpdateEvent. During such periods, using other calendar API functions to query or change event information may not have valid orexpected results.
        /// </summary>
        /// <example>isPending=CalendarIsActionPending()</example>
        internal static string[] CalendarIsActionPending()
        {
            return Run("CalendarIsActionPending()"); //isPending
        }

        /// <summary>
        /// Repopulates the current event's invite list with members of one of the player's arena teams. Clears any invites already listed. Can only be used for events not yet created (i.e. saved to the calendar).
        /// </summary>
        /// <param name="index">Index of an arena team type (number) 1 - 2v2 team2 - 3v3 team3 - 5v5 team</param>
        /// <example>CalendarMassInviteArenaTeam(index)</example>
        internal static string[] CalendarMassInviteArenaTeam(int index)
        {
            return Run("CalendarMassInviteArenaTeam({0})", index);
        }

        /// <summary>
        /// Repopulates the selected event's invite list with members of the player's guild. Clears any invites already listed. Can only be used for events not yet created (i.e. saved to the calendar).
        /// </summary>
        /// <param name="minLevel">Lowest level of characters to invite (number)</param>
        /// <param name="maxLevel">Highest level of characters to invite (number)</param>
        /// <param name="rank">Lowest guild rank of characters to invite (number)</param>
        /// <example>CalendarMassInviteGuild(minLevel,maxLevel,rank)</example>
        internal static string[] CalendarMassInviteGuild(int minLevel, int maxLevel, int rank)
        {
            return Run("CalendarMassInviteGuild({0},{1},{2})", minLevel, maxLevel, rank);
        }

        /// <summary>
        /// Creates a new event and selects it for viewing/editing
        /// </summary>
        /// <example>CalendarNewEvent()</example>
        internal static string[] CalendarNewEvent()
        {
            return Run("CalendarNewEvent()");
        }

        /// <summary>
        /// Creates a new guild announcement and selects it for viewing/editing. Guild announcements are visible to all guild members but do not allow signups or invitations.
        /// </summary>
        /// <example>CalendarNewGuildAnnouncement()</example>
        internal static string[] CalendarNewGuildAnnouncement()
        {
            return Run("CalendarNewGuildAnnouncement()");
        }

        /// <summary>
        /// Creates a new guild event and selects it for viewing/editing. Guild events are visible to all guild members and allow members to sign up (or non-members to be invited).
        /// </summary>
        /// <example>CalendarNewGuildEvent()</example>
        internal static string[] CalendarNewGuildEvent()
        {
            return Run("CalendarNewGuildEvent()");
        }

        /// <summary>
        /// Selects a calendar event for viewing/editing
        /// </summary>
        /// <param name="monthOffset">Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number)</param>
        /// <param name="day">Day of the month to query (number)</param>
        /// <param name="index">Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number)</param>
        /// <example>CalendarOpenEvent(monthOffset,day,index)</example>
        internal static string[] CalendarOpenEvent(int monthOffset, int day, int index)
        {
            return Run("CalendarOpenEvent({0},{1},{2})", monthOffset, day, index);
        }

        /// <summary>
        /// Removes the selected event invitation from the player's calendar or removes the player from the selected guild event's signup list. NOTE: May disconnect the player if called when the selected calendar event is not a received invitation or a guild event.
        /// </summary>
        /// <example>CalendarRemoveEvent()</example>
        internal static string[] CalendarRemoveEvent()
        {
            return Run("CalendarRemoveEvent()");
        }

        /// <summary>
        /// Set's the calendar's month to an absolute date
        /// </summary>
        /// <param name="month">Index of the month (starting at 1 = January) (number)</param>
        /// <param name="year">Year (full four-digit year); uses current year if omitted (number)</param>
        /// <example>CalendarSetAbsMonth(month[,year])</example>
        internal static string[] CalendarSetAbsMonth(int month, int year)
        {
            return Run("CalendarSetAbsMonth({0}[,{1}])", month, year);
        }

        /// <summary>
        /// Sets the calendar's month relative to its current month
        /// </summary>
        /// <param name="monthOffset">Month containing an event relative to the calendar's currently displayed month (number) -1 - Month preceding the calendar's current month0 - The calendar's current month (i.e. same month as CalendarGetMonth())1 - Month after the calendar's current month</param>
        /// <example>CalendarSetMonth(monthOffset)</example>
        internal static string[] CalendarSetMonth(int monthOffset)
        {
            return Run("CalendarSetMonth({0})", monthOffset);
        }

        /// <summary>
        /// Saves changes made to the selected event. Until this function is called, changes made to an event will not be saved -- they will not propagate to guild members or invitees, and the event will revert to its previous state if the player closes the calendar, reloads the UI, or goes to view or edit another event.Only applies to existing events; for newly created events use CalendarAddEvent() once the event's attributes and initial invite list are set.
        /// </summary>
        /// <example>CalendarUpdateEvent()</example>
        internal static string[] CalendarUpdateEvent()
        {
            return Run("CalendarUpdateEvent()");
        }

        /// <summary>
        /// Summons a non-combat pet or mount. If called referencing the current non-combat pet, dismisses it. Does nothing if given an index greater than GetNumCompanions(type).
        /// </summary>
        /// <param name="type">Type of companion (string) CRITTER - A non-combat petMOUNT - A mount</param>
        /// <param name="index">Index of a companion (between 1 and GetNumCompanions(type)) (number)</param>
        /// <example>CallCompanion("type",index)</example>
        internal static string[] CallCompanion(string type, int index)
        {
            return Run("CallCompanion(\"{0}\",{1})", type, index);
        }

        /// <summary>
        /// Begins camera movement or selection (equivalent to left-clicking in the 3-D world). After calling this function (i.e. while the left mouse button is held), cursor movement rotates the camera. Final results vary by context and are determined when calling CameraOrSelectOrMoveStop() (i.e. releasing the left mouse button).Used by the CAMERAORSELECTORMOVE binding (not customizable in the default UI), which is bound to the left mouse button by default.
        /// </summary>
        /// <example>CameraOrSelectOrMoveStart()</example>
        internal static string[] CameraOrSelectOrMoveStart()
        {
            return Run("CameraOrSelectOrMoveStart()");
        }

        /// <summary>
        /// Ends action initiated by CameraOrSelectOrMoveStart. After calling this function (i.e. releasing the left mouse button), camera movement stops and normal cursor movement resumes. If the cursor has not moved significantly since calling CameraOrSelectOrMoveStart() (i.e. pressing the left mouse button) and is over a unit, that unit becomes the player's target; if the cursor has not moved significantly and is not over a unit, clears the player's target unless the "Sticky Targeting" option is enabled (i.e. the "deselectOnClick" CVar is 0).Used by the CAMERAORSELECTORMOVE binding (not customizable in the default UI), which is bound to the left mouse button by default.
        /// </summary>
        /// <param name="isSticky">If 1, the camera will remain static until cancelled. Otherwise, the camera will pan back to be directly behind the character (1nil)</param>
        /// <example>CameraOrSelectOrMoveStop(isSticky)</example>
        internal static string[] CameraOrSelectOrMoveStop(string isSticky)
        {
            return Run("CameraOrSelectOrMoveStop({0})", isSticky);
        }

        /// <summary>
        /// Zooms the camera in by a specified distance. The max distance of the camera is set in the Interface Options screen, and the maximum distance allowed is enforced by this setting, and the game client.  Depending on the setting, this is between 15.0 and 24.0 in the current version of the client.
        /// </summary>
        /// <param name="distance">The distance to zoom in (number)</param>
        /// <example>CameraZoomIn(distance)</example>
        internal static string[] CameraZoomIn(int distance)
        {
            return Run("CameraZoomIn({0})", distance);
        }

        /// <summary>
        /// Zooms the camera out by a specified distance. This function is used to zoom the camera out.  The max distance of the camera is set in the Interface Options screen, and the maximum distance allowed is enforced by this setting, and the game client.  Depending on the setting, this is between 15.0 and 24.0 in the current version of the client.
        /// </summary>
        /// <param name="distance">The distance to zoom out (number)</param>
        /// <example>CameraZoomOut(distance)</example>
        internal static string[] CameraZoomOut(int distance)
        {
            return Run("CameraZoomOut({0})", distance);
        }

        /// <summary>
        /// Lets you check if the player can change their skin color. Returns true if the player can change their skin color while using the barbershop.
        /// </summary>
        /// <example>canAlter=CanAlterSkin()</example>
        internal static string[] CanAlterSkin()
        {
            return Run("CanAlterSkin()"); //canAlter
        }

        /// <summary>
        /// Returns whether one of the player's auctions can be canceled. Generally, non-cancelable auctions are those which have completed but for which payment has not yet been delivered.
        /// </summary>
        /// <param name="index">Index of an auction in the "owner" listing (number)</param>
        /// <example>canCancel=CanCancelAuction(index)</example>
        internal static string[] CanCancelAuction(int index)
        {
            return Run("CanCancelAuction({0})", index); //canCancel
        }

        /// <summary>
        /// Declines the next upcoming periodic resurrection from a battleground spirit healer. Usable in response to the AREA_SPIRIT_HEALER_IN_RANGE event which fires when the player's ghost is near a battleground spirit healer.
        /// </summary>
        /// <example>CancelAreaSpiritHeal()</example>
        internal static string[] CancelAreaSpiritHeal()
        {
            return Run("CancelAreaSpiritHeal()");
        }

        /// <summary>
        /// Cancels an auction created by the player. When canceling an auction, the deposit amount is not refunded.
        /// </summary>
        /// <param name="index">Index of an auction in the "owner" listing (number)</param>
        /// <example>CancelAuction(index)</example>
        internal static string[] CancelAuction(int index)
        {
            return Run("CancelAuction({0})", index);
        }

        /// <summary>
        /// Exits a barber shop session. Causes the player character to stand up, returning to the normal world, and fires the BARBER_SHOP_CLOSE event. Any style changes already paid for (with ApplyBarberShopStyle()) are kept; any changes since are discarded.
        /// </summary>
        /// <example>CancelBarberShop()</example>
        internal static string[] CancelBarberShop()
        {
            return Run("CancelBarberShop()");
        }

        /// <summary>
        /// Cancels a proposed duel, or declines an offered duel
        /// </summary>
        /// <example>CancelDuel()</example>
        internal static string[] CancelDuel()
        {
            return Run("CancelDuel()");
        }

        /// <summary>
        /// Cancels a temporary weapon enchant. Examples of temporary enchants include mana oils, sharpening stones, and Shaman weapon enhancements.
        /// </summary>
        /// <param name="slot">1 to cancel the mainhand item enchant, 2 to cancel the offhand item enchant (number)</param>
        /// <example>CancelItemTempEnchantment(slot)</example>
        internal static string[] CancelItemTempEnchantment(int slot)
        {
            return Run("CancelItemTempEnchantment({0})", slot);
        }

        /// <summary>
        /// Cancels a pending logout or quit. Only has effect if logout or quit is pending (following the PLAYER_CAMPING or PLAYER_QUITING event).
        /// </summary>
        /// <example>CancelLogout()</example>
        internal static string[] CancelLogout()
        {
            return Run("CancelLogout()");
        }

        /// <summary>
        /// Cancels equipping a bind-on-equip item. When the player attempts to equip a bind-on-equip item, the default UI displays a dialog warning that equipping the item will cause it to become soulbound; this function is called when canceling that dialog.
        /// </summary>
        /// <param name="index">Index of a pending equip warning; currently always 0 as only one equip warning will be given at a time (number)</param>
        /// <example>CancelPendingEquip(index)</example>
        internal static string[] CancelPendingEquip(int index)
        {
            return Run("CancelPendingEquip({0})", index);
        }

        /// <summary>
        /// Cancels the current shapeshift form. Unlike other Shapeshift APIs, this function refers specifically to shapeshifting -- therefore including some abilities not found on the default UI's ShapeshiftBar and excluding some which are. For example, cancels shaman Ghost Wolf form and druid shapeshifts but not warrior stances, paladin auras, or rogue stealth.
        /// </summary>
        /// <example>CancelShapeshiftForm()</example>
        internal static string[] CancelShapeshiftForm()
        {
            return Run("CancelShapeshiftForm()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CancelSkillUps()</example>
        internal static string[] CancelSkillUps()
        {
            return Run("CancelSkillUps()");
        }

        /// <summary>
        /// Declines an offered summons. Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.
        /// </summary>
        /// <example>CancelSummon()</example>
        internal static string[] CancelSummon()
        {
            return Run("CancelSummon()");
        }

        /// <summary>
        /// Cancels a trade in progress. Can be used if either party has accepted the trade, but not once both have.
        /// </summary>
        /// <example>CancelTrade()</example>
        internal static string[] CancelTrade()
        {
            return Run("CancelTrade()");
        }

        /// <summary>
        /// Cancels the player's acceptance of a trade. If the player has accepted the trade but the target has not, reverts the player to the pre-acceptance state but does not end the trade.
        /// </summary>
        /// <example>CancelTradeAccept()</example>
        internal static string[] CancelTradeAccept()
        {
            return Run("CancelTradeAccept()");
        }

        /// <summary>
        /// Cancels a buff on the player
        /// </summary>
        /// <param name="unit">A unit to query (only valid for 'player') (string, unitID)</param>
        /// <param name="index">Index of an aura to query (number)</param>
        /// <param name="name">Name of an aura to query (string)</param>
        /// <param name="rank">Secondary text of an aura to query (often a rank; e.g. "Rank 7") (string)</param>
        /// <param name="filter">A list of filters to use separated by the pipe '|' character; e.g. "RAID|PLAYER" will query group buffs cast by the player (string) CANCELABLE - Query auras that can be cancelledHARMFUL - Query debuffs onlyHELPFUL - Query buffs onlyNOT_CANCELABLE - Query auras that cannot be cancelledPLAYER - Query auras the player has castRAID - Query auras the player can cast on party/raid members (as opposed to self buffs)</param>
        /// <example>CancelUnitBuff("unit",index[,"filter"])orCancelUnitBuff("unit","name"[,"rank"[,"filter"]])</example>
        internal static string[] CancelUnitBuff(string unit, int index, string name, string rank, string filter)
        {
            return Run("CancelUnitBuff(\"{0}\",{1}[,\"{4}\"])orCancelUnitBuff(\"{0}\",\"{2}\"[,\"{3}\"[,\"{4}\"]])", unit, index, name, rank, filter);
        }

        /// <summary>
        /// Returns whether a chat message can be reported as spam
        /// </summary>
        /// <param name="lineID">Unique identifier of a chat message (11th argument received with the corresponding CHAT_MSG event) (number)</param>
        /// <example>canComplain=CanComplainChat(lineID)</example>
        internal static string[] CanComplainChat(int lineID)
        {
            return Run("CanComplainChat({0})", lineID); //canComplain
        }

        /// <summary>
        /// Returns whether a mail message can be reported as spam. Returns nil for messages from Game Masters or friends, as well as for messages generated by the game itself (Auction House mail, quest messages from NPCs, etc).As with most mail functions, only provides valid information if used while the mail UI is open (between the MAIL_SHOW and MAIL_CLOSE events).
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>complain=CanComplainInboxItem(mailID)</example>
        internal static string[] CanComplainInboxItem(int mailID)
        {
            return Run("CanComplainInboxItem({0})", mailID); //complain
        }

        /// <summary>
        /// Returns whether the player is allowed to edit guild-wide calendar events
        /// </summary>
        /// <example>canEdit=CanEditGuildEvent()</example>
        internal static string[] CanEditGuildEvent()
        {
            return Run("CanEditGuildEvent()"); //canEdit
        }

        /// <summary>
        /// Returns whether the player is allowed to edit the guild information text. This text appears when clicking the "Guild Information" button in the default UI's Guild window.
        /// </summary>
        /// <example>canEdit=CanEditGuildInfo()</example>
        internal static string[] CanEditGuildInfo()
        {
            return Run("CanEditGuildInfo()"); //canEdit
        }

        /// <summary>
        /// Returns whether the player is allowed to edit a guild bank tab's information
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>canEdit=CanEditGuildTabInfo(tab)</example>
        internal static string[] CanEditGuildTabInfo(int tab)
        {
            return Run("CanEditGuildTabInfo({0})", tab); //canEdit
        }

        /// <summary>
        /// Returns whether the player is allowed to edit the guild Message of the Day
        /// </summary>
        /// <example>canEdit=CanEditMOTD()</example>
        internal static string[] CanEditMOTD()
        {
            return Run("CanEditMOTD()"); //canEdit
        }

        /// <summary>
        /// Returns whether the player is allowed to edit guild officer notes
        /// </summary>
        /// <example>canEdit=CanEditOfficerNote()</example>
        internal static string[] CanEditOfficerNote()
        {
            return Run("CanEditOfficerNote()"); //canEdit
        }

        /// <summary>
        /// Returns whether the player is allowed to edit guild public static notes
        /// </summary>
        /// <example>canEdit=CanEditPublicNote()</example>
        internal static string[] CanEditPublicNote()
        {
            return Run("CanEditPublicNote()"); //canEdit
        }

        /// <summary>
        /// Returns whether the player can eject the occupant of a seat in the player's vehicle
        /// </summary>
        /// <param name="seat">Index of a seat in the player's vehicle (number)</param>
        /// <example>canEject=CanEjectPassengerFromSeat(seat)</example>
        internal static string[] CanEjectPassengerFromSeat(int seat)
        {
            return Run("CanEjectPassengerFromSeat({0})", seat); //canEject
        }

        /// <summary>
        /// Returns whether the player is in a vehicle. Used in the default UI to determine whether to show the "Leave Vehicle" button while controlling siege vehicles, turrets, and certain special mounts and quest entities.
        /// </summary>
        /// <example>canExit=CanExitVehicle()</example>
        internal static string[] CanExitVehicle()
        {
            return Run("CanExitVehicle()"); //canExit
        }

        /// <summary>
        /// Returns whether the player can give levels to a Recruit-a-Friend partner
        /// </summary>
        /// <param name="unit">Unit to gift a level (string, unitID)</param>
        /// <example>canGrant=CanGrantLevel("unit")</example>
        internal static string[] CanGrantLevel(string unit)
        {
            return Run("CanGrantLevel(\"{0}\")", unit); //canGrant
        }

        /// <summary>
        /// Returns whether the player is allowed to pay for repairs using guild bank funds
        /// </summary>
        /// <example>canRepair=CanGuildBankRepair()</example>
        internal static string[] CanGuildBankRepair()
        {
            return Run("CanGuildBankRepair()"); //canRepair
        }

        /// <summary>
        /// Returns whether the player is allowed to demote lower ranked guild members
        /// </summary>
        /// <example>canDemote=CanGuildDemote()</example>
        internal static string[] CanGuildDemote()
        {
            return Run("CanGuildDemote()"); //canDemote
        }

        /// <summary>
        /// Returns whether the player is allowed to invite new members to his or her guild
        /// </summary>
        /// <example>canInvite=CanGuildInvite()</example>
        internal static string[] CanGuildInvite()
        {
            return Run("CanGuildInvite()"); //canInvite
        }

        /// <summary>
        /// Returns whether the player is allowed to promote other guild members. The player may promote other members only up to the rank below his or her own.
        /// </summary>
        /// <example>canPromote=CanGuildPromote()</example>
        internal static string[] CanGuildPromote()
        {
            return Run("CanGuildPromote()"); //canPromote
        }

        /// <summary>
        /// Returns whether the player is allowed to remove members from his or her guild. The player may only remove lower ranked members from the guild.
        /// </summary>
        /// <example>canRemove=CanGuildRemove()</example>
        internal static string[] CanGuildRemove()
        {
            return Run("CanGuildRemove()"); //canRemove
        }

        /// <summary>
        /// Returns whether the player is in a world PvP zone offering an exit option. Used by the default UI to show the MiniMapBattlefieldFrame and provide a menu option for leaving if the player is in a world PvP combat zone (i.e. Wintergrasp).
        /// </summary>
        /// <example>status=CanHearthAndResurrectFromArea()</example>
        internal static string[] CanHearthAndResurrectFromArea()
        {
            return Run("CanHearthAndResurrectFromArea()"); //status
        }

        /// <summary>
        /// Returns whether a unit can be inspected. Returns nil if the unit is out of inspect range, if the unit is an NPC, or if the unit is flagged for PvP combat and hostile to the player.
        /// </summary>
        /// <param name="unit">A unit to inspect (string, unitID)</param>
        /// <param name="showError">True to fire a UI_ERROR_MESSAGE event (causing the default UI to display an error message) if the unit cannot be inspected; otherwise false (boolean)</param>
        /// <example>canInspect=CanInspect("unit",showError)</example>
        internal static string[] CanInspect(string unit, string showError)
        {
            return Run("CanInspect(\"{0}\",{1})", unit, showError); //canInspect
        }

        /// <summary>
        /// Returns whether the battleground for which the player is queueing supports joining as a group
        /// </summary>
        /// <example>canGroupJoin=CanJoinBattlefieldAsGroup()</example>
        internal static string[] CanJoinBattlefieldAsGroup()
        {
            return Run("CanJoinBattlefieldAsGroup()"); //canGroupJoin
        }

        /// <summary>
        /// Returns whether the vendor with whom the player is currently interacting can repair equipment
        /// </summary>
        /// <example>canRepair=CanMerchantRepair()</example>
        internal static string[] CanMerchantRepair()
        {
            return Run("CanMerchantRepair()"); //canRepair
        }

        /// <summary>
        /// Returns whether the player can queue for Wintergrasp
        /// </summary>
        /// <example>canQueue=CanQueueForWintergrasp()</example>
        internal static string[] CanQueueForWintergrasp()
        {
            return Run("CanQueueForWintergrasp()"); //canQueue
        }

        /// <summary>
        /// Returns whether the player can perform an auction house query. All auction query types are throttled, preventing abuse of the server by clients sending too many queries in short succession. Normal queries can be sent once every few seconds; mass queries return all results in the auction house instead of one "page" at a time, and can only be sent once every several minutes.
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <example>canQuery,canMassQuery=CanSendAuctionQuery("list")</example>
        internal static string[] CanSendAuctionQuery(string list)
        {
            return Run("CanSendAuctionQuery(\"{0}\")", list); //canQuery,canMassQuery
        }

        /// <summary>
        /// Returns whether the Achievements UI should be enabled. Used by the default UI to determine whether to show or hide the menu button for Achievements (as it also does for Talents); currently always returns true.
        /// </summary>
        /// <example>canShow=CanShowAchievementUI()</example>
        internal static string[] CanShowAchievementUI()
        {
            return Run("CanShowAchievementUI()"); //canShow
        }

        /// <summary>
        /// Returns whether the player can reset instances. Used to determine whether to display the "Reset Instance" option in the unit popup menu for the player.Only instances to which the player is not saved may be reset (i.e. normal 5-man dungeons, not heroic dungeons or raids), and only by a solo player or group leader.
        /// </summary>
        /// <example>canResetInstances=CanShowResetInstances()</example>
        internal static string[] CanShowResetInstances()
        {
            return Run("CanShowResetInstances()"); //canResetInstances
        }

        /// <summary>
        /// Returns whether the player can sign the currently offered petition. Petitions can only be signed once per account, rather than once per character.
        /// </summary>
        /// <example>canSign=CanSignPetition()</example>
        internal static string[] CanSignPetition()
        {
            return Run("CanSignPetition()"); //canSign
        }

        /// <summary>
        /// Returns whether a unit can be summoned via Recruit-a-Friend. Indicates whether the target unit is currently summonable, not just whether that unit's account is linked to the player's via the Recruit-A-Friend program.
        /// </summary>
        /// <param name="name">Exact name of a player to summon (string)</param>
        /// <param name="unit">A unit to summon (string, unitID)</param>
        /// <example>canSummon=CanSummonFriend("name")orCanSummonFriend("unit")</example>
        internal static string[] CanSummonFriend(string name, string unit)
        {
            return Run("CanSummonFriend(\"{0}\")orCanSummonFriend(\"{1}\")", name, unit); //canSummon
        }

        /// <summary>
        /// Returns whether the player can change vehicle seats. Tells you if the player can switch seats in general, whereas UnitVehicleSeatInfo() tells you if the player can switch into a specific seat.
        /// </summary>
        /// <example>canSwitch=CanSwitchVehicleSeat()</example>
        internal static string[] CanSwitchVehicleSeat()
        {
            return Run("CanSwitchVehicleSeat()"); //canSwitch
        }

        /// <summary>
        /// Returns whether the player is in a vehicle with multiple seats
        /// </summary>
        /// <example>canSwitch=CanSwitchVehicleSeats()</example>
        internal static string[] CanSwitchVehicleSeats()
        {
            return Run("CanSwitchVehicleSeats()"); //canSwitch
        }

        /// <summary>
        /// Returns whether the player has enabled the equipment manager. Despite the name, this returns true when the player has enabled the use of the equipment manager through the interface or CVars.
        /// </summary>
        /// <example>enabled=CanUseEquipmentSets()</example>
        internal static string[] CanUseEquipmentSets()
        {
            return Run("CanUseEquipmentSets()"); //enabled
        }

        /// <summary>
        /// Returns whether the player is allowed to view guild officer notes
        /// </summary>
        /// <example>canView=CanViewOfficerNote()</example>
        internal static string[] CanViewOfficerNote()
        {
            return Run("CanViewOfficerNote()"); //canView
        }

        /// <summary>
        /// Returns whether the player is allowed to withdraw money from the guild bank
        /// </summary>
        /// <example>canWithdraw=CanWithdrawGuildBankMoney()</example>
        internal static string[] CanWithdrawGuildBankMoney()
        {
            return Run("CanWithdrawGuildBankMoney()"); //canWithdraw
        }

        /// <summary>
        /// Casts a pet action on a specific target
        /// </summary>
        /// <param name="index">Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number)</param>
        /// <param name="unit">A unit to be used as target for the action (string, unitID)</param>
        /// <example>CastPetAction(index[,"unit"])</example>
        internal static string[] CastPetAction(int index, string unit)
        {
            return Run("CastPetAction({0}[,\"{1}\"])", index, unit);
        }

        /// <summary>
        /// Casts an ability on the stance/shapeshift bar
        /// </summary>
        /// <param name="index">Index of an ability on the stance/shapeshift bar (between 1 and GetNumShapeshiftForms()) (number)</param>
        /// <example>CastShapeshiftForm(index)</example>
        internal static string[] CastShapeshiftForm(int index)
        {
            return Run("CastShapeshiftForm({0})", index);
        }

        /// <summary>
        /// Casts a from the spellbook. Only protected (i.e. usable only by the Blizzard UI) if the given id corresponds to a spell which can be cast (not a passive spell) and is not a trade skill; can be used by addons to cast the "spells" that open trade skill windows.
        /// </summary>
        /// <param name="id">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <example>CastSpell(id,"bookType")</example>
        internal static string[] CastSpell(string id, string bookType)
        {
            return Run("CastSpell({0},\"{1}\")", id, bookType);
        }

        /// <summary>
        /// Casts a spell specified by id (optionally on a specified unit). Only protected (i.e. usable only by the Blizzard UI) if the given spell is castable (not passive) and is not a trade skill; can be used by addons to cast the "spells" that open trade skill windows.
        /// </summary>
        /// <param name="spellID">ID of the spell to cast (number, spellID)</param>
        /// <param name="target">A unit to target with the spell (string, unitID)</param>
        /// <example>CastSpellByID(spellID[,"target"])</example>
        internal static string[] CastSpellByID(int spellID, string target = null)
        {
            return Run("CastSpellByID({0}{1})", spellID, string.Format(target != null ? ",\"{0}\"" : "", target));
        }

        /// <summary>
        /// Casts a spell specified by name (optionally on a specified unit). Only protected (i.e. usable only by the Blizzard UI) if the given spell is castable (not passive) and is not a trade skill; can be used by addons to cast the "spells" that open trade skill windows.
        /// </summary>
        /// <param name="name">Name of a spell to cast (string)</param>
        /// <param name="target">A unit to target with the spell (string, unitID)</param>
        /// <example>CastSpellByName("name"[,"target"])</example>

        internal static string[] CastSpellByName(string name, string target = null)
        {
            return Run("CastSpellByName(\"{0}\"{1})", name, string.Format(target != null ? ",\"{0}\"" : "", target));

        }

        /// <summary>
        /// Returns the smallest integer larger than or equal to a number. Alias for the standard library function math.ceil.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>ceiling=ceil(x)</example>
        internal static string[] ceil(int x)
        {
            return Run("ceil({0})", x); //ceiling
        }

        /// <summary>
        /// Changes the current action bar page
        /// </summary>
        /// <param name="page">The action bar page to change to (number)</param>
        /// <example>ChangeActionBarPage(page)</example>
        internal static string[] ChangeActionBarPage(int page)
        {
            return Run("ChangeActionBarPage({0})", page);
        }

        /// <summary>
        /// Changes the color associated with a chat message type
        /// </summary>
        /// <param name="messageGroup">Token identifying a message type (string, chatMsgType)</param>
        /// <param name="red">Red component of the color value (0.0 - 1.0) (number)</param>
        /// <param name="green">Red component of the color value (0.0 - 1.0) (number)</param>
        /// <param name="blue">Red component of the color value (0.0 - 1.0) (number)</param>
        /// <example>ChangeChatColor("messageGroup",red,green,blue)</example>
        internal static string[] ChangeChatColor(string messageGroup, int red, int green, int blue)
        {
            return Run("ChangeChatColor(\"{0}\",{1},{2},{3})", messageGroup, red, green, blue);
        }

        /// <summary>
        /// Bans a character from a chat channel. Has no effect unless the player is a moderator of the given channel
        /// </summary>
        /// <param name="channel">Name of the channel (string)</param>
        /// <param name="fullname">Name of the character to be banned (string)</param>
        /// <example>ChannelBan("channel","fullname")</example>
        internal static string[] ChannelBan(string channel, string fullname)
        {
            return Run("ChannelBan(\"{0}\",\"{1}\")", channel, fullname);
        }

        /// <summary>
        /// Invites a character to join a chat channel
        /// </summary>
        /// <param name="channel">Name of a channel (string)</param>
        /// <param name="name">Name of a character to invite (string)</param>
        /// <example>ChannelInvite("channel","name")</example>
        internal static string[] ChannelInvite(string channel, string name)
        {
            return Run("ChannelInvite(\"{0}\",\"{1}\")", channel, name);
        }

        /// <summary>
        /// Removes a player from the channel. Has no effect unless the player is a moderator of the given channel
        /// </summary>
        /// <param name="channel">Name of the channel (string)</param>
        /// <param name="fullname">Name of the character to kick (string)</param>
        /// <example>ChannelKick("channel","fullname")</example>
        internal static string[] ChannelKick(string channel, string fullname)
        {
            return Run("ChannelKick(\"{0}\",\"{1}\")", channel, fullname);
        }

        /// <summary>
        /// Grants a character moderator status in a chat channel. Has no effect unless the player is the owner of the given channel
        /// </summary>
        /// <param name="channel">Name of the channel (string)</param>
        /// <param name="fullname">Name of the character to promote to moderator (string)</param>
        /// <example>ChannelModerator("channel","fullname")</example>
        internal static string[] ChannelModerator(string channel, string fullname)
        {
            return Run("ChannelModerator(\"{0}\",\"{1}\")", channel, fullname);
        }

        /// <summary>
        /// Grants a character ability to speak in a moderated chat channel
        /// </summary>
        /// <param name="channelName">Name of a channel (string)</param>
        /// <param name="channelId">Index of a channel (number)</param>
        /// <param name="name">Name of a character to mute (string)</param>
        /// <example>ChannelMute("channelName","name")orChannelMute(channelId,"name")</example>
        internal static string[] ChannelMute(string channelName, int channelId, string name)
        {
            return Run("ChannelMute(\"{0}\",\"{2}\")orChannelMute({1},\"{2}\")", channelName, channelId, name);
        }

        /// <summary>
        /// Silences a character for chat and voice on a channel
        /// </summary>
        /// <param name="channelName">Name of a channel (string)</param>
        /// <param name="channelId">Index of a channel (number)</param>
        /// <param name="unit">Unit to silence (string, unitID)</param>
        /// <param name="name">Name of a character to silence (string)</param>
        /// <example>ChannelSilenceAll("channelName",["unit"]or["name"])orChannelSilenceAll(channelId,["unit"]or["name"])orChannelSilenceAll(["channelName"]or[channelId],"unit")orChannelSilenceAll(["channelName"]or[channelId],"name")</example>
        internal static string[] ChannelSilenceAll(string channelName, int channelId, string unit, string name)
        {
            return Run("ChannelSilenceAll(\"{0}\",[\"{2}\"]or[\"{3}\"])orChannelSilenceAll({1},[\"{2}\"]or[\"{3}\"])orChannelSilenceAll([\"{0}\"]or[{1}],\"{2}\")orChannelSilenceAll([\"{0}\"]or[{1}],\"{3}\")", channelName, channelId, unit, name);
        }

        /// <summary>
        /// Silences the given character for voice chat on the channel. Only a raid/party/battleground leader or assistant can silence a player.
        /// </summary>
        /// <param name="channelName">Name of a channel (string)</param>
        /// <param name="channelId">Index of a channel (number)</param>
        /// <param name="unit">Unit to silence (string, unitID)</param>
        /// <param name="name">Name of a character to silence (string)</param>
        /// <example>ChannelSilenceVoice("channelName",["unit"]or["name"])orChannelSilenceVoice(channelId,["unit"]or["name"])orChannelSilenceVoice(["channelName"]or[channelId],"unit")orChannelSilenceVoice(["channelName"]or[channelId],"name")</example>
        internal static string[] ChannelSilenceVoice(string channelName, int channelId, string unit, string name)
        {
            return Run("ChannelSilenceVoice(\"{0}\",[\"{2}\"]or[\"{3}\"])orChannelSilenceVoice({1},[\"{2}\"]or[\"{3}\"])orChannelSilenceVoice([\"{0}\"]or[{1}],\"{2}\")orChannelSilenceVoice([\"{0}\"]or[{1}],\"{3}\")", channelName, channelId, unit, name);
        }

        /// <summary>
        /// Enables or disables printing of join/leave announcements for a channel
        /// </summary>
        /// <param name="channel">Name of the channel for which to enable or disable announcements (string)</param>
        /// <example>ChannelToggleAnnouncements("channel")</example>
        internal static string[] ChannelToggleAnnouncements(string channel)
        {
            return Run("ChannelToggleAnnouncements(\"{0}\")", channel);
        }

        /// <summary>
        /// Lifts the ban preventing a character from joining a chat channel. Has no effect unless the player is a moderator of the given channel
        /// </summary>
        /// <param name="channel">Name of the channel (string)</param>
        /// <param name="fullname">Name of the character to for which to lift the ban (string)</param>
        /// <example>ChannelUnban("channel","fullname")</example>
        internal static string[] ChannelUnban(string channel, string fullname)
        {
            return Run("ChannelUnban(\"{0}\",\"{1}\")", channel, fullname);
        }

        /// <summary>
        /// Revokes moderator status from a character on a chat channel. Has no effect unless the player is the owner of the given channel
        /// </summary>
        /// <param name="channel">Name of the channel (string)</param>
        /// <param name="fullname">Name of the character to demote from moderator (string)</param>
        /// <example>ChannelUnmoderator("channel","fullname")</example>
        internal static string[] ChannelUnmoderator(string channel, string fullname)
        {
            return Run("ChannelUnmoderator(\"{0}\",\"{1}\")", channel, fullname);
        }

        /// <summary>
        /// Removes a character's ability to speak in a moderated chat channel
        /// </summary>
        /// <param name="channelName">Name of a channel (string)</param>
        /// <param name="channelId">Index of a channel (number)</param>
        /// <param name="name">Name of a character to unmute (string)</param>
        /// <example>ChannelUnmute("channelName","name")orChannelUnmute(channelId,"name")</example>
        internal static string[] ChannelUnmute(string channelName, int channelId, string name)
        {
            return Run("ChannelUnmute(\"{0}\",\"{2}\")orChannelUnmute({1},\"{2}\")", channelName, channelId, name);
        }

        /// <summary>
        /// Unsilences a character for chat and voice on a channel
        /// </summary>
        /// <param name="channelName">Name of a channel (string)</param>
        /// <param name="channelId">Index of a channel (number)</param>
        /// <param name="unit">Unit to unsilence (string, unitID)</param>
        /// <param name="name">Name of a character to unsilence (string)</param>
        /// <example>ChannelUnSilenceAll("channelName",["unit"]or["name"])orChannelUnSilenceAll(channelId,["unit"]or["name"])orChannelUnSilenceAll(["channelName"]or[channelId],"unit")orChannelUnSilenceAll(["channelName"]or[channelId],"name")</example>
        internal static string[] ChannelUnSilenceAll(string channelName, int channelId, string unit, string name)
        {
            return Run("ChannelUnSilenceAll(\"{0}\",[\"{2}\"]or[\"{3}\"])orChannelUnSilenceAll({1},[\"{2}\"]or[\"{3}\"])orChannelUnSilenceAll([\"{0}\"]or[{1}],\"{2}\")orChannelUnSilenceAll([\"{0}\"]or[{1}],\"{3}\")", channelName, channelId, unit, name);
        }

        /// <summary>
        /// Unsilences a character on a chat channel
        /// </summary>
        /// <param name="channelName">Name of a channel (string)</param>
        /// <param name="channelId">Index of a channel (number)</param>
        /// <param name="unit">Unit to unsilence (string, unitID)</param>
        /// <param name="name">Name of a character to unsilence (string)</param>
        /// <example>ChannelUnSilenceVoice("channelName",["unit"]or["name"])orChannelUnSilenceVoice(channelId,["unit"]or["name"])orChannelUnSilenceVoice(["channelName"]or[channelId],"unit")orChannelUnSilenceVoice(["channelName"]or[channelId],"name")</example>
        internal static string[] ChannelUnSilenceVoice(string channelName, int channelId, string unit, string name)
        {
            return Run("ChannelUnSilenceVoice(\"{0}\",[\"{2}\"]or[\"{3}\"])orChannelUnSilenceVoice({1},[\"{2}\"]or[\"{3}\"])orChannelUnSilenceVoice([\"{0}\"]or[{1}],\"{2}\")orChannelUnSilenceVoice([\"{0}\"]or[{1}],\"{3}\")", channelName, channelId, unit, name);
        }

        /// <summary>
        /// Disables voice chat in a channel
        /// </summary>
        /// <param name="channel">Name of a channel (string)</param>
        /// <param name="channelIndex">Index of a channel (number)</param>
        /// <example>ChannelVoiceOff("channel")orChannelVoiceOff(channelIndex)</example>
        internal static string[] ChannelVoiceOff(string channel, int channelIndex)
        {
            return Run("ChannelVoiceOff(\"{0}\")orChannelVoiceOff({0}Index)", channel, channelIndex);
        }

        /// <summary>
        /// Enables voice chat in a channel
        /// </summary>
        /// <param name="channel">Name of a channel (string)</param>
        /// <param name="channelIndex">Index of a channel (number)</param>
        /// <example>ChannelVoiceOn("channel")orChannelVoiceOn(channelIndex)</example>
        internal static string[] ChannelVoiceOn(string channel, int channelIndex)
        {
            return Run("ChannelVoiceOn(\"{0}\")orChannelVoiceOn({0}Index)", channel, channelIndex);
        }

        /// <summary>
        /// Adds a function to filter or alter messages to the chat display system. The filter function will be called each time a message is sent to one of the default chat frames (ChatFrame1, ChatFrame2, ellips, ChatFrame7).  The function will be passed the chat frame object that the message is being added to, along with the event that caused the messages to be added, and the arguments to that event.A filter function may return true if the message should be filtered , or false if the message should be displayed.  Following this boolean flag, the message can return a list of (possibly) altered arguments to be passed to the next filter function.See examples for details.
        /// </summary>
        /// <param name="event">A CHAT_MSG_Event for which the filter should be used (string)</param>
        /// <param name="filter">A function to filter incoming messages (function)</param>
        /// <example>ChatFrame_AddMessageEventFilter("event",filter)</example>
        internal static string[] ChatFrame_AddMessageEventFilter(string Event, string filter)
        {
            return Run("ChatFrame_AddMessageEventFilter(\"{0}\",{1})", Event, filter);
        }

        /// <summary>
        /// Returns the list of filters registered for a chat event. See ChatFrame_AddMessageEventFilter() for details about chat message filters.
        /// </summary>
        /// <param name="event">A CHAT_MSG_Event (string)</param>
        /// <example>filterTable=ChatFrame_GetMessageEventFilters("event")</example>
        internal static string[] ChatFrame_GetMessageEventFilters(string Event)
        {
            return Run("ChatFrame_GetMessageEventFilters(\"{0}\")", Event); //filterTable
        }

        /// <summary>
        /// Removes a previously set chat message filter. See ChatFrame_AddMessageEventFilter() for details about chat message filters.
        /// </summary>
        /// <param name="event">CHAT_MSG_Event from which to remove a filter (string)</param>
        /// <param name="filter">A filter function registered for the event (function)</param>
        /// <example>ChatFrame_RemoveMessageEventFilter("event",filter)</example>
        internal static string[] ChatFrame_RemoveMessageEventFilter(string Event, string filter)
        {
            return Run("ChatFrame_RemoveMessageEventFilter(\"{0}\",{1})", Event, filter);
        }

        /// <summary>
        /// Returns whether the player is in range of an NPC that can set the Hearthstone location. Usable following the CONFIRM_BINDER event which fires when the player speaks to an Innkeeper (or similar) NPC and chooses to set his or her Hearthstone location. Used in the default UI to hide the confirmation window for such if the player moves too far away from the NPC.
        /// </summary>
        /// <example>inRange=CheckBinderDist()</example>
        internal static string[] CheckBinderDist()
        {
            return Run("CheckBinderDist()"); //inRange
        }

        /// <summary>
        /// Requests information on the player's mailbox contents from the server. Information is not returned immediately; the MAIL_INBOX_UPDATE event fires when data becomes available for use by other Mail/Inbox API functions.
        /// </summary>
        /// <example>CheckInbox()</example>
        internal static string[] CheckInbox()
        {
            return Run("CheckInbox()");
        }

        /// <summary>
        /// Returns whether the player is close enough to a unit for certain types of interaction
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="distIndex">Number identifying one of the following action types (number) 1 - Inspect2 - Trade3 - Duel4 - Follow</param>
        /// <example>canInteract=CheckInteractDistance("unit",distIndex)</example>
        internal static string[] CheckInteractDistance(string unit, int distIndex)
        {
            return Run("CheckInteractDistance(\"{0}\",{1})", unit, distIndex); //canInteract
        }

        /// <summary>
        /// Returns whether the player is in range of a spirit healer. Usable following the CONFIRM_XP_LOSS event which fires upon speaking to a spirit healer while dead and choosing the option to immediately resurrect. Used in the default UI to hide the confirmation window for such if the player moves too far away from the spirit healer.
        /// </summary>
        /// <example>inRange=CheckSpiritHealerDist()</example>
        internal static string[] CheckSpiritHealerDist()
        {
            return Run("CheckSpiritHealerDist()"); //inRange
        }

        /// <summary>
        /// Returns whether the player is in range of an NPC that can reset talents. Usable following the CONFIRM_TALENT_WIPE event which fires when the player speaks to an trainer NPC and chooses to reset his or her talents. Used in the default UI to hide the confirmation window for such if the player moves too far away from the NPC.
        /// </summary>
        /// <example>inRange=CheckTalentMasterDist()</example>
        internal static string[] CheckTalentMasterDist()
        {
            return Run("CheckTalentMasterDist()"); //inRange
        }

        /// <summary>
        /// Disables comparing achievements/statistics with another player
        /// </summary>
        /// <example>ClearAchievementComparisonUnit()</example>
        internal static string[] ClearAchievementComparisonUnit()
        {
            return Run("ClearAchievementComparisonUnit()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ClearChannelWatch()</example>
        internal static string[] ClearChannelWatch()
        {
            return Run("ClearChannelWatch()");
        }

        /// <summary>
        /// Clears any contents attached to the cursor. If the cursor contains an item picked up from inventory (equipment slots) or a container, the item returns to its point of origin and the inventory or container slot is unlocked. (To destroy an item, see DeleteCursorItem()).If the cursor contains an action, that action is deleted (but not the spell, item, macro, etc that it represents).If the cursor contains any other data type, nothing happens other than the cursor being reverted to its default state -- picking up such objects has no effect on their points of origin.
        /// </summary>
        /// <example>ClearCursor()</example>
        internal static string[] ClearCursor()
        {
            return Run("ClearCursor()");
        }

        /// <summary>
        /// Clears the player's focus unit
        /// </summary>
        /// <example>ClearFocus()</example>
        internal static string[] ClearFocus()
        {
            return Run("ClearFocus()");
        }

        /// <summary>
        /// Ends inspection of another character. After this function is called, data about the inspected unit may not be available or valid.Used in the default UI when the InspectFrame is hidden. 
        /// </summary>
        /// <example>ClearInspectPlayer()</example>
        internal static string[] ClearInspectPlayer()
        {
            return Run("ClearInspectPlayer()");
        }

        /// <summary>
        /// Clears any registered override bindings for a given owner. An override binding is a temporary key or click binding that can be used to override the default bindings.  The bound key will revert to its normal setting once the override has been removed.
        /// </summary>
        /// <param name="owner">A Frame (or other widget) object for which override bindings are registered (table)</param>
        /// <example>ClearOverrideBindings(owner)</example>
        internal static string[] ClearOverrideBindings(string owner)
        {
            return Run("ClearOverrideBindings({0})", owner);
        }

        /// <summary>
        /// Removes a group role assignment from a member of the player's party or raid. If no unit (or name) is given, removes the role assignment from all members of the party or raid.
        /// </summary>
        /// <param name="assignment">A group role to assign to the unit (string) MAINASSIST - Remove the main assist roleMAINTANK - Remove the main tank role</param>
        /// <param name="unit">A unit in the player's party or raid (string, unitID)</param>
        /// <param name="name">Name of a unit in the player's party or raid (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>
        /// <example>ClearPartyAssignment("assignment"[,"unit"])orClearPartyAssignment("assignment"[,"name"[,exactMatch]])</example>
        internal static string[] ClearPartyAssignment(string assignment, string unit, string name, string exactMatch)
        {
            return Run("ClearPartyAssignment(\"{0}\"[,\"{1}\"])orClearPartyAssignment(\"{0}\"[,\"{2}\"[,{3}]])", assignment, unit, name, exactMatch);
        }

        /// <summary>
        /// Clears any text, items, or money from the mail message to be sent
        /// </summary>
        /// <example>ClearSendMail()</example>
        internal static string[] ClearSendMail()
        {
            return Run("ClearSendMail()");
        }

        /// <summary>
        /// Clears the player's current target
        /// </summary>
        /// <example>ClearTarget()</example>
        internal static string[] ClearTarget()
        {
            return Run("ClearTarget()");
        }

        /// <summary>
        /// Disables contextual tutorial display
        /// </summary>
        /// <example>ClearTutorials()</example>
        internal static string[] ClearTutorials()
        {
            return Run("ClearTutorials()");
        }

        /// <summary>
        /// Picks up an item from or puts an item into the "Create Auction" slot. If the cursor is empty and the slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the slot are exchanged.Only has effect if the player is interacting with an auctioneer (i.e. between the AUCTION_HOUSE_SHOW and AUCTION_HOUSE_CLOSED events). Causes an error message (UI_ERROR_MESSAGE) if the item on the cursor cannot be put up for auction (e.g. if the item is soulbound).
        /// </summary>
        /// <example>ClickAuctionSellItemButton()</example>
        internal static string[] ClickAuctionSellItemButton()
        {
            return Run("ClickAuctionSellItemButton()");
        }

        /// <summary>
        /// Processes a hyperlink associated with a map landmark. Possible landmarks include PvP objectives (both in battlegrounds and in world PvP areas), town and city markers on continent maps, and special markers such as those used during the Scourge Invasion world event. Some landmarks (such as those for towns on a zone map) exist but are not visible in the default UI.Hyperlinks are not used for any of the landmarks currently in the game; this function does nothing when called with a landmark which does not have a hyperlink.
        /// </summary>
        /// <param name="mapLinkID">Hyperlink ID associated with a map landmark, as retrieved from GetMapLandmarkInfo() (number)</param>
        /// <example>ClickLandmark(mapLinkID)</example>
        internal static string[] ClickLandmark(int mapLinkID)
        {
            return Run("ClickLandmark({0})", mapLinkID);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ClickPetitionButton()</example>
        internal static string[] ClickPetitionButton()
        {
            return Run("ClickPetitionButton()");
        }

        /// <summary>
        /// Picks up an item from or puts an item into an attachment slot for sending mail. If the cursor is empty and the mail attachment slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the mail attachment slot are exchanged.Only has effect if the player is interacting with a mailbox (i.e. between the MAIL_SHOW and MAIL_CLOSED events). Causes an error message (UI_ERROR_MESSAGE) if an invalid mail attachment slot is specified or if the item on the cursor cannot be mailed (e.g. if the item is soulbound).
        /// </summary>
        /// <param name="index">Index of a mail attachment slot (between 1 and ATTACHMENTS_MAX_SEND) (number)</param>
        /// <param name="autoReturn">True to automatically return the item in the given attachment slot to the player's bags; false or omitted to put the item on the cursor (boolean)</param>
        /// <example>ClickSendMailItemButton(index,autoReturn)</example>
        internal static string[] ClickSendMailItemButton(int index, string autoReturn)
        {
            return Run("ClickSendMailItemButton({0},{1})", index, autoReturn);
        }

        internal static string[] ClickSendMailItemButton()
        {
            return Run("ClickSendMailItemButton()");
        }

        /// <summary>
        /// Picks up or places a gem in the Item Socketing UI. If the Item Socketing UI is open and the cursor contains a socketable gem, places the gem into socket index. If the cursor does not hold an item and socket index is not locked, picks up the gem in that socket.Only has an effect while the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <param name="index">Index of a gem socket (between 1 and GetNumSockets()) (number)</param>
        /// <example>ClickSocketButton(index)</example>
        internal static string[] ClickSocketButton(int index)
        {
            return Run("ClickSocketButton({0})", index);
        }

        /// <summary>
        /// Inspects or moves a pet in the Pet Stable UI. Action taken depends on cursor contents as well as the index passed:If the cursor does not contain a pet, selects the given pet slot.If the cursor contains the active pet and index is a stable slot, places the pet into the stable (but not necessarily into the given slot). If the cursor contains a stabled pet, and index is 0, makes the stabled pet the active pet (and puts the active pet into the stable).
        /// </summary>
        /// <param name="index">Index of a stable slot (number) 0 - Active pet1 to NUM_PET_STABLE_SLOTS - A stable slot</param>
        /// <example>selected=ClickStablePet(index)</example>
        internal static string[] ClickStablePet(int index)
        {
            return Run("ClickStablePet({0})", index); //selected
        }

        /// <summary>
        /// Interacts with an item in a slot offered for trade by the target. Only meaningful when used with the last (7th) trade slot: if an enchantment-type spell is currently awaiting a target (i.e. the glowing hand cursor is showing), targets the item in the given trade slot for the enchantment. (The enchantment to be applied then shows for both parties in the trade, but is not actually performed until both parties accept the trade.)
        /// </summary>
        /// <param name="index">Index of an item slot on the target's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number)</param>
        /// <example>ClickTargetTradeButton(index)</example>
        internal static string[] ClickTargetTradeButton(int index)
        {
            return Run("ClickTargetTradeButton({0})", index);
        }

        /// <summary>
        /// Picks up an item from or puts an item in a slot offered for trade by the player. Results vary by context: If an item is on the cursor and no item is in the trade slot, the item is put into the trade slot and the cursor becomes emptyIf no item is on the cursor and an item is in the trade slot, the item is put on the cursor and removed from the trade slotIf an item is on the cursor and an item is in the trade slot, the item from the cursor is put into the trade slot and the item from the trade slot is put on the cursorIf both cursor and trade slot are empty, nothing happens
        /// </summary>
        /// <param name="index">Index of an item slot on the player's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number)</param>
        /// <example>ClickTradeButton(index)</example>
        internal static string[] ClickTradeButton(int index)
        {
            return Run("ClickTradeButton({0})", index);
        }

        /// <summary>
        /// Ends interaction with the Arena Team Roster. Called in the default UI when closing the Arena Team Roster frame. After this function is called, roster information functions may no longer return valid data.
        /// </summary>
        /// <example>CloseArenaTeamRoster()</example>
        internal static string[] CloseArenaTeamRoster()
        {
            return Run("CloseArenaTeamRoster()");
        }

        /// <summary>
        /// Ends interaction with the Auction House UI. Causes the AUCTION_HOUSE_CLOSED event to fire, indicating that Auction-related APIs may be unavailable or no longer return valid data.
        /// </summary>
        /// <example>CloseAuctionHouse()</example>
        internal static string[] CloseAuctionHouse()
        {
            return Run("CloseAuctionHouse()");
        }

        /// <summary>
        /// Ends interaction with the bank. Causes the BANKFRAME_CLOSED event to fire, indicating that APIs querying bank contents may no longer return valid results.
        /// </summary>
        /// <example>CloseBankFrame()</example>
        internal static string[] CloseBankFrame()
        {
            return Run("CloseBankFrame()");
        }

        /// <summary>
        /// Ends interaction with the battleground queueing UI. Causes the BATTLEFIELDS_CLOSED event to fire, indicating that Battlefield queueing-related APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseBattlefield()</example>
        internal static string[] CloseBattlefield()
        {
            return Run("CloseBattlefield()");
        }

        /// <summary>
        /// Ends an NPC "gossip" interaction. Causes the GOSSIP_CLOSED event to fire, indicating that Gossip APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseGossip()</example>
        internal static string[] CloseGossip()
        {
            return Run("CloseGossip()");
        }

        /// <summary>
        /// Ends interaction with the guild bank vault. Fires the GUILDBANKFRAME_CLOSED event, indicating that APIs related to the Guild Bank vault may no longer have effects or return valid data. (APIs related to guild bank permissions are still usable.)
        /// </summary>
        /// <example>CloseGuildBankFrame()</example>
        internal static string[] CloseGuildBankFrame()
        {
            return Run("CloseGuildBankFrame()");
        }

        /// <summary>
        /// Ends interaction with a guild registrar. Fires the GUILD_REGISTRAR_CLOSED event, indicating that guild registrar APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseGuildRegistrar()</example>
        internal static string[] CloseGuildRegistrar()
        {
            return Run("CloseGuildRegistrar()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CloseGuildRoster()</example>
        internal static string[] CloseGuildRoster()
        {
            return Run("CloseGuildRoster()");
        }

        /// <summary>
        /// Ends interaction with a text object or item. Causes the ITEM_TEXT_CLOSED event to fire, indicating that ItemText APIs are no longer valid.Called by the default UI when closing the ItemTextFrame, which is used for both readable world objects (books, plaques, gravestones, etc) and readable items (looted books, various quest-related scrolls and parchments, saved mail messages, etc).
        /// </summary>
        /// <example>CloseItemText()</example>
        internal static string[] CloseItemText()
        {
            return Run("CloseItemText()");
        }

        /// <summary>
        /// Ends interaction with a lootable corpse or object. Causes the LOOT_CLOSED event to fire, indicating that Loot APIs may no longer have effects or return valid data.If the corpse was designated as the player's loot (via the Round Robin, Group Loot, or Need Before Greed loot methods), the corpse's loot becomes available to the rest of the group. If (and only if) the loot was generated from Disenchanting, Prospecting, Milling or similar, all loot items are automatically picked up.
        /// </summary>
        /// <example>CloseLoot()</example>
        internal static string[] CloseLoot()
        {
            return Run("CloseLoot()");
        }

        /// <summary>
        /// Ends interaction with a mailbox. Fires the MAIL_CLOSED event, indicating that Mail/Inbox APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseMail()</example>
        internal static string[] CloseMail()
        {
            return Run("CloseMail()");
        }

        /// <summary>
        /// Ends interaction with a vendor. Causes the MERCHANT_CLOSED event to fire, indicating that Merchant APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseMerchant()</example>
        internal static string[] CloseMerchant()
        {
            return Run("CloseMerchant()");
        }

        /// <summary>
        /// Ends interaction with a petition. Fires the PETITION_CLOSED event, indicating that Petition APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>ClosePetition()</example>
        internal static string[] ClosePetition()
        {
            return Run("ClosePetition()");
        }

        /// <summary>
        /// Ends interaction with an arena registrar. Fires the PETITION_VENDOR_CLOSED event, indicating that arena registrar APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>ClosePetitionVendor()</example>
        internal static string[] ClosePetitionVendor()
        {
            return Run("ClosePetitionVendor()");
        }

        /// <summary>
        /// Ends use of the Pet Stables UI/API. Causes the PET_STABLE_CLOSED event to fire, indicating that stables-related APIs are no longer valid.
        /// </summary>
        /// <example>ClosePetStables()</example>
        internal static string[] ClosePetStables()
        {
            return Run("ClosePetStables()");
        }

        /// <summary>
        /// Ends interaction with a questgiver. Fires the QUEST_FINISHED event, indicating that questgiver-related APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseQuest()</example>
        internal static string[] CloseQuest()
        {
            return Run("CloseQuest()");
        }

        /// <summary>
        /// Ends interaction with the Item Socketing UI, discarding any changes made. Causes the SOCKET_INFO_CLOSE event to fire, indicating that Socket API functions may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseSocketInfo()</example>
        internal static string[] CloseSocketInfo()
        {
            return Run("CloseSocketInfo()");
        }

        /// <summary>
        /// Ends interaction with the guild tabard creator. Fires the CLOSE_TABARD_FRAME event, indicating that tabard creation APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseTabardCreation()</example>
        internal static string[] CloseTabardCreation()
        {
            return Run("CloseTabardCreation()");
        }

        /// <summary>
        /// Ends interaction with the Taxi (flight master) UI. Causes the TAXIMAP_CLOSED event to fire, indicating that Taxi APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseTaxiMap()</example>
        internal static string[] CloseTaxiMap()
        {
            return Run("CloseTaxiMap()");
        }

        /// <summary>
        /// Ends interaction with the Trade UI, canceling any trade in progress. Causes the TRADE_CLOSED event to fire, indicating that Trade APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseTrade()</example>
        internal static string[] CloseTrade()
        {
            return Run("CloseTrade()");
        }

        /// <summary>
        /// Ends interaction with the Trade Skill UI. Fires the TRADE_SKILL_CLOSE event, indicating that TradeSkill APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseTradeSkill()</example>
        internal static string[] CloseTradeSkill()
        {
            return Run("CloseTradeSkill()");
        }

        /// <summary>
        /// Ends interaction with a trainer. Fires the TRAINER_CLOSED event, indicating that Trainer APIs may no longer have effects or return valid data.
        /// </summary>
        /// <example>CloseTrainer()</example>
        internal static string[] CloseTrainer()
        {
            return Run("CloseTrainer()");
        }

        /// <summary>
        /// Collapses all headers and sub-headers in the Reputation UI. This function works for both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.).
        /// </summary>
        /// <example>CollapseAllFactionHeaders()</example>
        internal static string[] CollapseAllFactionHeaders()
        {
            return Run("CollapseAllFactionHeaders()");
        }

        /// <summary>
        /// Collapses a group header in the chat channel listing
        /// </summary>
        /// <param name="index">Index of a header in the display channel list (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <example>CollapseChannelHeader(index)</example>
        internal static string[] CollapseChannelHeader(int index)
        {
            return Run("CollapseChannelHeader({0})", index);
        }

        /// <summary>
        /// Collapses a given faction header or sub-header in the Reputation UI. Faction headers include both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.).
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>CollapseFactionHeader(index)</example>
        internal static string[] CollapseFactionHeader(int index)
        {
            return Run("CollapseFactionHeader({0})", index);
        }

        /// <summary>
        /// Collapses a header in the quest log
        /// </summary>
        /// <param name="questIndex">Index of a header in the quest log (between 1 and GetNumQuestLogEntries()), or 0 to collapse all headers (number)</param>
        /// <example>CollapseQuestHeader(questIndex)</example>
        internal static string[] CollapseQuestHeader(int questIndex)
        {
            return Run("CollapseQuestHeader({0})", questIndex);
        }

        /// <summary>
        /// Collapses a group header in the Skills UI. If index specifies a group header in the list, the group is collapsed; if it specifies a skill, the header containing the skill is collapsed.
        /// </summary>
        /// <param name="index">Index of an entry in the skills list (between 1 and GetNumSkillLines()) (number)</param>
        /// <example>CollapseSkillHeader(index)</example>
        internal static string[] CollapseSkillHeader(int index)
        {
            return Run("CollapseSkillHeader({0})", index);
        }

        /// <summary>
        /// Collapses a group header in the trade skill listing. Causes an error if index does not refer to a header.
        /// </summary>
        /// <param name="index">Index of a header in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>CollapseTradeSkillSubClass(index)</example>
        internal static string[] CollapseTradeSkillSubClass(int index)
        {
            return Run("CollapseTradeSkillSubClass({0})", index);
        }

        /// <summary>
        /// Collapses a group header in the trainer service listing. Causes a Lua error if the entry is not a header (see GetTrainerServiceInfo()).
        /// </summary>
        /// <param name="index">Index of a header in the trainer service listing (between 1 and GetNumTrainerServices()), or 0 to collapse all headers (number)</param>
        /// <example>CollapseTrainerSkillLine(index)</example>
        internal static string[] CollapseTrainerSkillLine(int index)
        {
            return Run("CollapseTrainerSkillLine({0})", index);
        }

        /// <summary>
        /// Interface to the Lua garbage collector
        /// </summary>
        /// <param name="option">One of the following options  collect - Performs a full garbage collection cyclecount - Returns the total Lua memory usage (in kilobytes)restart - Restarts the garbage collectorsetpause - Sets the garbage collector's pause percentage to arg; e.g., if 200, the collector waits for memory usage to double before starting a new cyclesetstepmul - Sets the garbage collector's speed (as a percentage relative to memory allocation) to arg; e.g., if 200, the collector runs twice as fast as memory is allocatedstep - Performs a garbage collection step, with size argstop - Stops the garbage collector</param>
        /// <param name="arg">Argument applicable to some options</param>
        /// <example>collectgarbage(option[,arg])</example>
        internal static string[] collectgarbage(string option, string arg)
        {
            return Run("collectgarbage({0}[,{1}])", option, arg);
        }

        /// <summary>
        /// Adds a filter to the combat log system. Each time this function is called a new filter is added to the combat log system.  Any combat log entry that passes the filter will be fired as a COMBAT_LOG_EVENT event in order from oldest to newest.
        /// </summary>
        /// <param name="events">Name of a combat log event type to include in the filtered list, or a comma-separated list of multiple names (string)</param>
        /// <param name="srcGUID">GUID of the source unit (string, guid)</param>
        /// <param name="srcMask">Bit mask of the source unit (number, bitfield)</param>
        /// <param name="destGUID">GUID of the destination unit (string, guid)</param>
        /// <param name="destMask">Bit mask of the destination unit (number, bitfield)</param>
        /// <example>CombatLogAddFilter("events","srcGUID",["destGUID"]or[destMask])orCombatLogAddFilter("events",srcMask,["destGUID"]or[destMask])orCombatLogAddFilter("events",["srcGUID"]or[srcMask],"destGUID")orCombatLogAddFilter("events",["srcGUID"]or[srcMask],destMask)</example>
        internal static string[] CombatLogAddFilter(string Events, string srcGUID, string srcMask, string destGUID, string destMask)
        {
            return Run("CombatLogAddFilter(\"{0}\",\"{1}\",[\"{3}\"]or[{4}])orCombatLogAddFilter(\"{0}\",{2},[\"{3}\"]or[{4}])orCombatLogAddFilter(\"{0}\",[\"{1}\"]or[{2}],\"{3}\")orCombatLogAddFilter(\"{0}\",[\"{1}\"]or[{2}],{4})", Events, srcGUID, srcMask, destGUID, destMask);
        }

        /// <summary>
        /// Advances the "cursor" position used by other CombatLog functions. Information about the entry at the "cursor" position can be retrieved with CombatLogGetCurrentEntry(). That function then advances the cursor to the next entry, so calling it repeatedly returns all information in the combat log -- this function can be used to "rewind" the combat log to retrieve information about earlier events or skip entries without retrieving their information.
        /// </summary>
        /// <param name="count">Number of entries by which to advance the "cursor"; can be negative to move to a previous entry (number)</param>
        /// <param name="ignoreFilter">True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean)</param>
        /// <example>hasEntry=CombatLogAdvanceEntry(count,ignoreFilter)</example>
        internal static string[] CombatLogAdvanceEntry(int count, string ignoreFilter)
        {
            return Run("CombatLogAdvanceEntry({0},{1})", count, ignoreFilter); //hasEntry
        }

        /// <summary>
        /// Removes all entries from the combat log
        /// </summary>
        /// <example>CombatLogClearEntries()</example>
        internal static string[] CombatLogClearEntries()
        {
            return Run("CombatLogClearEntries()");
        }

        /// <summary>
        /// Returns the combat log event information for the current entry and advances to the next entry. See COMBAT_LOG_EVENT for details of the event information.The combat log maintains a "cursor" in the list of entries; this function returns information about the event at the cursor position and advances the cursor to the next entry. Since this function is used by the default UI's combat log display, the cursor position is usually at the end of the log -- calling it thus returns nothing. The function CombatLogSetCurrentEntry() can be used to "rewind" the combat log cursor, enabling retrieval of information about earlier events.
        /// </summary>
        /// <param name="ignoreFilter">True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean)</param>
        /// <example>timestamp,event,srcGUID,srcName,srcFlags,destGUID,destName,destFlags,...=CombatLogGetCurrentEntry([ignoreFilter])</example>
        internal static string[] CombatLogGetCurrentEntry(string ignoreFilter)
        {
            return Run("CombatLogGetCurrentEntry([{0}])", ignoreFilter); //timestamp,event,srcGUID,srcName,srcFlags,destGUID,destName,destFlags,...
        }

        /// <summary>
        /// Returns the number of available combat log events
        /// </summary>
        /// <param name="ignoreFilter">True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean)</param>
        /// <example>CombatLogGetNumEntries(ignoreFilter)</example>
        internal static string[] CombatLogGetNumEntries(string ignoreFilter)
        {
            return Run("CombatLogGetNumEntries({0})", ignoreFilter);
        }

        /// <summary>
        /// Returns the amount of time combat log entries are stored
        /// </summary>
        /// <example>seconds=CombatLogGetRetentionTime()</example>
        internal static string[] CombatLogGetRetentionTime()
        {
            return Run("CombatLogGetRetentionTime()"); //seconds
        }

        /// <summary>
        /// Removes any filters applied to the combat log
        /// </summary>
        /// <example>CombatLogResetFilter()</example>
        internal static string[] CombatLogResetFilter()
        {
            return Run("CombatLogResetFilter()");
        }

        /// <summary>
        /// Sets the "cursor" position used by other CombatLog functions. Information about the entry at the "cursor" position can be retrieved with CombatLogGetCurrentEntry(). That function then advances the cursor to the next entry, so calling it repeatedly returns all information in the combat log -- this function can be used to "rewind" the combat log to retrieve information about earlier events.The argument index can be positive or negative: positive indices start at the beginning of the combat log (oldest events) and count up to the end (newest events); negative indices start at -1 for the newest event and count backwards to to -CombatLogGetNumEntries(ignoreFilter) for the oldest.
        /// </summary>
        /// <param name="index">Index of a combat log event (between 1 and CombatLogGetNumEntries(ignoreFilter), or between -1 and -CombatLogGetNumEntries(ignoreFilter)) (number)</param>
        /// <param name="ignoreFilter">True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean)</param>
        /// <example>CombatLogSetCurrentEntry(index[,ignoreFilter])</example>
        internal static string[] CombatLogSetCurrentEntry(int index, string ignoreFilter)
        {
            return Run("CombatLogSetCurrentEntry({0}[,{1}])", index, ignoreFilter);
        }

        /// <summary>
        /// Sets the amount of time combat log entries will be stored
        /// </summary>
        /// <param name="seconds">The desired time (number)</param>
        /// <example>CombatLogSetRetentionTime(seconds)</example>
        internal static string[] CombatLogSetRetentionTime(int seconds)
        {
            return Run("CombatLogSetRetentionTime({0})", seconds);
        }

        /// <summary>
        /// Returns whether an entity from the combat log matches a given filter
        /// </summary>
        /// <param name="unitFlags">Source or destination unit flags from a combat log entry (number, bitfield)</param>
        /// <param name="mask">One of the following global constants: (number, bitfield) COMBATLOG_FILTER_EVERYTHING - Any entityCOMBATLOG_FILTER_FRIENDLY_UNITS - Entity is a friendly unitCOMBATLOG_FILTER_HOSTILE_PLAYERS - Entity is a hostile player unitCOMBATLOG_FILTER_HOSTILE_UNITS - Entity is a hostile non-player unitCOMBATLOG_FILTER_ME - Entity is the playerCOMBATLOG_FILTER_MINE - Entity is a non-unit object belonging to the player; e.g. a totemCOMBATLOG_FILTER_MY_PET - Entity is the player's petCOMBATLOG_FILTER_NEUTRAL_UNITS - Entity is a neutral unitCOMBATLOG_FILTER_UNKNOWN_UNITS - Entity is a unit currently unknown to the Wow client</param>
        /// <example>isMatch=CombatLog_Object_IsA(unitFlags,mask)</example>
        internal static string[] CombatLog_Object_IsA(string unitFlags, string mask)
        {
            return Run("CombatLog_Object_IsA({0},{1})", unitFlags, mask); //isMatch
        }

        /// <summary>
        /// Sets the main unit for display of floating combat text. Certain types of floating combat text are only displayed for the "active" unit (normally the player): incoming damage, incoming heals, mana/energy/power gains, low health/mana warnings, etc. This function is used by the default UI to allow the player's vehicle to "stand in" for the player for purposes of combat text; using this function with units other than "player" or "vehicle" has no effect.
        /// </summary>
        /// <param name="unit">Unit to show main combat text for (unitid)</param>
        /// <example>CombatTextSetActiveUnit(unit)</example>
        internal static string[] CombatTextSetActiveUnit(string unit)
        {
            return Run("CombatTextSetActiveUnit({0})", unit);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorAddPlayer()</example>
        internal static string[] CommentatorAddPlayer()
        {
            return Run("CommentatorAddPlayer()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorEnterInstance()</example>
        internal static string[] CommentatorEnterInstance()
        {
            return Run("CommentatorEnterInstance()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorExitInstance()</example>
        internal static string[] CommentatorExitInstance()
        {
            return Run("CommentatorExitInstance()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorFollowPlayer()</example>
        internal static string[] CommentatorFollowPlayer()
        {
            return Run("CommentatorFollowPlayer()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetCamera()</example>
        internal static string[] CommentatorGetCamera()
        {
            return Run("CommentatorGetCamera()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetCurrentMapID()</example>
        internal static string[] CommentatorGetCurrentMapID()
        {
            return Run("CommentatorGetCurrentMapID()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetInstanceInfo()</example>
        internal static string[] CommentatorGetInstanceInfo()
        {
            return Run("CommentatorGetInstanceInfo()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetMapInfo()</example>
        internal static string[] CommentatorGetMapInfo()
        {
            return Run("CommentatorGetMapInfo()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetMode()</example>
        internal static string[] CommentatorGetMode()
        {
            return Run("CommentatorGetMode()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetNumMaps()</example>
        internal static string[] CommentatorGetNumMaps()
        {
            return Run("CommentatorGetNumMaps()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetNumPlayers()</example>
        internal static string[] CommentatorGetNumPlayers()
        {
            return Run("CommentatorGetNumPlayers()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorGetPlayerInfo()</example>
        internal static string[] CommentatorGetPlayerInfo()
        {
            return Run("CommentatorGetPlayerInfo()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorLookatPlayer()</example>
        internal static string[] CommentatorLookatPlayer()
        {
            return Run("CommentatorLookatPlayer()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorRemovePlayer()</example>
        internal static string[] CommentatorRemovePlayer()
        {
            return Run("CommentatorRemovePlayer()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetBattlemaster()</example>
        internal static string[] CommentatorSetBattlemaster()
        {
            return Run("CommentatorSetBattlemaster()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetCamera()</example>
        internal static string[] CommentatorSetCamera()
        {
            return Run("CommentatorSetCamera()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetCameraCollision()</example>
        internal static string[] CommentatorSetCameraCollision()
        {
            return Run("CommentatorSetCameraCollision()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetMapAndInstanceIndex()</example>
        internal static string[] CommentatorSetMapAndInstanceIndex()
        {
            return Run("CommentatorSetMapAndInstanceIndex()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetMode()</example>
        internal static string[] CommentatorSetMode()
        {
            return Run("CommentatorSetMode()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetMoveSpeed()</example>
        internal static string[] CommentatorSetMoveSpeed()
        {
            return Run("CommentatorSetMoveSpeed()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetPlayerIndex()</example>
        internal static string[] CommentatorSetPlayerIndex()
        {
            return Run("CommentatorSetPlayerIndex()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorSetTargetHeightOffset()</example>
        internal static string[] CommentatorSetTargetHeightOffset()
        {
            return Run("CommentatorSetTargetHeightOffset()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorStartInstance()</example>
        internal static string[] CommentatorStartInstance()
        {
            return Run("CommentatorStartInstance()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorToggleMode()</example>
        internal static string[] CommentatorToggleMode()
        {
            return Run("CommentatorToggleMode()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorUpdateMapInfo()</example>
        internal static string[] CommentatorUpdateMapInfo()
        {
            return Run("CommentatorUpdateMapInfo()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorUpdatePlayerInfo()</example>
        internal static string[] CommentatorUpdatePlayerInfo()
        {
            return Run("CommentatorUpdatePlayerInfo()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorZoomIn()</example>
        internal static string[] CommentatorZoomIn()
        {
            return Run("CommentatorZoomIn()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CommentatorZoomOut()</example>
        internal static string[] CommentatorZoomOut()
        {
            return Run("CommentatorZoomOut()");
        }

        /// <summary>
        /// Reports a chat message as spam. Used in the default UI when right-clicking the name of a player in a chat message and choosing "Report Spam" from the menu.
        /// </summary>
        /// <param name="lineID">Unique identifier of a chat message (11th argument received with the corresponding CHAT_MSG event) (number)</param>
        /// <param name="name">Name of a player to complain about (string)</param>
        /// <param name=text>Specific text to complain about (string)</param>
        /// <example>ComplainChat(lineID)orComplainChat("name"[,text])</example>
        internal static string[] ComplainChat(int lineID, string name, string text)
        {
            return Run("ComplainChat({0})orComplainChat(\"{1}\"[,\"{2}\"])", lineID, name, text);
        }

        /// <summary>
        /// Reports a mail message as spam
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>ComplainInboxItem(mailID)</example>
        internal static string[] ComplainInboxItem(int mailID)
        {
            return Run("ComplainInboxItem({0})", mailID);
        }

        /// <summary>
        /// Begins turning in a quest to a questgiver. Usable following the QUEST_PROGRESS event in which it is determined whether the player can complete the quest.Does not complete the quest turn-in process; after calling this function, the QUEST_COMPLETE event fires as the questgiver presents rewards (or sometimes only closure to the quest narrative); following that event, the GetQuestReward() function finishes the turn-in.
        /// </summary>
        /// <example>CompleteQuest()</example>
        internal static string[] CompleteQuest()
        {
            return Run("CompleteQuest()");
        }

        /// <summary>
        /// Accepts a quest started by another group member. Usable following the QUEST_ACCEPT_CONFIRM event which fires when another member of the player's party or raid starts certain quests (e.g. escort quests).
        /// </summary>
        /// <example>ConfirmAcceptQuest()</example>
        internal static string[] ConfirmAcceptQuest()
        {
            return Run("ConfirmAcceptQuest()");
        }

        /// <summary>
        /// Sets the player's Hearthstone to the current location. Usable in response to the CONFIRM_BINDER event which fires upon speaking to an Innkeeper (or similar NPC) and choosing the Hearthstone option.
        /// </summary>
        /// <example>ConfirmBinder()</example>
        internal static string[] ConfirmBinder()
        {
            return Run("ConfirmBinder()");
        }

        /// <summary>
        /// Confirms using an item, if using the item causes it to become soulbound. Usable in response to the USE_BIND_CONFIRM which fires when the player attempts to use a "Bind on Use" item.
        /// </summary>
        /// <example>ConfirmBindOnUse()</example>
        internal static string[] ConfirmBindOnUse()
        {
            return Run("ConfirmBindOnUse()");
        }

        /// <summary>
        /// Confirms the player's intent regarding an item up for loot rolling. Usable after the CONFIRM_LOOT_ROLL event fires, warning that an item binds on pickup.
        /// </summary>
        /// <param name="id">Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number)</param>
        /// <param name="rollType">Type of roll action to perform (number) 0 - Pass (declines the loot)1 - Roll "need" (wins if highest roll)2 - Roll "greed" (wins if highest roll and no other member rolls "need")</param>
        /// <example>ConfirmLootRoll(id,rollType)</example>
        internal static string[] ConfirmLootRoll(int id, int rollType)
        {
            return Run("ConfirmLootRoll({0},{1})", id, rollType);
        }

        /// <summary>
        /// Confirms picking up an item available as loot. Usable after the LOOT_BIND_CONFIRM event fires, warning that an item binds on pickup.
        /// </summary>
        /// <param name="slot">Index of a loot slot (between 1 and GetNumLootItems()) (number)</param>
        /// <example>ConfirmLootSlot(slot)</example>
        internal static string[] ConfirmLootSlot(int slot)
        {
            return Run("ConfirmLootSlot({0})", slot);
        }

        /// <summary>
        /// Responds to a ready check
        /// </summary>
        /// <param name="ready">True to report as "ready"; false to report as "not ready" (true)</param>
        /// <example>ConfirmReadyCheck(ready)</example>
        internal static string[] ConfirmReadyCheck(string ready)
        {
            return Run("ConfirmReadyCheck({0})", ready);
        }

        /// <summary>
        /// Accepts an offered summons, teleporting the player to the summoner's location. Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.
        /// </summary>
        /// <example>ConfirmSummon()</example>
        internal static string[] ConfirmSummon()
        {
            return Run("ConfirmSummon()");
        }

        /// <summary>
        /// Resets the player's talents. Usable following the CONFIRM_TALENT_WIPE event which fires when the player speaks to an trainer NPC and chooses to reset his or her talents.
        /// </summary>
        /// <example>ConfirmTalentWipe()</example>
        internal static string[] ConfirmTalentWipe()
        {
            return Run("ConfirmTalentWipe()");
        }

        /// <summary>
        /// Prints text to the debug console. The debugging console can be activated by launching Wow from the command line with the "-console" option, then pressing the "`" (backtick/tilde) key ingame. Its usefulness outside of Blizzard internal static environments is limited.
        /// </summary>
        /// <example>ConsoleAddMessage()</example>
        internal static string[] ConsoleAddMessage()
        {
            return Run("ConsoleAddMessage()");
        }

        /// <summary>
        /// Runs a console command. Used by the default UI to handle /console commands.
        /// </summary>
        /// <param name="console_command">The console command to run (string)</param>
        /// <example>ConsoleExec("console_command")</example>
        internal static string[] ConsoleExec(string console_command)
        {
            return Run("ConsoleExec(\"{0}\")", console_command);
        }

        /// <summary>
        /// Returns the inventoryID corresponding to a given containerID
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <example>inventoryID=ContainerIDToInventoryID(container)</example>
        internal static string[] ContainerIDToInventoryID(string container)
        {
            return Run("ContainerIDToInventoryID({0})", container); //inventoryID
        }

        /// <summary>
        /// Sells an item purchased with alternate currency back to a vendor. Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase.
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>ContainerRefundItemPurchase(container,slot)</example>
        internal static string[] ContainerRefundItemPurchase(string container, string slot)
        {
            return Run("ContainerRefundItemPurchase({0},{1})", container, slot);
        }

        /// <summary>
        /// Converts a party to a raid. Only has effect if the player is in a party and the party leader.
        /// </summary>
        /// <example>ConvertToRaid()</example>
        internal static string[] ConvertToRaid()
        {
            return Run("ConvertToRaid()");
        }

        /// <summary>
        /// Creates a new Font object
        /// </summary>
        /// <param name="name">Name to assign to the newly created object; used both as the name of the object (retrievable with Font:GetName()) and as a global variable referencing the object (unless another global by that name already exists) (string)</param>
        /// <example>fontObject=CreateFont("name")</example>
        internal static string[] CreateFont(string name)
        {
            return Run("CreateFont(\"{0}\")", name); //fontObject
        }

        /// <summary>
        /// Creates a new Frame object
        /// </summary>
        /// <param name="frameType">Type of frame to create; see the widget documentation for details (string)</param>
        /// <param name="name">Name to assign to the newly created object; used both as the name of the object (retrievable via the GetName method) and as a global variable referencing the object, unless another global by that name already exists (string)</param>
        /// <param name="parent">Reference to another frame to be the new frame's parent (table)</param>
        /// <param name="template">Name of a template to be used in creating the frame; if creating a frame from multiple templates, a comma-separated list of names (string)</param>
        /// <example>frame=CreateFrame("frameType"[,"name"[,parent[,"template"]]])</example>
        internal static string[] CreateFrame(string frameType, string name, string parent, string template)
        {
            return Run("CreateFrame(\"{0}\"[,\"{1}\"[,{2}[,\"{3}\"]]])", frameType, name, parent, template); //frame
        }

        /// <summary>
        /// Creates a new macro
        /// </summary>
        /// <param name="name">Name for the new macro (up to 16 characters); need not be unique, though duplicate names can cause issues for other Macro API functions (string)</param>
        /// <param name="icon">Index of a macro icon (between 1 and GetNumMacroIcons()) (number)</param>
        /// <param name="body">Body of the macro (up to 255 characters) (string)</param>
        /// <param name="perCharacter">1 if the macro should be stored as a character-specific macro; otherwise nil (1nil)</param>
        /// <example>index=CreateMacro("name",icon,"body",perCharacter)</example>
        internal static string[] CreateMacro(string name, int icon, string body, string perCharacter)
        {
            return Run("CreateMacro(\"{0}\",{1},\"{2}\",{3})", name, icon, body, perCharacter); //index
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CreateMiniWorldMapArrowFrame()</example>
        internal static string[] CreateMiniWorldMapArrowFrame()
        {
            return Run("CreateMiniWorldMapArrowFrame()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>CreateWorldMapArrowFrame()</example>
        internal static string[] CreateWorldMapArrowFrame()
        {
            return Run("CreateWorldMapArrowFrame()");
        }

        /// <summary>
        /// Returns whether the item on the cursor can be equipped in an inventory slot. Returns nil if the cursor is empty or contains something other than an item.
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>canBePlaced=CursorCanGoInSlot(slot)</example>
        internal static string[] CursorCanGoInSlot(string slot)
        {
            return Run("CursorCanGoInSlot({0})", slot); //canBePlaced
        }

        /// <summary>
        /// Returns whether an item is on the cursor. See GetCursorInfo() for more detailed information.
        /// </summary>
        /// <example>hasItem=CursorHasItem()</example>
        internal static string[] CursorHasItem()
        {
            return Run("CursorHasItem()"); //hasItem
        }

        /// <summary>
        /// Returns whether a macro is on the cursor. See GetCursorInfo() for more detailed information.
        /// </summary>
        /// <example>hasMacro=CursorHasMacro()</example>
        internal static string[] CursorHasMacro()
        {
            return Run("CursorHasMacro()"); //hasMacro
        }

        /// <summary>
        /// Returns whether an amount of the player's money is on the cursor. Returns nil if the cursor holds guild bank money. See GetCursorInfo() for more detailed information.
        /// </summary>
        /// <example>hasMoney=CursorHasMoney()</example>
        internal static string[] CursorHasMoney()
        {
            return Run("CursorHasMoney()"); //hasMoney
        }

        /// <summary>
        /// Returns whether a spell is on the cursor. See GetCursorInfo() for more detailed information.
        /// </summary>
        /// <example>hasSpell=CursorHasSpell()</example>
        internal static string[] CursorHasSpell()
        {
            return Run("CursorHasSpell()"); //hasSpell
        }

        /// <summary>
        /// Returns a formatted date/time string for a date (or the current date). Alias to the standard library function os.date.
        /// </summary>
        /// <param name="format">A string describing the formatting of time values (as in the ANSI C strftime()function), or *t to return the time as a table; optionally preceded by ! for Coordinated Universal Time instead of the local time zone; omitted for a date printed in the default format (string)</param>
        /// <param name="time">Time value to be formatted (see time() for description); if omitted, uses the current time (number)</param>
        /// <example>dateValue=date(["format"[,time]])</example>
        internal static string[] date(string format, int time)
        {
            return Run("date([\"{0}\"[,{1}]])", format, time); //dateValue
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>debugbreak()</example>
        internal static string[] debugbreak()
        {
            return Run("debugbreak()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>debugdump()</example>
        internal static string[] debugdump()
        {
            return Run("debugdump()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>debuginfo()</example>
        internal static string[] debuginfo()
        {
            return Run("debuginfo()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>debugload()</example>
        internal static string[] debugload()
        {
            return Run("debugload()");
        }

        /// <summary>
        /// Returns information about the local variables at a given stack depth
        /// </summary>
        /// <param name="stackLevel">The stack level to query (number)</param>
        /// <example>localsInfo=debuglocals(stackLevel)</example>
        internal static string[] debuglocals(int stackLevel)
        {
            return Run("debuglocals({0})", stackLevel); //localsInfo
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>debugprint()</example>
        internal static string[] debugprint()
        {
            return Run("debugprint()");
        }

        /// <summary>
        /// Starts/resets the high resolution profiling timer. Subsequent calls to debugprofilestop() will return the current value of the timer.
        /// </summary>
        /// <example>debugprofilestart()</example>
        internal static string[] debugprofilestart()
        {
            return Run("debugprofilestart()");
        }

        /// <summary>
        /// Returns the value of the profiling timer
        /// </summary>
        /// <example>time=debugprofilestop()</example>
        internal static string[] debugprofilestop()
        {
            return Run("debugprofilestop()"); //time
        }

        /// <summary>
        /// Returns information about the current function call stack
        /// </summary>
        /// <param name="start">Stack level at which to begin listing functions; 0 is the debugstack() function itself, 1 is the function that called debugstack(), 2 is the function that called function 1, etc. Defaults to 1 if omitted (number)</param>
        /// <param name="countTop">Maximum number of functions to output at the top of the stack trace (number)</param>
        /// <param name="countBot">Maximum number of functions to output at the bottom of the stack trace, (number)</param>
        /// <example>debugstring=debugstack(start,countTop,countBot)</example>
        internal static string[] debugstack(int start, int countTop, int countBot)
        {
            return Run("debugstack({0},{1},{2})", start, countTop, countBot); //debugstring
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>debugtimestamp()</example>
        internal static string[] debugtimestamp()
        {
            return Run("debugtimestamp()");
        }

        /// <summary>
        /// Declines an arena team invitation
        /// </summary>
        /// <example>DeclineArenaTeam()</example>
        internal static string[] DeclineArenaTeam()
        {
            return Run("DeclineArenaTeam()");
        }

        /// <summary>
        /// Declines an invitation to join a party or raid. Usable in response to the PARTY_INVITE_REQUEST event which fires when the player is invited to join a group.
        /// </summary>
        /// <example>DeclineGroup()</example>
        internal static string[] DeclineGroup()
        {
            return Run("DeclineGroup()");
        }

        /// <summary>
        /// Declines an offered guild invitation. Usable in response to the GUILD_INVITE_REQUEST event which fires when the player is invited to join a guild.
        /// </summary>
        /// <example>DeclineGuild()</example>
        internal static string[] DeclineGuild()
        {
            return Run("DeclineGuild()");
        }

        /// <summary>
        /// Declines an invitation to a chat channel. Usable in response to the CHANNEL_INVITE_REQUEST event which fires when the player is invited to join a chat channel.
        /// </summary>
        /// <param name="channel">Name of a chat channel (string)</param>
        /// <example>DeclineInvite("channel")</example>
        internal static string[] DeclineInvite(string channel)
        {
            return Run("DeclineInvite(\"{0}\")", channel);
        }

        /// <summary>
        /// Refuses a level offered by the player's Recruit-a-Friend partner
        /// </summary>
        /// <example>DeclineLevelGrant()</example>
        internal static string[] DeclineLevelGrant()
        {
            return Run("DeclineLevelGrant()");
        }

        /// <summary>
        /// Returns suggested declensions for a name. In the Russian language, nouns (including proper names) take different form based on their usage in a sentence. When the player enters the base name for a character or pet, the game suggests one or more sets of variations for the five additional cases; the player is asked to choose from among the suggestions and/or enter their own. (The set of declensions ultimately chosen/entered by the player are only used internally and not available to addons.)Has no effect in non-Russian-localized clients.
        /// </summary>
        /// <param name="name">Nominative form of the player's or pet's name (string)</param>
        /// <param name="gender">Gender for the returned names (for declensions of the player's name, should match the player's gender; for the pet's name, should be neuter) (number) 1or nil - Neuter2 - Male3 - Female</param>
        /// <param name="declensionSet">Index of a set of suggested declensions (between 1 and GetNumDeclensionSets(name,gender). Lower indices correspond to "better" suggestions for the given name. (number)</param>
        /// <example>genitive,dative,accusative,instrumental,prepositional=DeclineName("name",gender,declensionSet)</example>
        internal static string[] DeclineName(string name, int gender, int declensionSet)
        {
            return Run("DeclineName(\"{0}\",{1},{2})", name, gender, declensionSet); //genitive,dative,accusative,instrumental,prepositional
        }

        /// <summary>
        /// Declines a quest.. Usable following the QUEST_DETAIL event in which the questgiver presents the player with the details of a quest and the option to accept or decline.
        /// </summary>
        /// <example>DeclineQuest()</example>
        internal static string[] DeclineQuest()
        {
            return Run("DeclineQuest()");
        }

        /// <summary>
        /// Declines an offered resurrection spell. Usable following the RESURRECT_REQUEST event which fires when the player is offered resurrection by another unit.
        /// </summary>
        /// <example>DeclineResurrect()</example>
        internal static string[] DeclineResurrect()
        {
            return Run("DeclineResurrect()");
        }

        /// <summary>
        /// Converts an angle measurement in radians to degrees. Alias for the standard library function math.deg.
        /// </summary>
        /// <param name="radians">An angle specified in radians (number)</param>
        /// <example>degrees=deg(radians)</example>
        internal static string[] deg(int radians)
        {
            return Run("deg({0})", radians); //degrees
        }

        /// <summary>
        /// Destroys the item on the cursor. Used in the default UI when accepting the confirmation prompt that appears when dragging and dropping an item to an empty area of the screen.
        /// </summary>
        /// <example>DeleteCursorItem()</example>
        internal static string[] DeleteCursorItem()
        {
            return Run("DeleteCursorItem()");
        }

        /// <summary>
        /// Deletes an equipment set
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <example>DeleteEquipmentSet("name")</example>
        internal static string[] DeleteEquipmentSet(string name)
        {
            return Run("DeleteEquipmentSet(\"{0}\")", name);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>DeleteFile()</example>
        internal static string[] DeleteFile()
        {
            return Run("DeleteFile()");
        }

        /// <summary>
        /// Abandons the currently pending GM ticket
        /// </summary>
        /// <example>DeleteGMTicket()</example>
        internal static string[] DeleteGMTicket()
        {
            return Run("DeleteGMTicket()");
        }

        /// <summary>
        /// Deletes a message from the player's inbox
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>DeleteInboxItem(mailID)</example>
        internal static string[] DeleteInboxItem(int mailID)
        {
            return Run("DeleteInboxItem({0})", mailID);
        }

        /// <summary>
        /// Deletes a macro
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>DeleteMacro(index)orDeleteMacro("name")</example>
        internal static string[] DeleteMacro(string index, string name)
        {
            return Run("DeleteMacro({0})orDeleteMacro(\"{1}\")", index, name);
        }

        /// <summary>
        /// Removes a player from the ignore list
        /// </summary>
        /// <param name="name">Name of a character to remove from the ignore list (string)</param>
        /// <example>DelIgnore("name")</example>
        internal static string[] DelIgnore(string name)
        {
            return Run("DelIgnore(\"{0}\")", name);
        }

        /// <summary>
        /// Removes a character from the muted list for voice chat. The Muted list acts for voice chat as the Ignore list does for text chat: muted characters will never be heard regardless of which voice channels they join the player in.
        /// </summary>
        /// <param name="name">Name of a character to remove from the mute list (string)</param>
        /// <example>DelMute("name")</example>
        internal static string[] DelMute(string name)
        {
            return Run("DelMute(\"{0}\")", name);
        }

        /// <summary>
        /// Demotes the given player from raid assistant status
        /// </summary>
        /// <param name="unit">A unit in the raid (string, unitID)</param>
        /// <param name="name">Name of a unit in the raid (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>
        /// <example>DemoteAssistant("unit")orDemoteAssistant("name"[,exactMatch])</example>
        internal static string[] DemoteAssistant(string unit, string name, string exactMatch)
        {
            return Run("DemoteAssistant(\"{0}\")orDemoteAssistant(\"{1}\"[,{2}])", unit, name, exactMatch);
        }

        /// <summary>
        /// Deposits money into the guild bank
        /// </summary>
        /// <param name="money">Amount of money to deposit (in copper) (number)</param>
        /// <example>DepositGuildBankMoney(money)</example>
        internal static string[] DepositGuildBankMoney(int money)
        {
            return Run("DepositGuildBankMoney({0})", money);
        }

        /// <summary>
        /// Stops movement initiated by SitStandOrDescendStart. Used by the SITORSTAND binding, which also controls descent when swimming or flying. Has no meaningful effect if called while sitting/standing.
        /// </summary>
        /// <example>DescendStop()</example>
        internal static string[] DescendStop()
        {
            return Run("DescendStop()");
        }

        /// <summary>
        /// Destroys a specific totem (or ghoul). Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).
        /// </summary>
        /// <param name="slot">Which totem to destroy (number) 1 - Fire (or Death Knight's ghoul)2 - Earth3 - Water4 - Air</param>
        /// <example>DestroyTotem(slot)</example>
        internal static string[] DestroyTotem(int slot)
        {
            return Run("DestroyTotem({0})", slot);
        }

        /// <summary>
        /// Detects the presence of a "Wow" compatible multi-button mouse. This function is used by the default user interface to enable or disable the configuration option for a many buttoned Wow mouse.  If the mouse is not found, the Wow_MOUSE_NOT_FOUND event will fire.
        /// </summary>
        /// <example>DetectWowMouse()</example>
        internal static string[] DetectWowMouse()
        {
            return Run("DetectWowMouse()");
        }

        /// <summary>
        /// Returns the number of seconds between two time values. Alias for the standard library function os.difftime.
        /// </summary>
        /// <param name="time2">A time value (see time() for description) (number)</param>
        /// <param name="time1">A time value (see time() for description) (number)</param>
        /// <example>seconds=difftime(time2,time1)</example>
        internal static string[] difftime(int time2, int time1)
        {
            return Run("difftime({0},{1})", time2, time1); //seconds
        }

        /// <summary>
        /// Marks an addon as disabled. The addon will remain active until the player logs out and back in or reloads the UI (see ReloadUI()).  Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>DisableAddOn("name")orDisableAddOn(index)</example>
        internal static string[] DisableAddOn(string name, int index)
        {
            return Run("DisableAddOn(\"{0}\")orDisableAddOn({1})", name, index);
        }

        /// <summary>
        /// Marks all addons as disabled. Addons will remain active until the player logs out and back in or reloads the UI (see ReloadUI()).Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.
        /// </summary>
        /// <example>DisableAllAddOns()</example>
        internal static string[] DisableAllAddOns()
        {
            return Run("DisableAllAddOns()");
        }

        /// <summary>
        /// Disables automatic casting of a pet spell
        /// </summary>
        /// <param name="spell">The name of a pet spell (string)</param>
        /// <example>DisableSpellAutocast("spell")</example>
        internal static string[] DisableSpellAutocast(string spell)
        {
            return Run("DisableSpellAutocast(\"{0}\")", spell);
        }

        /// <summary>
        /// Unsummons the current non-combat pet or mount
        /// </summary>
        /// <param name="type">The type of companion (string) CRITTER - Non-combat petMOUNT - Mount</param>
        /// <example>DismissCompanion("type")</example>
        internal static string[] DismissCompanion(string type)
        {
            return Run("DismissCompanion(\"{0}\")", type);
        }

        /// <summary>
        /// Dismounts from the player's summoned mount
        /// </summary>
        /// <example>Dismount()</example>
        internal static string[] Dismount()
        {
            return Run("Dismount()");
        }

        /// <summary>
        /// Requests information from the server about a channel's owner. Fires the CHANNEL_OWNER event indicating the name of the channel owner.
        /// </summary>
        /// <param name="channel">Name of a channel (string)</param>
        /// <param name="channelIndex">Index of a channel (number)</param>
        /// <example>DisplayChannelOwner("channel")orDisplayChannelOwner(channelIndex)</example>
        internal static string[] DisplayChannelOwner(string channel, int channelIndex)
        {
            return Run("DisplayChannelOwner(\"{0}\")orDisplayChannelOwner({0}Index)", channel, channelIndex);
        }

        /// <summary>
        /// Disables voice in a channel specified by its position in the channel list display
        /// </summary>
        /// <param name="index">Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <example>DisplayChannelVoiceOff(index)</example>
        internal static string[] DisplayChannelVoiceOff(int index)
        {
            return Run("DisplayChannelVoiceOff({0})", index);
        }

        /// <summary>
        /// Enables voice in a channel specified by its position in the channel list display
        /// </summary>
        /// <param name="index">Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <example>DisplayChannelVoiceOn(index)</example>
        internal static string[] DisplayChannelVoiceOn(int index)
        {
            return Run("DisplayChannelVoiceOn({0})", index);
        }

        /// <summary>
        /// Performs a preset emote (with optional target). The list of built-in emote tokens can be found in global variables whose names follow the format "EMOTE"..num.."_TOKEN", where num is a number between 1 and MAXEMOTEINDEX (a variable local to ChatFrame.lua.)For custom emotes (as performed using the /emote or /me commands in the default UI), see SendChatMessage().
        /// </summary>
        /// <param name="emote">Non-localized token identifying an emote to perform (string)</param>
        /// <param name="target">Name of a unit at whom to direct the emote (string)</param>
        /// <example>DoEmote("emote"[,"target"])</example>
        internal static string[] DoEmote(string emote, string target)
        {
            return Run("DoEmote(\"{0}\"[,\"{1}\"])", emote, target);
        }

        /// <summary>
        /// Initiates a ready check. Only has effect if the player is the party/raid leader or a raid assistant.
        /// </summary>
        /// <example>DoReadyCheck()</example>
        internal static string[] DoReadyCheck()
        {
            return Run("DoReadyCheck()");
        }

        /// <summary>
        /// Performs a trade skill recipe
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <param name="repeat">Number of times to repeat the recipe (number)</param>
        /// <example>DoTradeSkill(index[,repeat])</example>
        internal static string[] DoTradeSkill(int index, int repeat)
        {
            return Run("DoTradeSkill({0},{1})", index, repeat);
        }

        /// <summary>
        /// Restores game settings from a backup stored on the server. This function only works if server-synchronized settings are enabled.  This is controlled by the synchronizeSettings CVar.
        /// </summary>
        /// <example>DownloadSettings()</example>
        internal static string[] DownloadSettings()
        {
            return Run("DownloadSettings()");
        }

        /// <summary>
        /// Drops any money currently on the cursor, returning it to where it was taken from
        /// </summary>
        /// <example>DropCursorMoney()</example>
        internal static string[] DropCursorMoney()
        {
            return Run("DropCursorMoney()");
        }

        /// <summary>
        /// "Gives" the item on the cursor to another unit; results vary by context. If the unit is a friendly player, adds the item to the trade window (opening it if necessary, and placing it in the first available trade slot or the "will not be traded" slot depending on whether the item is soulbound). If the unit is the player's pet and the player is a Hunter, attempts to feed the item to the pet (since this casts the Feed Pet spell, in this case this action is protected and can only be called by the Blizzard user interface). For other units, nothing happens and the item remains on the cursor.
        /// </summary>
        /// <param name="unit">A unit to receive the item (string, unitID)</param>
        /// <param name="name">Name of a unit to receive the item; only valid for player, pet, and party/raid members (string)</param>
        /// <example>DropItemOnUnit("unit")orDropItemOnUnit("name")</example>
        internal static string[] DropItemOnUnit(string unit, string name)
        {
            return Run("DropItemOnUnit(\"{0}\")orDropItemOnUnit(\"{1}\")", unit, name);
        }

        /// <summary>
        /// Changes the name, icon, and/or body of a macro
        /// </summary>
        /// <param name="index">Existing index of the macro (number, macroID)</param>
        /// <param name="name">New name for the macro (up to 16 characters); nil to keep an existing name (string)</param>
        /// <param name="icon">Index of a macro icon (between 1 and GetNumMacroIcons(); nil to keep an existing icon (number)</param>
        /// <param name="body">Body of the macro (up to 255 characters); nil to keep the existing body (string)</param>
        /// <example>newIndex=EditMacro(index,"name",icon,"body")</example>
        internal static string[] EditMacro(string index, string name, int icon, string body)
        {
            return Run("EditMacro({0},\"{1}\",{2},\"{3}\")", index, name, icon, body); //newIndex
        }

        /// <summary>
        /// Ejects the occupant of a seat in the player's vehicle
        /// </summary>
        /// <param name="seat">Index of a seat in the player's vehicle (number)</param>
        /// <example>EjectPassengerFromSeat(seat)</example>
        internal static string[] EjectPassengerFromSeat(int seat)
        {
            return Run("EjectPassengerFromSeat({0})", seat);
        }

        /// <summary>
        /// Marks an addon as enabled. The addon will remain inactive until the player logs out and back in or reloads the UI (see ReloadUI()).Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.
        /// </summary>
        /// <param name="index">The index of the addon to be enabled (number)</param>
        /// <param name="name">The name of the addon to be enabled (string)</param>
        /// <example>EnableAddOn(index)orEnableAddOn("name")</example>
        internal static string[] EnableAddOn(int index, string name)
        {
            return Run("EnableAddOn({0})orEnableAddOn(\"{1}\")", index, name);
        }

        /// <summary>
        /// Marks all addons as enabled. Addons will remain inactive until the player logs out and back in or reloads the UI (see ReloadUI()).Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.
        /// </summary>
        /// <example>EnableAllAddOns()</example>
        internal static string[] EnableAllAddOns()
        {
            return Run("EnableAllAddOns()");
        }

        /// <summary>
        /// Enables automatic casting of a pet spell
        /// </summary>
        /// <param name="spell">Name of a pet spell (string)</param>
        /// <example>EnableSpellAutocast("spell")</example>
        internal static string[] EnableSpellAutocast(string spell)
        {
            return Run("EnableSpellAutocast(\"{0}\")", spell);
        }

        /// <summary>
        /// Confirms taking an action which renders a looted Bind on Pickup item non-tradeable. A Bind on Pickup item looted by the player can be traded to other characters who were originally eligible to loot it, but only within a limited time after looting. This period can be ended prematurely if the player attempts certain actions (such as enchanting the item).
        /// </summary>
        /// <param name="id">Number identifying the item (as provided by the END_BOUND_TRADEABLE event) (number)</param>
        /// <example>EndBoundTradeable(id)</example>
        internal static string[] EndBoundTradeable(int id)
        {
            return Run("EndBoundTradeable({0})", id);
        }

        /// <summary>
        /// Confirms taking an action which renders a purchased item non-refundable. Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase. This period can be ended prematurely if the player attempts certain actions (such as enchanting the item).
        /// </summary>
        /// <param name="id">Number identifying the item (as provided by the END_REFUND event) (number)</param>
        /// <example>EndRefund(id)</example>
        internal static string[] EndRefund(int id)
        {
            return Run("EndRefund({0})", id);
        }

        /// <summary>
        /// Returns the next frame following the frame passed, or nil if no more frames exist
        /// </summary>
        /// <param name="currentFrame">The current frame to get the next frame, or nil to get the first frame (table)</param>
        /// <example>nextFrame=EnumerateFrames([currentFrame])</example>
        internal static string[] EnumerateFrames(string currentFrame)
        {
            return Run("EnumerateFrames([{0}])", currentFrame); //nextFrame
        }

        /// <summary>
        /// Returns the available server channel names
        /// </summary>
        /// <example>...=EnumerateServerChannels()</example>
        internal static string[] EnumerateServerChannels()
        {
            return Run("EnumerateServerChannels()"); //...
        }

        /// <summary>
        /// Puts the item on the cursor into a specific equipment slot. If the item on the cursor can be equipped but does not fit in the given slot, the item is automatically equipped in the first available slot in which it fits (as with AutoEquipCursorItem()). Thus, this function is most useful when dealing with items which can be equipped in more than one slot: containers, rings, trinkets, and (for dual-wielding characters) one-handed weapons.Causes an error message (UI_ERROR_MESSAGE) if the item on the cursor cannot be equipped. Does nothing if the cursor does not contain an item.
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>EquipCursorItem(slot)</example>
        internal static string[] EquipCursorItem(string slot)
        {
            return Run("EquipCursorItem({0})", slot);
        }

        /// <summary>
        /// Attempts to equip an arbitrary item. The item is automatically equipped in the first available slot in which it fits. To equip an item in a specific slot, see EquipCursorItem().Causes an error message (UI_ERROR_MESSAGE) if the specified item cannot be equipped. Does nothing if the specified item does not exist or is not in the player's possession.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>EquipItemByName(itemID)orEquipItemByName("itemName")orEquipItemByName("itemLink")</example>
        internal static string[] EquipItemByName(int itemID, string itemName, string itemLink)
        {
            return Run("EquipItemByName({0})orEquipItemByName(\"{1}\")orEquipItemByName(\"{2}\")", itemID, itemName, itemLink);
        }

        /// <summary>
        /// Clears the list of equipment slots to be ignored when saving sets
        /// </summary>
        /// <example>EquipmentManagerClearIgnoredSlotsForSave()</example>
        internal static string[] EquipmentManagerClearIgnoredSlotsForSave()
        {
            return Run("EquipmentManagerClearIgnoredSlotsForSave()");
        }

        /// <summary>
        /// Adds an equipment slot to the list of those ignored when saving sets. Creating or saving a set with SaveEquipmentSet() will ignore any slots on the list, allowing the player to create sets which only switch certain items (e.g. to equip a fishing pole and hat while leaving non-fishing-related items equipped).
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>EquipmentManagerIgnoreSlotForSave(slot)</example>
        internal static string[] EquipmentManagerIgnoreSlotForSave(string slot)
        {
            return Run("EquipmentManagerIgnoreSlotForSave({0})", slot);
        }

        /// <summary>
        /// Returns whether the contents of an equipment slot will be included when saving sets
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>isIgnored=EquipmentManagerIsSlotIgnoredForSave(slot)</example>
        internal static string[] EquipmentManagerIsSlotIgnoredForSave(string slot)
        {
            return Run("EquipmentManagerIsSlotIgnoredForSave({0})", slot); //isIgnored
        }

        /// <summary>
        /// Removes an equipment slot from the list of those ignored when saving sets. Creating or saving a set with SaveEquipmentSet() will ignore any slots on the list, allowing the player to create sets which only switch certain items (e.g. to equip a fishing pole and hat while leaving non-fishing-related items equipped).
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>EquipmentManagerUnignoreSlotForSave(slot)</example>
        internal static string[] EquipmentManagerUnignoreSlotForSave(string slot)
        {
            return Run("EquipmentManagerUnignoreSlotForSave({0})", slot);
        }

        /// <summary>
        /// Unpacks an inventory location bitfield into usable components
        /// </summary>
        /// <param name="location">A bit field that represents an item's location in the player's possession.  This bit field can be obtained using the GetInventoryItemsForSlot function. (number)</param>
        /// <example>player,bank,bags,locationorslot,bag=EquipmentManager_UnpackLocation(location)</example>
        internal static string[] EquipmentManager_UnpackLocation(int location)
        {
            return Run("EquipmentManager_UnpackLocation({0})", location); //player,bank,bags,{0}orslot,bag
        }

        /// <summary>
        /// Returns whether an equipment set contains locked items. Locked items are those in a transient state -- e.g. on the cursor for moving within the player's bags, placed in the Send Mail or Trade UIs, etc. -- for which the default UI displays the item's icon as grayed out. A set cannot be equipped if it contains locked items.
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <example>isLocked=EquipmentSetContainsLockedItems("name")</example>
        internal static string[] EquipmentSetContainsLockedItems(string name)
        {
            return Run("EquipmentSetContainsLockedItems(\"{0}\")", name); //isLocked
        }

        /// <summary>
        /// Confirms equipping a bind-on-equip item. Usable following the EQUIP_BIND_CONFIRM or AUTOEQUIP_BIND_CONFIRM, which fires when the player attempts to equip a bind-on-equip item
        /// </summary>
        /// <param name="index">Index provided by the EQUIP_BIND_CONFIRM or AUTOEQUIP_BIND_CONFIRM event; currently always 0 (number)</param>
        /// <example>EquipPendingItem(index)</example>
        internal static string[] EquipPendingItem(int index)
        {
            return Run("EquipPendingItem({0})", index);
        }

        /// <summary>
        /// Causes a Lua error message
        /// </summary>
        /// <param name="message">An error message to be displayed (string)</param>
        /// <param name="level">Level in the function stack at which the error message begins providing function information; e.g. 1 (the default, if omitted) to start at the position where error() was called, 2 to start at the function which called error(), 3 to start at the function which called that function, etc. (number)</param>
        /// <example>error("message"[,level])</example>
        internal static string[] error(string message, int level)
        {
            return Run("error(\"{0}\"[,{1}])", message, level);
        }

        /// <summary>
        /// Returns the value of the exponential function for a number. Alias for the standard library function math.exp.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>exp=exp(x)</example>
        internal static string[] exp(int x)
        {
            return Run("e{0}p({0})", x); //e{0}p
        }

        /// <summary>
        /// Expands all headers and sub-headers in the Reputation UI. Expands headers for both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.).
        /// </summary>
        /// <example>ExpandAllFactionHeaders()</example>
        internal static string[] ExpandAllFactionHeaders()
        {
            return Run("ExpandAllFactionHeaders()");
        }

        /// <summary>
        /// Expands a group header in the chat channel listing
        /// </summary>
        /// <param name="index">Index of a header in the display channel list (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <example>ExpandChannelHeader(index)</example>
        internal static string[] ExpandChannelHeader(int index)
        {
            return Run("ExpandChannelHeader({0})", index);
        }

        /// <summary>
        /// Expands or collapses a list header in the Currency UI
        /// </summary>
        /// <param name="index">Index of a header in the currency list (between 1 and GetCurrencyListSize()) (number)</param>
        /// <param name="shouldExpand">1 to expand the header, showing its contents; 0 to collapse the header, hiding its contents (number)</param>
        /// <example>ExpandCurrencyList(index,shouldExpand)</example>
        internal static string[] ExpandCurrencyList(int index, int shouldExpand)
        {
            return Run("ExpandCurrencyList({0},{1})", index, shouldExpand);
        }

        /// <summary>
        /// Expands a given faction header or sub-header in the Reputation UI. Faction headers include both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.). 
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>ExpandFactionHeader(index)</example>
        internal static string[] ExpandFactionHeader(int index)
        {
            return Run("ExpandFactionHeader({0})", index);
        }

        /// <summary>
        /// Expands a quest header in the quest log
        /// </summary>
        /// <param name="questIndex">Index of a header in the quest log (between 1 and GetNumQuestLogEntries()), or 0 to expand all headers (number)</param>
        /// <example>ExpandQuestHeader(questIndex)</example>
        internal static string[] ExpandQuestHeader(int questIndex)
        {
            return Run("ExpandQuestHeader({0})", questIndex);
        }

        /// <summary>
        /// Expands a group header in the Skills UI
        /// </summary>
        /// <param name="index">Index of an entry in the skills list (between 1 and GetNumSkillLines()) (number)</param>
        /// <example>ExpandSkillHeader(index)</example>
        internal static string[] ExpandSkillHeader(int index)
        {
            return Run("ExpandSkillHeader({0})", index);
        }

        /// <summary>
        /// Expands a group header in the trade skill listing. Causes an error if index does not refer to a header.
        /// </summary>
        /// <param name="index">Index of a header in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>ExpandTradeSkillSubClass(index)</example>
        internal static string[] ExpandTradeSkillSubClass(int index)
        {
            return Run("ExpandTradeSkillSubClass({0})", index);
        }

        /// <summary>
        /// Expands a group header in the trainer service listing. Causes a Lua error if the entry is not a header (see GetTrainerServiceInfo()).
        /// </summary>
        /// <param name="index">Index of a header in the trainer service listing (between 1 and GetNumTrainerServices()), or 0 to expand all headers (number)</param>
        /// <example>ExpandTrainerSkillLine(index)</example>
        internal static string[] ExpandTrainerSkillLine(int index)
        {
            return Run("ExpandTrainerSkillLine({0})", index);
        }

        /// <summary>
        /// Toggles "at war" status for a faction. "At War" status determines whether members of a faction can be attacked. Normal interactions (as with merchants, questgivers, etc.) are not available if the player is "at war" with an NPC's faction.This function does nothing for faction headers or factions for which changing "at war" status is not currently allowed; i.e., factions for which the eighth (canToggleAtWar) return of GetFactionInfo is false or nil.
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>FactionToggleAtWar(index)</example>
        internal static string[] FactionToggleAtWar(int index)
        {
            return Run("FactionToggleAtWar({0})", index);
        }

        /// <summary>
        /// Fills a table with localized class names keyed by non-localized class tokens. Note that while localized class names have no gender in English, other locales have different names for each gender.
        /// </summary>
        /// <param name="table">An empty table to be filled (number)</param>
        /// <param name="female">True to fill the table with female class names; false or omitted to fill it with male class names (boolean)</param>
        /// <example>FillLocalizedClassList(table[,female])</example>
        internal static string[] FillLocalizedClassList(int table, string female)
        {
            return Run("FillLocalizedClassList({0}[,{1}])", table, female);
        }

        /// <summary>
        /// Marks a contextual tutorial as displayed so it doesn't appear again
        /// </summary>
        /// <param name="tutorial">Numeric identifier for the tutorial step (as string); supplied in the TUTORIAL_TRIGGER event (string)</param>
        /// <example>FlagTutorial("tutorial")</example>
        internal static string[] FlagTutorial(string tutorial)
        {
            return Run("FlagTutorial(\"{0}\")", tutorial);
        }

        /// <summary>
        /// Rotates the camera around the player
        /// </summary>
        /// <param name="degrees">The number of degrees to rotate; positive for counter-clockwise, negative for clockwise. (number)</param>
        /// <example>FlipCameraYaw(degrees)</example>
        internal static string[] FlipCameraYaw(int degrees)
        {
            return Run("FlipCameraYaw({0})", degrees);
        }

        /// <summary>
        /// Returns the largest integer smaller than or equal to a number. Alias for the standard library function math.floor.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>floor=floor(x)</example>
        internal static string[] floor(int x)
        {
            return Run("floor({0})", x); //floor
        }

        /// <summary>
        /// Changes the focus unitID to refer to a new unit
        /// </summary>
        /// <param name="unit">A unit to focus (string, unitID)</param>
        /// <param name="name">The name of a unit to focus; only valid for player, pet, and party/raid members (string)</param>
        /// <example>FocusUnit("unit")orFocusUnit("name")</example>
        internal static string[] FocusUnit(string unit, string name)
        {
            return Run("FocusUnit(\"{0}\")orFocusUnit(\"{1}\")", unit, name);
        }

        /// <summary>
        /// Causes the player character to automatically follow another unit. Only friendly player units can be followed.
        /// </summary>
        /// <param name="unit">A unit to follow (string, unitID)</param>
        /// <param name="name">Name of a unit to follow (string)</param>
        /// <param name="strict">True if only an exact match for the given name should be allowed; false to allow partial matches (boolean)</param>
        /// <example>FollowUnit("unit")orFollowUnit("name"[,strict])</example>
        internal static string[] FollowUnit(string unit, string name, string strict)
        {
            return Run("FollowUnit(\"{0}\")orFollowUnit(\"{1}\"[,{2}])", unit, name, strict);
        }

        /// <summary>
        /// Causes the current execution path to continue outside the secure environment. Meaningless when called from outside of the secure environment.
        /// </summary>
        /// <example>forceinsecure()</example>
        internal static string[] forceinsecure()
        {
            return Run("forceinsecure()");
        }

        /// <summary>
        /// Forces the client to logout. Not usable in the current Wow client; causes an error message to be displayed.
        /// </summary>
        /// <example>ForceLogout()</example>
        internal static string[] ForceLogout()
        {
            return Run("ForceLogout()");
        }

        /// <summary>
        /// Immediately exits World of Warcraft. Unlike Quit(), this function exits the game application regardless of current conditions.Used in the default UI when the player chooses "Exit now" in the dialog that appears if the player attempts to quit while not in an inn, major city, or other "rest" area.
        /// </summary>
        /// <example>ForceQuit()</example>
        internal static string[] ForceQuit()
        {
            return Run("ForceQuit()");
        }

        /// <summary>
        /// . Alias for the standard library function table.foreach. Deprecated in Lua 5.1; use a for loop and the pairs function instead (see example).
        /// </summary>
        /// <example>foreach()</example>
        //internal static void foreach() {
        //	DoString(string.Format("foreach()");
        //}

        /// <summary>
        /// . Alias for the standard library function table.foreachi. Deprecated in Lua 5.1; use a for loop and the ipairs function instead (see example).
        /// </summary>
        /// <example>foreachi()</example>
        internal static string[] foreachi()
        {
            return Run("foreachi()");
        }

        /// <summary>
        /// Returns a formatted string containing specified values. Alias for the standard library function string.format.  This version, however, includes the positional argument specifiers from Lua 4.0.Lua does not support the ANSI C formate specifiers *, l, L, n, p, and h but includes an extra specifier, q, which formats a string in a form suitable to be safely read back by the Lua interpreter: the string is written between double quotes, and all double quotes, newlines, embedded zeros, and backslashes in the string are correctly escaped when written.
        /// </summary>
        /// <param name="formatString">A string containing format specifiers as per the ANSI C printf function (string)</param>
        /// <param name="...">A list of values to be included in the formatted string (list)</param>
        /// <example>formatted=format("formatString",...)</example>
        internal static string[] format(string formatString, string ellips)
        {
            return Run("format(\"{0}\",{1})", formatString, ellips); //formatted
        }

        /// <summary>
        /// Enables or disables logging of XML loading. When logging is enabled, status and error text will be saved to the file Logs/FrameXML.log (path is relative to the folder containing the World of Warcraft client) as the client parses and loads XML files in the default UI and addons.
        /// </summary>
        /// <param name="enable">True to enable verbose XML logging; false to disable (boolean)</param>
        /// <example>FrameXML_Debug(enable)</example>
        internal static string[] FrameXML_Debug(string enable)
        {
            return Run("FrameXML_Debug({0})", enable);
        }

        /// <summary>
        /// Returns the normalized fraction and base-2 exponent for a number. Alias for the standard library function math.frexp.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>m,e=frexp(x)</example>
        internal static string[] frexp(int x)
        {
            return Run("fre{0}p({0})", x); //m,e
        }

        /// <summary>
        /// Ends in-game movie playback
        /// </summary>
        /// <example>GameMovieFinished()</example>
        internal static string[] GameMovieFinished()
        {
            return Run("GameMovieFinished()");
        }

        /// <summary>
        /// Returns the total Lua memory usage. Deprecated in Lua 5.1; use collectgarbage("count") instead.
        /// </summary>
        /// <example>count=gcinfo()</example>
        internal static string[] gcinfo()
        {
            return Run("gcinfo()"); //count
        }

        /// <summary>
        /// Returns information about items that would be destroyed by abandoning a quest. Usable after calling SetAbandonQuest() but before calling AbandonQuest().
        /// </summary>
        /// <example>items=GetAbandonQuestItems()</example>
        internal static string[] GetAbandonQuestItems()
        {
            return Run("GetAbandonQuestItems()"); //items
        }

        /// <summary>
        /// Returns the name of the quest being abandoned. Usable after calling SetAbandonQuest() but before calling AbandonQuest().
        /// </summary>
        /// <example>name=GetAbandonQuestName()</example>
        internal static string[] GetAbandonQuestName()
        {
            return Run("GetAbandonQuestName()"); //name
        }

        /// <summary>
        /// Returns the most recent of Wow's retail expansion packs for which the player's account is authorized. Used in the default UI to determine the player's maximum possible level (and showing or hiding the XP bar accordingly). Also indicates whether the player is allowed to access expansion areas (e.g. Outland, Draenei / Blood Elf starting areas, Northrend).
        /// </summary>
        /// <example>expansionLevel=GetAccountExpansionLevel()</example>
        internal static string[] GetAccountExpansionLevel()
        {
            return Run("GetAccountExpansionLevel()"); //expansionLevel
        }

        /// <summary>
        /// Returns the numeric ID of the category to which an achievement belongs
        /// </summary>
        /// <param name="achievementID">The numeric ID of an achievement (number)</param>
        /// <example>categoryID=GetAchievementCategory(achievementID)</example>
        internal static string[] GetAchievementCategory(int achievementID)
        {
            return Run("GetAchievementCategory({0})", achievementID); //categoryID
        }

        /// <summary>
        /// Returns information about the comparison unit's achievements. Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called.
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>completed,month,day,year=GetAchievementComparisonInfo(id)</example>
        internal static string[] GetAchievementComparisonInfo(int id)
        {
            return Run("GetAchievementComparisonInfo({0})", id); //completed,month,day,year
        }

        /// <summary>
        /// Gets information about criteria for an achievement or data for a statistic
        /// </summary>
        /// <param name="achievementID">The numeric ID of an achievement (number)</param>
        /// <param name="index">Index of one of the achievement's criteria (between 1 and GetAchievementNumCriteria()) (number)</param>
        /// <param name="statisticID">The numeric ID of a statistic (number)</param>
        /// <example>description,type,completed,quantity,requiredQuantity,characterName,flags,assetID,quantityString,criteriaID=GetAchievementCriteriaInfo(achievementID,index)orGetAchievementCriteriaInfo(statisticID)</example>
        internal static string[] GetAchievementCriteriaInfo(int achievementID, int index, int statisticID)
        {
            return Run("GetAchievementCriteriaInfo({0},{1})orGetAchievementCriteriaInfo({2})", achievementID, index, statisticID); //description,type,completed,quantity,requiredQuantity,characterName,flags,assetID,quantityString,criteriaID
        }

        /// <summary>
        /// Gets information about an achievement or statistic
        /// </summary>
        /// <param name="category">Numeric ID of an achievement category (number)</param>
        /// <param name="index">Index of an achievement within a category (between 1 and GetCategoryNumAchievements()) (number)</param>
        /// <param name="id">The numeric ID of an achievement or statistic (number)</param>
        /// <example>id,name,points,completed,month,day,year,description,flags,icon,rewardText=GetAchievementInfo(category,index)orGetAchievementInfo(id)</example>
        internal static string[] GetAchievementInfo(int category, int index, int id)
        {
            return Run("GetAchievementInfo({0},{1})orGetAchievementInfo({2})", category, index, id); //{2},name,points,completed,month,day,year,description,flags,icon,rewardText
        }

        /// <summary>
        /// Gets information about an achievement or statistic given a criterion ID
        /// </summary>
        /// <param name="id">The numeric ID of an achievement or statistic criterion (as can be retrieved from GetAchievementCriteriaInfo()) (number)</param>
        /// <example>id,name,points,description,flags,icon,rewardText=GetAchievementInfoFromCriteria(id)</example>
        internal static string[] GetAchievementInfoFromCriteria(int id)
        {
            return Run("GetAchievementInfoFromCriteria({0})", id); //{0},name,points,description,flags,icon,rewardText
        }

        /// <summary>
        /// Returns a hyperlink representing the player's progress on an achievement. The tooltip associated with the hyperlink shows not only the details of the achievement itself, but also the completion of or progress towards the achievement by the player who produced the link.
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>link=GetAchievementLink(id)</example>
        internal static string[] GetAchievementLink(int id)
        {
            return Run("GetAchievementLink({0})", id); //link
        }

        /// <summary>
        /// Returns the number of measured criteria for an achievement. Measured criteria for an achievement are shown in the default UI as details when clicking on an achievement in the achievements window or when showing an achievement in the objectives tracker; e.g. "Master of Arms" (15 criteria: Axes, Bows, Crossbows, Daggers, etc.) and "Safe Deposit" (1 criterion: number of bank slots purchased).Not all achievements have criteria: achievements with zero criteria are those that can be completed in a single event (though a complicated event it may be), explained in achievement's description: e.g. "Reach level 80", "Fall 65 yards without dying", and "With all three Twilight Drakes still alive, engage and defeat Sartharion the Onyx Guardian on Normal Difficulty".
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>count=GetAchievementNumCriteria(id)</example>
        internal static string[] GetAchievementNumCriteria(int id)
        {
            return Run("GetAchievementNumCriteria({0})", id); //count
        }

        /// <summary>
        /// Returns the number of point rewards for an achievement (currently always 1). Currently all achievements and statistics offer one reward (according to this function), though the rewards offered by statistics are all zero points.
        /// </summary>
        /// <param name="id">The numeric ID of an achievement or statistic (number)</param>
        /// <example>count=GetAchievementNumRewards(id)</example>
        internal static string[] GetAchievementNumRewards(int id)
        {
            return Run("GetAchievementNumRewards({0})", id); //count
        }

        /// <summary>
        /// Returns the number of achievement points awarded for earning an achievement. Currently all achievements and statistics offer one reward (according to this function), though the rewards offered by statistics are all zero points.
        /// </summary>
        /// <param name="id">The numeric ID of an achievement or statistic (number)</param>
        /// <param name="index">Index of one of the achievement's rewards (between 1 and GetAchievementNumRewards(); currently always 1) (number)</param>
        /// <example>points=GetAchievementReward(id,index)</example>
        internal static string[] GetAchievementReward(int id, int index)
        {
            return Run("GetAchievementReward({0},{1})", id, index); //points
        }

        /// <summary>
        /// Returns information about autocast actions. No player actions have allowed automatic casting since the initial public static release of World of Warcraft.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>autocastAllowed,autocastEnabled=GetActionAutocast(slot)</example>
        internal static string[] GetActionAutocast(string slot)
        {
            return Run("GetActionAutocast({0})", slot); //autocastAllowed,autocastEnabled
        }

        /// <summary>
        /// Returns the current action bar page
        /// </summary>
        /// <example>page=GetActionBarPage()</example>
        internal static string[] GetActionBarPage()
        {
            return Run("GetActionBarPage()"); //page
        }

        /// <summary>
        /// Returns the current visibility settings for the four secondary action bars
        /// </summary>
        /// <example>showBar1,showBar2,showBar3,showBar4=GetActionBarToggles()</example>
        internal static string[] GetActionBarToggles()
        {
            return Run("GetActionBarToggles()"); //showBar1,showBar2,showBar3,showBar4
        }

        /// <summary>
        /// Returns cooldown information about an action
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>start,duration,enable=GetActionCooldown(slot)</example>
        internal static string[] GetActionCooldown(string slot)
        {
            return Run("GetActionCooldown({0})", slot); //start,duration,enable
        }

        /// <summary>
        /// Returns the number of uses remaining for the given action slot. Applies to spells that require reagents, items that stack, or items with charges; used in the default UI to display the count on action buttons.Returns 0 for any action that does not use a count. To distinguish between actions which do not use a count and actions which do but whose current count is 0, see IsConsumableAction.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>count=GetActionCount(slot)</example>
        internal static string[] GetActionCount(string slot)
        {
            return Run("GetActionCount({0})", slot); //count
        }

        /// <summary>
        /// Returns information about an action slot
        /// </summary>
        /// <param name="slot">An action slot (number)</param>
        /// <example>type,id,subType,spellID=GetActionInfo(slot)</example>
        internal static string[] GetActionInfo(int slot)
        {
            return Run("GetActionInfo({0})", slot); //type,id,subType,spellID
        }

        /// <summary>
        /// Returns the text label associated with an action. Currently used only for macros, which in the default UI show their name as a label on an action button.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>text=GetActionText(slot)</example>
        internal static string[] GetActionText(string slot)
        {
            return Run("GetActionText({0})", slot); //text
        }

        /// <summary>
        /// Returns the icon texture for an action. Can be the icon of a spell or item, the icon manually set for a macro, or an icon reflecting the current state of a macro.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>texture=GetActionTexture(slot)</example>
        internal static string[] GetActionTexture(string slot)
        {
            return Run("GetActionTexture({0})", slot); //texture
        }

        /// <summary>
        /// Returns the level of a quest which can be turned in to the current Quest NPC. Only returns valid information after a QUEST_GREETING event.Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest which can be turned in to the current Quest NPC (between 1 and GetNumActiveQuests()) (number)</param>
        /// <example>level=GetActiveLevel(index)</example>
        internal static int GetActiveLevel(int index)
        {
            return Convert.ToInt32(Run("GetActiveLevel({0})", index)[0]); //level
        }

        /// <summary>
        /// Returns the index of the active talent specialization
        /// </summary>
        /// <param name="isInspect">true to query talent info for the currently inspected unit, false to query talent info for the player (boolean)</param>
        /// <param name="isPet">true to query talent info for the player's pet, false to query talent info for the player (boolean)</param>
        /// <example>activeTalentGroup=GetActiveTalentGroup(isInspect,isPet)</example>
        internal static string[] GetActiveTalentGroup(string isInspect, string isPet)
        {
            return Run("GetActiveTalentGroup({0},{1})", isInspect, isPet); //activeTalentGroup
        }

        /// <summary>
        /// Returns the name of a quest which can be turned in to the current Quest NPC. Only returns valid information after a QUEST_GREETING event.Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest which can be turned in to the current Quest NPC (between 1 and GetNumActiveQuests()) (number)</param>
        /// <example>title=GetActiveTitle(index)</example>
        internal static string GetActiveTitle(int index)
        {
            return Run("GetActiveTitle({0})", index)[0];
        }

        /// <summary>
        /// Returns the currently active voice channel
        /// </summary>
        /// <example>index=GetActiveVoiceChannel()</example>
        internal static string[] GetActiveVoiceChannel()
        {
            return Run("GetActiveVoiceChannel()"); //index
        }

        /// <summary>
        /// Returns the amount of CPU time used by an addon. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.The value returned is from a cache only updated when calling UpdateAddOnCPUUsage(). This value is the sum of GetFunctionCPUUsage() for all functions created on the addon's behalf -- note that if the addon calls external functions which in turn create new functions, the new functions are considered to belong to the addon.
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>usage=GetAddOnCPUUsage("name")orGetAddOnCPUUsage(index)</example>
        internal static string[] GetAddOnCPUUsage(string name, int index)
        {
            return Run("GetAddOnCPUUsage(\"{0}\")orGetAddOnCPUUsage({1})", name, index); //usage
        }

        /// <summary>
        /// Returns a list of addons a given addon is dependent upon
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>...=GetAddOnDependencies("name")orGetAddOnDependencies(index)</example>
        internal static string[] GetAddOnDependencies(string name, int index)
        {
            return Run("GetAddOnDependencies(\"{0}\")orGetAddOnDependencies({1})", name, index); //...
        }

        /// <summary>
        /// Returns information about an addon
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>name,title,notes,enabled,loadable,reason,security=GetAddOnInfo("name")orGetAddOnInfo(index)</example>
        internal static string[] GetAddOnInfo(string name, int index)
        {
            return Run("GetAddOnInfo(\"{0}\")orGetAddOnInfo({1})", name, index); //{0},title,notes,enabled,loadable,reason,security
        }

        /// <summary>
        /// Returns the amount of memory used by an addon. The value returned is from a cache only updated when calling UpdateAddOnMemoryUsage().
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>mem=GetAddOnMemoryUsage("name")orGetAddOnMemoryUsage(index)</example>
        internal static string[] GetAddOnMemoryUsage(string name, int index)
        {
            return Run("GetAddOnMemoryUsage(\"{0}\")orGetAddOnMemoryUsage({1})", name, index); //mem
        }

        /// <summary>
        /// Returns the value of certain fields in an addon's TOC file
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <param name="header">Name of a header from the addon's TOC file; only certain headers can be queried: Author, Title, Notes, Version, and any header whose name starts with "X-" (e.g. X-Website, X-Category) (string)</param>
        /// <example>data=GetAddOnMetadata("name","header")orGetAddOnMetadata(index,"header")</example>
        internal static string[] GetAddOnMetadata(string name, int index, string header)
        {
            return Run("GetAddOnMetadata(\"{0}\",\"{2}\")orGetAddOnMetadata({1},\"{2}\")", name, index, header); //data
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetAdjustedSkillPoints()</example>
        internal static string[] GetAdjustedSkillPoints()
        {
            return Run("GetAdjustedSkillPoints()");
        }

        /// <summary>
        /// Returns the time remaining until a nearby battleground spirit healer resurrects all players in its area
        /// </summary>
        /// <example>timeleft=GetAreaSpiritHealerTime()</example>
        internal static string[] GetAreaSpiritHealerTime()
        {
            return Run("GetAreaSpiritHealerTime()"); //timeleft
        }

        /// <summary>
        /// Returns the player's amount of arena points
        /// </summary>
        /// <example>points=GetArenaCurrency()</example>
        internal static string[] GetArenaCurrency()
        {
            return Run("GetArenaCurrency()"); //points
        }

        /// <summary>
        /// Returns information about one of the player's arena teams
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <example>teamName,teamSize,teamRating,teamPlayed,teamWins,seasonTeamPlayed,seasonTeamWins,playerPlayed,seasonPlayerPlayed,teamRank,playerRating,bg_red,bg_green,bg_blue,emblem,emblem_red,emblem_green,emblem_blue,border,border_red,border_green,border_blue=GetArenaTeam(team)</example>
        internal static string[] GetArenaTeam(string team)
        {
            return Run("GetArenaTeam({0})", team); //{0}Name,{0}Size,{0}Rating,{0}Played,{0}Wins,seasonTeamPlayed,seasonTeamWins,playerPlayed,seasonPlayerPlayed,{0}Rank,playerRating,bg_red,bg_green,bg_blue,emblem,emblem_red,emblem_green,emblem_blue,border,border_red,border_green,border_blue
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetArenaTeamGdfInfo()</example>
        internal static string[] GetArenaTeamGdfInfo()
        {
            return Run("GetArenaTeamGdfInfo()");
        }

        /// <summary>
        /// Returns information about an arena team member
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <param name="index">Index of a team member (between 1 and GetNumArenaTeamMembers(team)) (number)</param>
        /// <example>name,rank,level,class,online,played,win,seasonPlayed,seasonWin,rating=GetArenaTeamRosterInfo(team,index)</example>
        internal static string[] GetArenaTeamRosterInfo(string team, int index)
        {
            return Run("GetArenaTeamRosterInfo({0},{1})", team, index); //name,rank,level,class,online,played,win,seasonPlayed,seasonWin,rating
        }

        /// <summary>
        /// Returns the currently selected member in an arena team roster. Selection in the arena team roster currently has no effect beyond highlighting list entry in the default UI.
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <example>index=GetArenaTeamRosterSelection(team)</example>
        internal static string[] GetArenaTeamRosterSelection(string team)
        {
            return Run("GetArenaTeamRosterSelection({0})", team); //index
        }

        /// <summary>
        /// Returns whether arena team roster listings should include offline members. The "Show Offline" filter is not used in the default UI; if disabled, offline members are still shown.
        /// </summary>
        /// <example>showOffline=GetArenaTeamRosterShowOffline()</example>
        internal static string[] GetArenaTeamRosterShowOffline()
        {
            return Run("GetArenaTeamRosterShowOffline()"); //showOffline
        }

        /// <summary>
        /// Returns the percentage of enemy armor ignored due to the player's Armor Penetration Rating
        /// </summary>
        /// <example>amount=GetArmorPenetration()</example>
        internal static string[] GetArmorPenetration()
        {
            return Run("GetArmorPenetration()"); //amount
        }

        /// <summary>
        /// Returns the attack power bonus provided by one of the player's basic statistics
        /// </summary>
        /// <param name="statIndex">Index of a basic statistic (number) 1 - Strength2 - Agility3 - Stamina4 - Intellect5 - Spirit</param>
        /// <param name="effectiveStat">Value of the statistic to use in attack power calculation (number)</param>
        /// <example>attackPower=GetAttackPowerForStat(statIndex,effectiveStat)</example>
        internal static string[] GetAttackPowerForStat(int statIndex, int effectiveStat)
        {
            return Run("GetAttackPowerForStat({0},{1})", statIndex, effectiveStat); //attackPower
        }

        /// <summary>
        /// Returns the deposit rate for the current auction house. Obsolete (returns different values for faction and neutral auction houses, but these values do not describe the ratio of auction deposit to an item's vendor buy or sell price); use CalculateAuctionDeposit() instead.
        /// </summary>
        /// <example>rate=GetAuctionHouseDepositRate()</example>
        internal static string[] GetAuctionHouseDepositRate()
        {
            return Run("GetAuctionHouseDepositRate()"); //rate
        }

        /// <summary>
        /// Returns a list of the inventory subtypes for a given auction house item subclass. Inventory types are the second level of hierarchy seen when browsing item classes (categories) and subclasses at the Auction House: Head, Neck, Shirt, et al for Miscellaneous; Head, Shoulder, Chest, Wrist, et al for Cloth; etc.This function still returns valid information if the player is not interacting with an auctioneer.
        /// </summary>
        /// <param name="classIndex">Index of an item class (in the list returned by GetAuctionItemClasses(); currently, inventory types are only applicable in class 2 (armor) (number)</param>
        /// <param name="subClassIndex">Index of an item subclass (in the list returned by GetAuctionItemSubClasses(classIndex); currently, inventory types are only applicable in the armor subclasses listed below: (number) 1 - Miscellaneous2 - Cloth3 - Leather4 - Mail5 - Plate</param>
        /// <example>token,display,...=GetAuctionInvTypes(classIndex,subClassIndex)</example>
        internal static string[] GetAuctionInvTypes(int classIndex, int subClassIndex)
        {
            return Run("GetAuctionInvTypes({0},{1})", classIndex, subClassIndex); //token,display,...
        }

        /// <summary>
        /// Returns a list of localized item class (category) names. Item classes are the first level of hierarchy seen when browsing at the Auction House: Weapon, Armor, Container, Consumable, etc.This function still returns valid information if the player is not interacting with an auctioneer.
        /// </summary>
        /// <example>...=GetAuctionItemClasses()</example>
        internal static string[] GetAuctionItemClasses()
        {
            return Run("GetAuctionItemClasses()"); //...
        }

        /// <summary>
        /// Returns information about an auction listing
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="index">Index of an auction in the listing (number)</param>
        /// <example>name,texture,count,quality,canUse,level,minBid,minIncrement,buyoutPrice,bidAmount,highestBidder,owner,sold=GetAuctionItemInfo("list",index)</example>
        internal static string[] GetAuctionItemInfo(string list, int index)
        {
            return Run("GetAuctionItemInfo(\"{0}\",{1})", list, index); //name,texture,count,quality,canUse,level,minBid,minIncrement,buyoutPrice,bidAmount,highestBidder,owner,sold
        }

        /// <summary>
        /// Returns a hyperlink for an item in an auction listing
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="index">Index of an auction in the listing (number)</param>
        /// <example>link=GetAuctionItemLink("list",index)</example>
        internal static string[] GetAuctionItemLink(string list, int index)
        {
            return Run("GetAuctionItemLink(\"{0}\",{1})", list, index); //link
        }

        /// <summary>
        /// Returns a list of localized subclass names for a given item class. Item subclasses are the second level of hierarchy seen when browsing item classes (categories) at the Auction House: One-Handed Axes, Two-Handed Axes, Bows, Guns, et al for Weapon; Cloth, Leather, Plate, Shields, et al for Armor; Food & Drink, Potion, Elixir et al for Consumable; Red, Blue, Yellow, et al for Gem; etc.This function still returns valid information if the player is not interacting with an auctioneer.
        /// </summary>
        /// <param name="classIndex">Index of an item class (in the list returned by GetAuctionItemClasses()) (number)</param>
        /// <example>...=GetAuctionItemSubClasses(classIndex)</example>
        internal static string[] GetAuctionItemSubClasses(int classIndex)
        {
            return Run("GetAuctionItemSubClasses({0})", classIndex); //...
        }

        /// <summary>
        /// Returns the time remaining before an auction listing expires
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="index">Index of an auction in the listing (number)</param>
        /// <example>duration=GetAuctionItemTimeLeft("list",index)</example>
        internal static string[] GetAuctionItemTimeLeft(string list, int index)
        {
            return Run("GetAuctionItemTimeLeft(\"{0}\",{1})", list, index); //duration
        }

        /// <summary>
        /// Returns information about the item currently being set up for auction. Only returns useful information once an item has been placed in the Create Auction UI's "auction item" slot (see ClickAuctionSellItemButton()). 
        /// </summary>
        /// <example>name,texture,count,quality,canUse,price=GetAuctionSellItemInfo()</example>
        internal static string[] GetAuctionSellItemInfo()
        {
            return Run("GetAuctionSellItemInfo()"); //name,texture,count,quality,canUse,price
        }

        /// <summary>
        /// Returns the current sort settings for auction data. The index argument describes priority order for sort criteria: e.g. if GetAuctionSort("list",1) returns quality and GetAuctionSort("list",2) returns level,1, items are sorted first by itemQuality and items with the same quality are sorted by required level.
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="index">Index of a sorting priority (number)</param>
        /// <example>criterion,reverse=GetAuctionSort("list",index)</example>
        internal static string[] GetAuctionSort(string list, int index)
        {
            return Run("GetAuctionSort(\"{0}\",{1})", list, index); //criterion,reverse
        }

        /// <summary>
        /// Returns a list of character names which complete a given partial name prefix
        /// </summary>
        /// <param name="inputString">Partial name for which to return completions (string)</param>
        /// <param name="includeBitfield">One or more of the following flags (combined via bit.bor()), indicating which characters should be included in the result list: (number, bitfield) 0x00000000 - AUTOCOMPLETE_FLAG_NONE: No characters0x00000001 - AUTOCOMPLETE_FLAG_IN_GROUP: Characters in the player's party or raid0x00000002 - AUTOCOMPLETE_FLAG_IN_GUILD: Characters in the player's guild0x00000004 - AUTOCOMPLETE_FLAG_FRIEND: Characters from the player's friends list0x00000010 - AUTOCOMPLETE_FLAG_INTERACTED_WITH: Characters with whom the player has recently interacted0x00000020 - AUTOCOMPLETE_FLAG_ONLINE: Currently online friends and guildmates0xffffffff - AUTOCOMPLETE_FLAG_ALL: All characters</param>
        /// <param name="excludeBitfield">One or more of the following flags (combined via bit.bor()), indicating which characters should be excluded from the result list: (number, bitfield) 0x00000000 - AUTOCOMPLETE_FLAG_NONE: No characters0x00000001 - AUTOCOMPLETE_FLAG_IN_GROUP: Characters in the player's party or raid0x00000002 - AUTOCOMPLETE_FLAG_IN_GUILD: Characters in the player's guild0x00000004 - AUTOCOMPLETE_FLAG_FRIEND: Characters from the player's friends list0x00000010 - AUTOCOMPLETE_FLAG_INTERACTED_WITH: Characters with whom the player has recently interacted0x00000020 - AUTOCOMPLETE_FLAG_ONLINE: Currently online friends and guildmates0xffffffff - AUTOCOMPLETE_FLAG_ALL: All characters</param>
        /// <param name="maxResults">Maximum number of results to be returned (number)</param>
        /// <param name="cursorPosition">Cursor position in the inputString; currently unused (number)</param>
        /// <example>...=GetAutoCompleteResults("inputString",includeBitfield,excludeBitfield,maxResults[,cursorPosition])</example>
        internal static string[] GetAutoCompleteResults(string inputString, string includeBitfield, string excludeBitfield, int maxResults, int cursorPosition)
        {
            return Run("GetAutoCompleteResults(\"{0}\",{1},{2},{3}[,{4}])", inputString, includeBitfield, excludeBitfield, maxResults, cursorPosition); //...
        }

        /// <summary>
        /// Returns the level of a quest available from the current Quest NPC. Only returns valid information after a QUEST_GREETING event.Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number)</param>
        /// <example>level=GetAvailableLevel(index)</example>
        internal static string[] GetAvailableLevel(int index)
        {
            return Run("GetAvailableLevel({0})", index); //level
        }

        /// <summary>
        /// Returns the name of a quest available from the current Quest NPC. Only returns valid information after a QUEST_GREETING event.Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number)</param>
        /// <example>title=GetAvailableTitle(index)</example>
        internal static string GetAvailableTitle(int index)
        {
            return Run("GetAvailableTitle({0})", index)[0];
        }

        /// <summary>
        /// Returns information about a currency marked for watching on the Backpack UI
        /// </summary>
        /// <param name="index">Index of a 'slot' for displaying currencies on the backpack (between 1 and MAX_WATCHED_TOKENS) (number)</param>
        /// <example>name,count,extraCurrencyType,icon,itemID=GetBackpackCurrencyInfo(index)</example>
        internal static string[] GetBackpackCurrencyInfo(int index)
        {
            return Run("GetBackpackCurrencyInfo({0})", index); //name,count,extraCurrencyType,icon,itemID
        }

        /// <summary>
        /// Returns the name of one of the player's bags. Returns nil for the bank and keyring, for bank bags while the player is not at the bank, and for empty bag or bank bag slots.
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <example>name=GetBagName(container)</example>
        internal static string[] GetBagName(string container)
        {
            return Run("GetBagName({0})", container); //name
        }

        /// <summary>
        /// Returns the cost of the next purchasable bank bag slot. Returns 999999999 if the player owns all available slots.
        /// </summary>
        /// <example>cost=GetBankSlotCost()</example>
        internal static string[] GetBankSlotCost()
        {
            return Run("GetBankSlotCost()"); //cost
        }

        /// <summary>
        /// Returns information about the selected barber shop style option
        /// </summary>
        /// <param name="styleIndex">Index of a style option (number) 1 - Hair (or Horn) Style2 - Hair (or Horn) Color3 - Varies by race and gender: Facial Hair, Earrings, Features, Hair, Horns, Markings, Normal, Piercings, or Tusks</param>
        /// <example>name,unused,cost,isCurrent=GetBarberShopStyleInfo(styleIndex)</example>
        internal static string[] GetBarberShopStyleInfo(int styleIndex)
        {
            return Run("GetBarberShopStyleInfo({0})", styleIndex); //name,unused,cost,isCurrent
        }

        /// <summary>
        /// Returns the total price of selected barber shop style changes
        /// </summary>
        /// <example>cost=GetBarberShopTotalCost()</example>
        internal static string[] GetBarberShopTotalCost()
        {
            return Run("GetBarberShopTotalCost()"); //cost
        }

        /// <summary>
        /// Returns the level of texture resolution rendered by the client. Functional but no longer used by the default UI; see the BaseMip CVar instead.
        /// </summary>
        /// <example>baseMip=GetBaseMip()</example>
        internal static string[] GetBaseMip()
        {
            return Run("GetBaseMip()"); //baseMip
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetBattlefieldArenaFaction()</example>
        internal static string[] GetBattlefieldArenaFaction()
        {
            return Run("GetBattlefieldArenaFaction()");
        }

        /// <summary>
        /// Returns the estimated wait time on a battleground or arena queue
        /// </summary>
        /// <param name="index">Index of a battleground/arena queue the player has joined (between 1 and MAX_BATTLEFIELD_QUEUES) (number)</param>
        /// <example>waitTime=GetBattlefieldEstimatedWaitTime(index)</example>
        internal static string[] GetBattlefieldEstimatedWaitTime(int index)
        {
            return Run("GetBattlefieldEstimatedWaitTime({0})", index); //waitTime
        }

        /// <summary>
        /// Returns the position of a flag in a battleground
        /// </summary>
        /// <param name="index">Index of a flag (between 1 and GetNumBattlefieldFlagPositions()) (number)</param>
        /// <example>flagX,flagY,flagToken=GetBattlefieldFlagPosition(index)</example>
        internal static string[] GetBattlefieldFlagPosition(int index)
        {
            return Run("GetBattlefieldFlagPosition({0})", index); //flagX,flagY,flagToken
        }

        /// <summary>
        /// Returns information about a battleground for which the player can queue
        /// </summary>
        /// <example>mapName,mapDescription,minLevel,maxLevel,bracketMin,bracketMax,maxGroup=GetBattlefieldInfo()</example>
        internal static string[] GetBattlefieldInfo()
        {
            return Run("GetBattlefieldInfo()"); //mapName,mapDescription,minLevel,maxLevel,bracketMin,bracketMax,maxGroup
        }

        /// <summary>
        /// Returns the amount of time remaining before all players are removed from the instance, if in a battleground instance where the match has completed
        /// </summary>
        /// <example>timeLeft=GetBattlefieldInstanceExpiration()</example>
        internal static string[] GetBattlefieldInstanceExpiration()
        {
            return Run("GetBattlefieldInstanceExpiration()"); //timeLeft
        }

        /// <summary>
        /// Returns a numeric ID for a battleground instance in the battleground queueing list. This number is seen in the instance names in said listings and elsewhere in the Battlegrounds UI (e.g. the 13 in "You are eligible to enter Warsong Gulch 13").
        /// </summary>
        /// <param name="index">Index in the battleground queue listing (1 for the first available instance, or between 2 and GetNumBattlefields() for other instances)  (number)</param>
        /// <example>instanceID=GetBattlefieldInstanceInfo(index)</example>
        internal static string[] GetBattlefieldInstanceInfo(int index)
        {
            return Run("GetBattlefieldInstanceInfo({0})", index); //instanceID
        }

        /// <summary>
        /// Returns the amount of time since the current battleground instance opened
        /// </summary>
        /// <example>time=GetBattlefieldInstanceRunTime()</example>
        internal static string[] GetBattlefieldInstanceRunTime()
        {
            return Run("GetBattlefieldInstanceRunTime()"); //time
        }

        /// <summary>
        /// Returns the scale to be used for displaying battleground map icons. Used in the default UI to determine the size of the point of interest icons (towers, graveyards, etc.) on the zone map (the small battle minimap). The default size of the icons is set by DEFAULT_POI_ICON_SIZE and the scale is used to grow or shrink them depending on the size of the map.
        /// </summary>
        /// <example>scale=GetBattlefieldMapIconScale()</example>
        internal static string[] GetBattlefieldMapIconScale()
        {
            return Run("GetBattlefieldMapIconScale()"); //scale
        }

        /// <summary>
        /// Returns the time left on a battleground or arena invitation
        /// </summary>
        /// <param name="index">Index of a battleground/arena queue the player has joined (between 1 and MAX_BATTLEFIELD_QUEUES) (number)</param>
        /// <example>expiration=GetBattlefieldPortExpiration(index)</example>
        internal static string[] GetBattlefieldPortExpiration(int index)
        {
            return Run("GetBattlefieldPortExpiration({0})", index); //expiration
        }

        /// <summary>
        /// Returns the position of a battleground team member not in the player's group. Still used in the default UI but no longer useful; as all team members in a battleground match are automatically joined into a raid group. See GetPlayerMapPosition() instead.
        /// </summary>
        /// <param name="index">Index of a team member (between 1 and GetNumBattlefieldPositions()) (number)</param>
        /// <example>unitX,unitY,name=GetBattlefieldPosition(index)</example>
        internal static string[] GetBattlefieldPosition(int index)
        {
            return Run("GetBattlefieldPosition({0})", index); //unitX,unitY,name
        }

        /// <summary>
        /// Returns basic scoreboard information for a battleground/arena participant. Does not include battleground-specific score data (e.g. flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc); see GetBattlefieldStatData() for such information.
        /// </summary>
        /// <param name="index">Index of a participant in the battleground/arena scoreboard (between 1 and GetNumBattlefieldScores()) (number)</param>
        /// <example>name,killingBlows,honorableKills,deaths,honorGained,faction,rank,race,classToken,damageDone,healingDone=GetBattlefieldScore(index)</example>
        internal static string[] GetBattlefieldScore(int index)
        {
            return Run("GetBattlefieldScore({0})", index); //name,killingBlows,honorableKills,deaths,honorGained,faction,rank,race,classToken,damageDone,healingDone
        }

        /// <summary>
        /// Returns battleground-specific scoreboard information for a battleground participant. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc. For the name and icon associated with each statistic, see GetBattlefieldStatInfo(). For basic battleground score information, see GetBattlefieldScore().
        /// </summary>
        /// <param name="index">Index of a participant in the battleground/arena scoreboard (between 1 and GetNumBattlefieldScores()) (number)</param>
        /// <param name="statIndex">Index of a battleground-specific statistic (between 1 and GetNumBattlefieldStats()) (number)</param>
        /// <example>columnData=GetBattlefieldStatData(index,statIndex)</example>
        internal static string[] GetBattlefieldStatData(int index, int statIndex)
        {
            return Run("GetBattlefieldStatData({0},{1})", index, statIndex); //columnData
        }

        /// <summary>
        /// Returns information about a battleground-specific scoreboard column. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc.
        /// </summary>
        /// <param name="statIndex">Index of a battleground-specific statistic (between 1 and GetNumBattlefieldStats()) (number)</param>
        /// <example>text,icon,tooltip=GetBattlefieldStatInfo(statIndex)</example>
        internal static string[] GetBattlefieldStatInfo(int statIndex)
        {
            return Run("GetBattlefieldStatInfo({0})", statIndex); //text,icon,tooltip
        }

        /// <summary>
        /// Returns information about an active or queued battleground/arena instance
        /// </summary>
        /// <param name="index">Index of a battleground/arena queue the player has joined (between 1 and MAX_BATTLEFIELD_QUEUES) (number)</param>
        /// <example>status,mapName,instanceID,bracketMin,bracketMax,teamSize,registeredMatch=GetBattlefieldStatus(index)</example>
        internal static string[] GetBattlefieldStatus(int index)
        {
            return Run("GetBattlefieldStatus({0})", index); //status,mapName,instanceID,bracketMin,bracketMax,teamSize,registeredMatch
        }

        /// <summary>
        /// Returns info about teams and their ratings in a rated arena match.. Usable following the UPDATE_BATTLEFIELD_SCORE event.
        /// </summary>
        /// <param name="index">Index of a team in the arena match (number) 0 - Green Team1 - Gold Team</param>
        /// <example>teamName,teamRating,newTeamRating=GetBattlefieldTeamInfo(index)</example>
        internal static string[] GetBattlefieldTeamInfo(int index)
        {
            return Run("GetBattlefieldTeamInfo({0})", index); //teamName,teamRating,newTeamRating
        }

        /// <summary>
        /// Returns the amount of time elapsed since the player joined the queue for a battleground/arena
        /// </summary>
        /// <param name="index">Index of a battleground/arena queue the player has joined (between 1 and MAX_BATTLEFIELD_QUEUES) (number)</param>
        /// <example>timeInQueue=GetBattlefieldTimeWaited(index)</example>
        internal static string[] GetBattlefieldTimeWaited(int index)
        {
            return Run("GetBattlefieldTimeWaited({0})", index); //timeInQueue
        }

        /// <summary>
        /// Returns information about special vehicles in the current zone. Used only for certain vehicles in certain zones: includes the airships in Icecrown as well as vehicles used in Ulduar, Wintergrasp, and Strand of the Ancients.
        /// </summary>
        /// <param name="index">Index of a special vehicle (between 1 and GetNumBattlefieldVehicles()) (number)</param>
        /// <example>vehicleX,vehicleY,unitName,isPossessed,vehicleType,orientation,isPlayer,isAlive=GetBattlefieldVehicleInfo(index)</example>
        internal static string[] GetBattlefieldVehicleInfo(int index)
        {
            return Run("GetBattlefieldVehicleInfo({0})", index); //vehicleX,vehicleY,unitName,isPossessed,vehicleType,orientation,isPlayer,isAlive
        }

        /// <summary>
        /// Returns the winner of the current battleground or arena match
        /// </summary>
        /// <example>winner=GetBattlefieldWinner()</example>
        internal static string[] GetBattlefieldWinner()
        {
            return Run("GetBattlefieldWinner()"); //winner
        }

        /// <summary>
        /// Returns information about available battlegrounds
        /// </summary>
        /// <param name="index">Index of a battleground (between 1 and NUM_BATTLEGROUNDS) (number)</param>
        /// <example>name,canEnter,isHoliday,minlevel=GetBattlegroundInfo(index)</example>
        internal static string[] GetBattlegroundInfo(int index)
        {
            return Run("GetBattlegroundInfo({0})", index); //name,canEnter,isHoliday,minlevel
        }

        /// <summary>
        /// Requests data from the server for the list of auctions bid on by the player. The AUCTION_BIDDER_LIST_UPDATE event fires if new data is available; listing information can then be retrieved using GetAuctionItemInfo() or other Auction APIs.
        /// </summary>
        /// <example>GetBidderAuctionItems()</example>
        internal static string[] GetBidderAuctionItems()
        {
            return Run("GetBidderAuctionItems()");
        }

        /// <summary>
        /// Returns the amount of time for which the player must be offline in order to lift play time restrictions. After playing for a number of hours, restrictions may be placed on the player's ability to gain loot or XP, complete quests, or use trade skills; if in such a state, the player must log off for the period of time specified by this function in order to return to normal play.Only used in locales where the length of play sessions is restricted (e.g. mainland China).
        /// </summary>
        /// <example>time=GetBillingTimeRested()</example>
        internal static string[] GetBillingTimeRested()
        {
            return Run("GetBillingTimeRested()"); //time
        }

        /// <summary>
        /// Returns information about a key binding
        /// </summary>
        /// <param name="index">Index in the key bindings list (between 1 and GetNumBindings()) (number)</param>
        /// <example>commandName,binding1,binding2=GetBinding(index)</example>
        internal static string[] GetBinding(int index)
        {
            return Run("GetBinding({0})", index); //commandName,binding1,binding2
        }

        /// <summary>
        /// Returns the action bound to a key or key combination
        /// </summary>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="checkOverride">True to check possible override bindings for the key, false or omitted to check only normal bindings (boolean)</param>
        /// <example>action=GetBindingAction("key"[,checkOverride])</example>
        internal static string[] GetBindingAction(string key, string checkOverride)
        {
            return Run("GetBindingAction(\"{0}\"[,{1}])", key, checkOverride); //action
        }

        /// <summary>
        /// Returns the action bound to a key or key combination
        /// </summary>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <example>action=GetBindingByKey("key")</example>
        internal static string[] GetBindingByKey(string key)
        {
            return Run("GetBindingByKey(\"{0}\")", key); //action
        }

        /// <summary>
        /// Returns the key combinations for a given binding command. Although the default UI only allows two combinations to be bound to a command, more than two can be set via the API.
        /// </summary>
        /// <param name="COMMAND">Name of a binding command (string)</param>
        /// <example>key1,...=GetBindingKey("COMMAND")</example>
        internal static string[] GetBindingKey(string COMMAND)
        {
            return Run("GetBindingKey(\"{0}\")", COMMAND); //key1,...
        }

        /// <summary>
        /// Returns the name of the player's Hearthstone location
        /// </summary>
        /// <example>location=GetBindLocation()</example>
        internal static string[] GetBindLocation()
        {
            return Run("GetBindLocation()"); //location
        }

        /// <summary>
        /// Returns the player's percentage chance to block with a shield
        /// </summary>
        /// <example>chance=GetBlockChance()</example>
        internal static string[] GetBlockChance()
        {
            return Run("GetBlockChance()"); //chance
        }

        /// <summary>
        /// Returns the current "stance" offset for use with the bonus action bar. This value corresponds to what "stance" the player is currently in, and more specifically which set of actions correspond to that stance. Action IDs for special stances start on action bar #7 (or NUM_ACTIONBAR_PAGES + 1), so the offset returned by this function corresponds to the number to be added to NUM_ACTIONBAR_PAGES in calculating action IDs for these action bars.Note that the UI definition of "stance" includes not just warrior stances but also druid shapeshift forms, rogue/druid stealth, priest shadowform, and various other cases, but does not necessarily include all states normally presented in the default UI's stance/shapeshift bar (notable exclusions are paladin auras and death knight presences).
        /// </summary>
        /// <example>offset=GetBonusBarOffset()</example>
        internal static string[] GetBonusBarOffset()
        {
            return Run("GetBonusBarOffset()"); //offset
        }

        /// <summary>
        /// Returns the version information about the client
        /// </summary>
        /// <example>version,internalVersion,date,uiVersion=GetBuildInfo()</example>
        internal static string[] GetBuildInfo()
        {
            return Run("GetBuildInfo()"); //version,internalVersion,date,uiVersion
        }

        /// <summary>
        /// Returns information about an item recently sold to a vendor and available to be repurchased
        /// </summary>
        /// <param name="index">Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number)</param>
        /// <example>name,texture,price,quantity,numAvailable,isUsable=GetBuybackItemInfo(index)</example>
        internal static string[] GetBuybackItemInfo(int index)
        {
            return Run("GetBuybackItemInfo({0})", index); //name,texture,price,quantity,numAvailable,isUsable
        }

        /// <summary>
        /// Returns a hyperlink for an item recently sold to a vendor and available to be repurchased
        /// </summary>
        /// <param name="index">Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number)</param>
        /// <example>link=GetBuybackItemLink(index)</example>
        internal static string[] GetBuybackItemLink(int index)
        {
            return Run("GetBuybackItemLink({0})", index); //link
        }

        /// <summary>
        /// Returns information about an achievement/statistic category
        /// </summary>
        /// <param name="id">The numeric ID of an achievement/statistic category (number)</param>
        /// <example>name,parentID,flags=GetCategoryInfo(id)</example>
        internal static string[] GetCategoryInfo(int id)
        {
            return Run("GetCategoryInfo({0})", id); //name,parentID,flags
        }

        /// <summary>
        /// Returns a list of all achievement categories
        /// </summary>
        /// <example>categories=GetCategoryList()</example>
        internal static string[] GetCategoryList()
        {
            return Run("GetCategoryList()"); //categories
        }

        /// <summary>
        /// Returns the number of achievements/statistics to display in a category. Note this function does not return the total number of achievements in a category; it only returns the number to be displayed in the default UI. Achievements may belong to a category but not be counted for display: e.g. among those which are part of a series (100 Quests Completed, 500 Quests Completed), only the achievement most recently completed and the achievement following it in the series are shown.
        /// </summary>
        /// <param name="id">The numeric ID of an achievement/statistic category (number)</param>
        /// <example>numItems,numCompleted=GetCategoryNumAchievements(id)</example>
        internal static string[] GetCategoryNumAchievements(int id)
        {
            return Run("GetCategoryNumAchievements({0})", id); //numItems,numCompleted
        }

        /// <summary>
        /// Returns information about an entry in the channel list display
        /// </summary>
        /// <param name="index">Index of an entry in the channel list display (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <example>name,header,collapsed,channelNumber,count,active,category,voiceEnabled,voiceActive=GetChannelDisplayInfo(index)</example>
        internal static string[] GetChannelDisplayInfo(int index)
        {
            return Run("GetChannelDisplayInfo({0})", index); //name,header,collapsed,channelNumber,count,active,category,voiceEnabled,voiceActive
        }

        /// <summary>
        /// Returns the list of the channels the player has joined
        /// </summary>
        /// <example>index,channel,...=GetChannelList()</example>
        internal static string[] GetChannelList()
        {
            return Run("GetChannelList()"); //index,channel,...
        }

        /// <summary>
        /// Returns information about a chat channel
        /// </summary>
        /// <param name="channelIndex">A channel ID (number)</param>
        /// <param name="channelName">A channel name (string)</param>
        /// <example>channel,channelName,instanceID=GetChannelName(channelIndex)orGetChannelName("channelName")</example>
        internal static string[] GetChannelName(int channelIndex, string channelName)
        {
            return Run("GetChannelName({0})orGetChannelName(\"{1}\")", channelIndex, channelName); //channel,{1},instanceID
        }

        /// <summary>
        /// Returns information about a character in a chat channel in the channel list display
        /// </summary>
        /// <param name="index">Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <param name="rosterIndex">Index of a participant in the channel (between 1 and count, where count = select(5,GetChannelDisplayInfo(index)) (number)</param>
        /// <example>name,owner,moderator,muted,active,enabled=GetChannelRosterInfo(index,rosterIndex)</example>
        internal static string[] GetChannelRosterInfo(int index, int rosterIndex)
        {
            return Run("GetChannelRosterInfo({0},{1})", index, rosterIndex); //name,owner,moderator,muted,active,enabled
        }

        /// <summary>
        /// Returns the numeric index corresponding to a chat message type. These indices are used in the default UI to identify lines printed in a chat window, allowing (for example) their color to be changed to match changes in the player's color preferences.
        /// </summary>
        /// <param name="messageGroup">Token identifying a message type (string, chatMsgType)</param>
        /// <example>index=GetChatTypeIndex("messageGroup")</example>
        internal static string[] GetChatTypeIndex(string messageGroup)
        {
            return Run("GetChatTypeIndex(\"{0}\")", messageGroup); //index
        }

        /// <summary>
        /// Returns the saved list of channels to which a chat window is subscribed
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <example>channelName,channelId,...=GetChatWindowChannels(index)</example>
        internal static string[] GetChatWindowChannels(int index)
        {
            return Run("GetChatWindowChannels({0})", index); //channelName,channelId,...
        }

        /// <summary>
        /// Returns the saved settings for a chat window. These values reflect the settings saved between sessions, which are used by the default UI to set up the chat frames it displays.
        /// </summary>
        /// <param name="index">Index of the window you wish you get information on (starts at 1) (number)</param>
        /// <example>name,fontSize,r,g,b,alpha,shown,locked,docked,uninteractable=GetChatWindowInfo(index)</example>
        internal static string[] GetChatWindowInfo(int index)
        {
            return Run("GetChatWindowInfo({0})", index); //name,fontSize,r,g,b,alpha,shown,locked,docked,uninteractable
        }

        /// <summary>
        /// Returns the saved list of messages to which a chat window is subscribed
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <example>...=GetChatWindowMessages(index)</example>
        internal static string[] GetChatWindowMessages(int index)
        {
            return Run("GetChatWindowMessages({0})", index); //...
        }

        /// <summary>
        /// Returns the Frame object associated with the given name. Returns nil if there is no UI object with the name given, or if the named UI object is not a Frame.
        /// </summary>
        /// <param name="name">Name of a Frame or other UI object (string)</param>
        /// <example>frame=GetClickFrame("name")</example>
        internal static string[] GetClickFrame(string name)
        {
            return Run("GetClickFrame(\"{0}\")", name); //frame
        }

        /// <summary>
        /// Returns an icon representing an amount of money
        /// </summary>
        /// <param name="amount">Amount of money in copper (number)</param>
        /// <example>icon=GetCoinIcon(amount)</example>
        internal static string[] GetCoinIcon(int amount)
        {
            return Run("GetCoinIcon({0})", amount); //icon
        }

        /// <summary>
        /// Returns a localized string describing an amount of money
        /// </summary>
        /// <param name="amount">Amount of money in copper (number)</param>
        /// <param name="separator">String to use as separator (', ' is used if nil) (string)</param>
        /// <example>coinText=GetCoinText(amount,"separator")</example>
        internal static string[] GetCoinText(int amount, string separator)
        {
            return Run("GetCoinText({0},\"{1}\")", amount, separator); //coinText
        }

        /// <summary>
        /// Returns a string with embedded coin icons describing an amount of money. As in most places where money amounts are shown in the UI, lesser denominations are only shown when non-zero.
        /// </summary>
        /// <param name="amount">Amount of money in copper (number)</param>
        /// <param name="fontSize">Size of the money icons. Defaults to 14. (number)</param>
        /// <example>coinText=GetCoinTextureString(amount[,fontSize])</example>
        internal static string[] GetCoinTextureString(int amount, int fontSize)
        {
            return Run("GetCoinTextureString({0}[,{1}])", amount, fontSize); //coinText
        }

        /// <summary>
        /// Returns the value of a combat rating for the player
        /// </summary>
        /// <param name="ratingIndex">Index of a rating; the following global constants are provided for convenience (number) CR_BLOCK - Block skillCR_CRIT_MELEE - Melee critical strike chanceCR_CRIT_RANGED - Ranged critical strike chanceCR_CRIT_SPELL - Spell critical strike chanceCR_CRIT_TAKEN_MELEE - Melee ResilienceCR_CRIT_TAKEN_RANGED - Ranged ResilienceCR_CRIT_TAKEN_SPELL - Spell ResilienceCR_DEFENSE_SKILL - Defense skillCR_DODGE - Dodge skillCR_HASTE_MELEE - Melee hasteCR_HASTE_RANGED - Ranged hasteCR_HASTE_SPELL - Spell hasteCR_HIT_MELEE - Melee chance to hitCR_HIT_RANGED - Ranged chance to hitCR_HIT_SPELL - Spell chance to hitCR_HIT_TAKEN_MELEE - UnusedCR_HIT_TAKEN_RANGED - UnusedCR_HIT_TAKEN_SPELL - UnusedCR_PARRY - Parry skillCR_WEAPON_SKILL - Weapon skillCR_WEAPON_SKILL_MAINHAND - Main-hand weapon skillCR_WEAPON_SKILL_OFFHAND - Offhand weapon skillCR_WEAPON_SKILL_RANGED - Ranged weapon skill</param>
        /// <example>rating=GetCombatRating(ratingIndex)</example>
        internal static string[] GetCombatRating(int ratingIndex)
        {
            return Run("GetCombatRating({0})", ratingIndex); //rating
        }

        /// <summary>
        /// Returns the percentage effect for the player's current value of a given combat rating. Used in the default UI to show tooltips with actual percentage effects (such as increased parry chance or reduced critical strike damage taken) when mousing over rating information in the Character window.
        /// </summary>
        /// <param name="ratingIndex">Index of a rating; the following global constants are provided for convenience (number) CR_BLOCK - Block skillCR_CRIT_MELEE - Melee critical strike chanceCR_CRIT_RANGED - Ranged critical strike chanceCR_CRIT_SPELL - Spell critical strike chanceCR_CRIT_TAKEN_MELEE - Melee ResilienceCR_CRIT_TAKEN_RANGED - Ranged ResilienceCR_CRIT_TAKEN_SPELL - Spell ResilienceCR_DEFENSE_SKILL - Defense skillCR_DODGE - Dodge skillCR_HASTE_MELEE - Melee hasteCR_HASTE_RANGED - Ranged hasteCR_HASTE_SPELL - Spell hasteCR_HIT_MELEE - Melee chance to hitCR_HIT_RANGED - Ranged chance to hitCR_HIT_SPELL - Spell chance to hitCR_HIT_TAKEN_MELEE - UnusedCR_HIT_TAKEN_RANGED - UnusedCR_HIT_TAKEN_SPELL - UnusedCR_PARRY - Parry skillCR_WEAPON_SKILL - Weapon skillCR_WEAPON_SKILL_MAINHAND - Main-hand weapon skillCR_WEAPON_SKILL_OFFHAND - Offhand weapon skillCR_WEAPON_SKILL_RANGED - Ranged weapon skill</param>
        /// <example>ratingBonus=GetCombatRatingBonus(ratingIndex)</example>
        internal static string[] GetCombatRatingBonus(int ratingIndex)
        {
            return Run("GetCombatRatingBonus({0})", ratingIndex); //ratingBonus
        }

        /// <summary>
        /// Returns the player's number of combo points on the current target. Only applicable to Rogues and Druids in Cat Form; always returns 0 for other classes/forms.
        /// </summary>
        /// <example>comboPoints=GetComboPoints()</example>
        internal static string[] GetComboPoints()
        {
            return Run("GetComboPoints()"); //comboPoints
        }

        /// <summary>
        /// Returns cooldown information for a non-combat pet or mount
        /// </summary>
        /// <param name="type">Type of companion (string) CRITTER - A non-combat petMOUNT - A mount</param>
        /// <param name="index">Index of a companion (between 1 and GetNumCompanions(type)) (number)</param>
        /// <example>start,duration,enable=GetCompanionCooldown("type",index)</example>
        internal static string[] GetCompanionCooldown(string type, int index)
        {
            return Run("GetCompanionCooldown(\"{0}\",{1})", type, index); //start,duration,enable
        }

        /// <summary>
        /// Returns information about a non-combat pet or mount
        /// </summary>
        /// <param name="type">
        /// Type of companion (string)
        /// CRITTER - A non-combat pet
        /// MOUNT - A mount</param>
        /// <param name="index">Index of a companion (between 1 and GetNumCompanions(type)) (number)</param>
        /// <example>creatureID,creatureName,spellID,icon,active=GetCompanionInfo("type",index)</example>
        internal static dynamic GetCompanionInfo(string type, int index)
        {
            /*
    * creatureID - Unique ID of the companion (usable with PlayerModel:SetCreature) (number)
    * creatureName - Localized name of the companion (string)
    * spellID - The "spell" for summoning the companion (usable with GetSpellLink et al) (number)
    * icon - Path to an icon texture for the companion (string)
    * active - 1 if the companion queried is currently summoned; otherwise nil (1nil)
            */
            var strs = Run("GetCompanionInfo(\"{0}\",{1})", type, index); //creatureID,creatureName,spellID,icon,active
            return strs != null && strs.Length == 5 ? new
            {
                creatureID = Convert.ToInt32(strs[0]),
                creatureName = strs[1],
                spellID = Convert.ToInt32(strs[2]),
                icon = strs[3],
                active = Convert.ToInt32(strs[4]),
            } : null;
        }

        /// <summary>
        /// Returns the comparison unit's total achievement points earned.  Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called. 
        /// </summary>
        /// <example>points=GetComparisonAchievementPoints()</example>
        internal static string[] GetComparisonAchievementPoints()
        {
            return Run("GetComparisonAchievementPoints()"); //points
        }

        /// <summary>
        /// Returns the number of achievements completed by the comparison unit within a category.  Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called.  
        /// </summary>
        /// <param name="id">The numeric ID of an achievement category (number)</param>
        /// <example>numCompleted=GetComparisonCategoryNumAchievements(id)</example>
        internal static string[] GetComparisonCategoryNumAchievements(int id)
        {
            return Run("GetComparisonCategoryNumAchievements({0})", id); //numCompleted
        }

        /// <summary>
        /// Returns the comparison unit's data for a statistic.  Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called. 
        /// </summary>
        /// <param name="id">The numeric ID of a statistic (number)</param>
        /// <example>info=GetComparisonStatistic(id)</example>
        internal static string[] GetComparisonStatistic(int id)
        {
            return Run("GetComparisonStatistic({0})", id); //info
        }

        /// <summary>
        /// Returns a list of open slots in a container. The optional argument returnTable allows for performance optimization in cases where this function is expected to be called repeatedly. Rather than creating new tables each time the function is called (eventually requiring garbage collection), an existing table can be recycled. (Note, however, that this function does not clear the table's contents; use wipe() first to guarantee consistent results.)
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="returnTable">Reference to a table to be filled with return values (table)</param>
        /// <example>slotTable=GetContainerFreeSlots(container[,returnTable])</example>
        internal static string[] GetContainerFreeSlots(string container, string returnTable)
        {
            return Run("GetContainerFreeSlots({0}[,{1}])", container, returnTable); //slotTable
        }

        /// <summary>
        /// Returns cooldown information about an item in the player's bags
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>start,duration,enable=GetContainerItemCooldown(container,slot)</example>
        internal static string[] GetContainerItemCooldown(string container, string slot)
        {
            return Run("GetContainerItemCooldown({0},{1})", container, slot); //start,duration,enable
        }

        /// <summary>
        /// Returns durability status for an item in the player's bags
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>durability,max=GetContainerItemDurability(container,slot)</example>
        internal static string[] GetContainerItemDurability(string container, string slot)
        {
            return Run("GetContainerItemDurability({0},{1})", container, slot); //durability,max
        }

        /// <summary>
        /// Returns the gems socketed in an item in the player's bags. The IDs returned refer to the gems themselves (not the enchantments they provide), and thus can be passed to GetItemInfo() to get a gem's name, quality, icon, etc.
        /// </summary>
        /// <param name="container">The index of the container (bagID)</param>
        /// <param name="slot">The slot within the given container; slots are numbered left-to-right, top-to-bottom, starting with the leftmost slot on the top row (number)</param>
        /// <example>gem1,gem2,gem3=GetContainerItemGems(container,slot)</example>
        internal static string[] GetContainerItemGems(string container, int slot)
        {
            return Run("GetContainerItemGems({0},{1})", container, slot); //gem1,gem2,gem3
        }

        /// <summary>
        /// Returns the item ID of an item in the player's bags
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>id=GetContainerItemID(container,slot)</example>
        internal static string[] GetContainerItemID(string container, string slot)
        {
            return Run("GetContainerItemID({0},{1})", container, slot); //id
        }

        /// <summary>
        /// Returns information about an item in the player's bags
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>texture,count,locked,quality,readable,lootable,link=GetContainerItemInfo(container,slot)</example>
        internal static string[] GetContainerItemInfo(string container, string slot)
        {
            return Run("GetContainerItemInfo({0},{1})", container, slot); //texture,count,locked,quality,readable,lootable,link
        }

        /// <summary>
        /// Returns a hyperlink for an item in the player's bags
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>link=GetContainerItemLink(container,slot)</example>
        internal static string[] GetContainerItemLink(string container, string slot)
        {
            return Run("GetContainerItemLink({0},{1})", container, slot); //link
        }

        /// <summary>
        /// Returns information about alternate currencies refunded for returning an item to vendors. Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase.If the given container slot is empty, contains an item which cannot be returned for an alternate currency refund, or contains an item for which the refund grace period has expired, all returns are nil.
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>money,honorPoints,arenaPoints,itemCount,refundSec=GetContainerItemPurchaseInfo(container,slot)</example>
        internal static string[] GetContainerItemPurchaseInfo(string container, string slot)
        {
            return Run("GetContainerItemPurchaseInfo({0},{1})", container, slot); //money,honorPoints,arenaPoints,itemCount,refundSec
        }

        /// <summary>
        /// Returns information about a specific currency refunded for returning an item to vendors. See GetContainerItemPurchaseInfo for more information about alternate currency refunds. 
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <param name="index">Index of the currency type; between 1 and itemCount, where itemCount is the 4th return from GetContainerItemPurchaseInfo() for the same container and slot (number)</param>
        /// <example>texture,quantity,link=GetContainerItemPurchaseItem(container,slot,index)</example>
        internal static string[] GetContainerItemPurchaseItem(string container, string slot, int index)
        {
            return Run("GetContainerItemPurchaseItem({0},{1},{2})", container, slot, index); //texture,quantity,link
        }

        /// <summary>
        /// Returns the number of free slots in a container and the types of items it can hold
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <example>freeSlots,bagType=GetContainerNumFreeSlots(container)</example>
        internal static string[] GetContainerNumFreeSlots(string container)
        {
            return Run("GetContainerNumFreeSlots({0})", container); //freeSlots,bagType
        }

        /// <summary>
        /// Returns the number of slots in one of the player's bags
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <example>numSlots=GetContainerNumSlots(container)</example>
        internal static string[] GetContainerNumSlots(string container)
        {
            return Run("GetContainerNumSlots({0})", container); //numSlots
        }

        /// <summary>
        /// Returns the position of the player's corpse on the world map. Returns 0,0 if the location of the player's corpse is not visible on the current world map.
        /// </summary>
        /// <example>corpseX,corpseY=GetCorpseMapPosition()</example>
        internal static string[] GetCorpseMapPosition()
        {
            return Run("GetCorpseMapPosition()"); //corpseX,corpseY
        }

        /// <summary>
        /// Returns the amount of time left until the player can recover their corpse. Applies to resurrection spells offered by other units, resurrecting by returning to the player's corpse as a ghost, and to resurrecting at a graveyard's spirit healer, if the player has recently died several times in short succession.
        /// </summary>
        /// <example>timeLeft=GetCorpseRecoveryDelay()</example>
        internal static string[] GetCorpseRecoveryDelay()
        {
            return Run("GetCorpseRecoveryDelay()"); //timeLeft
        }

        /// <summary>
        /// Returns the player's melee critical strike chance
        /// </summary>
        /// <example>critChance=GetCritChance()</example>
        internal static string[] GetCritChance()
        {
            return Run("GetCritChance()"); //critChance
        }

        /// <summary>
        /// Returns additional critical strike chance provided by Agility
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player and pet, Defaults to player if omitted (string, unitID)</param>
        /// <example>critChance=GetCritChanceFromAgility(["unit"])</example>
        internal static string[] GetCritChanceFromAgility(string unit)
        {
            return Run("GetCritChanceFromAgility([\"{0}\"])", unit); //critChance
        }

        /// <summary>
        /// Returns information about a currency type (or headers in the Currency UI)
        /// </summary>
        /// <param name="index">Index of a currency type in the currency list (between 1 and GetCurrencyListSize()) (number)</param>
        /// <example>name,isHeader,isExpanded,isUnused,isWatched,count,extraCurrencyType,icon,itemID=GetCurrencyListInfo(index)</example>
        internal static string[] GetCurrencyListInfo(int index)
        {
            return Run("GetCurrencyListInfo({0})", index); //name,isHeader,isExpanded,isUnused,isWatched,count,extraCurrencyType,icon,itemID
        }

        /// <summary>
        /// Returns the number of list entries to show in the Currency UI
        /// </summary>
        /// <example>numEntries=GetCurrencyListSize()</example>
        internal static string[] GetCurrencyListSize()
        {
            return Run("GetCurrencyListSize()"); //numEntries
        }

        /// <summary>
        /// Returns a number identifying the current arena season. New arena seasons begin every few months, resetting team rankings and providing new rewards.
        /// </summary>
        /// <example>season=GetCurrentArenaSeason()</example>
        internal static string[] GetCurrentArenaSeason()
        {
            return Run("GetCurrentArenaSeason()"); //season
        }

        /// <summary>
        /// Returns which set of key bindings is currently in use
        /// </summary>
        /// <example>bindingSet=GetCurrentBindingSet()</example>
        internal static string[] GetCurrentBindingSet()
        {
            return Run("GetCurrentBindingSet()"); //bindingSet
        }

        /// <summary>
        /// Returns the currently selected guild bank tab
        /// </summary>
        /// <param name="currentTab">Index of the selected guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>GetCurrentGuildBankTab(currentTab)</example>
        internal static string[] GetCurrentGuildBankTab(int currentTab)
        {
            return Run("GetCurrentGuildBankTab({0})", currentTab);
        }

        /// <summary>
        /// Returns the frame currently handling keyboard input. Typically an EditBox
        /// </summary>
        /// <example>frame=GetCurrentKeyBoardFocus()</example>
        internal static string[] GetCurrentKeyBoardFocus()
        {
            return Run("GetCurrentKeyBoardFocus()"); //frame
        }

        /// <summary>
        /// Returns an ID number for the current map zone. Currently only used in the default UI to determine whether the Wintergrasp map is showing (and if so, display the time remaining until the next battle).
        /// </summary>
        /// <example>areaID=GetCurrentMapAreaID()</example>
        internal static string[] GetCurrentMapAreaID()
        {
            return Run("GetCurrentMapAreaID()"); //areaID
        }

        /// <summary>
        /// Returns the current world map continent
        /// </summary>
        /// <example>continent=GetCurrentMapContinent()</example>
        internal static int GetCurrentMapContinent()
        {
            return Convert.ToInt32(Run("GetCurrentMapContinent()")[0]); //continent
        }

        /// <summary>
        /// Returns which map image is currently selected on the world map (for zones which use more than one map image). Used in zones with more than one "floor" or area, such as Dalaran and several Wrath of the Lich King dungeons and raids. More than one map image may contain the player's current location; if the world map has not been explicitly set to show a particular area, this returns whichever is the "best" match.
        /// </summary>
        /// <example>level=GetCurrentMapDungeonLevel()</example>
        internal static string[] GetCurrentMapDungeonLevel()
        {
            return Run("GetCurrentMapDungeonLevel()"); //level
        }

        /// <summary>
        /// Returns the current world map zone
        /// </summary>
        /// <example>zone=GetCurrentMapZone()</example>
        internal static string[] GetCurrentMapZone()
        {
            return Run("GetCurrentMapZone()"); //zone
        }

        /// <summary>
        /// Returns the index of the current multisample setting. The index returned corresponds to the individual settings described by GetMultisampleFormats() (each a set of three values).
        /// </summary>
        /// <example>index=GetCurrentMultisampleFormat()</example>
        internal static string[] GetCurrentMultisampleFormat()
        {
            return Run("GetCurrentMultisampleFormat()"); //index
        }

        /// <summary>
        /// Returns the index of the current resolution setting. For the dimensions of a resolution setting, use GetScreenResolutions().
        /// </summary>
        /// <example>index=GetCurrentResolution()</example>
        internal static string[] GetCurrentResolution()
        {
            return Run("GetCurrentResolution()"); //index
        }

        /// <summary>
        /// Returns the currently selected player title
        /// </summary>
        /// <example>currentTitle=GetCurrentTitle()</example>
        internal static string[] GetCurrentTitle()
        {
            return Run("GetCurrentTitle()"); //currentTitle
        }

        /// <summary>
        /// Returns information about the contents of the cursor
        /// </summary>
        /// <example>type,data,subType=GetCursorInfo()</example>
        internal static string[] GetCursorInfo()
        {
            return Run("GetCursorInfo()"); //type,data,subType
        }

        /// <summary>
        /// Returns the amount of money currently on the cursor
        /// </summary>
        /// <example>cursorMoney=GetCursorMoney()</example>
        internal static string[] GetCursorMoney()
        {
            return Run("GetCursorMoney()"); //cursorMoney
        }

        /// <summary>
        /// Returns the absolute position of the mouse cursor
        /// </summary>
        /// <example>cursorX,cursorY=GetCursorPosition()</example>
        internal static string[] GetCursorPosition()
        {
            return Run("GetCursorPosition()"); //cursorX,cursorY
        }

        /// <summary>
        /// Returns the value of a configuration variable. Causes an error if the named CVar does not exist.Note that all values are returned as strings: use of tonumber() may be required if using a value in a numeric context. (See also GetCVarBool() for binary values.)
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <example>result=GetCVar("cvar")</example>
        internal static string[] GetCVar(string cvar)
        {
            return Run("GetCVar(\"{0}\")", cvar); //result
        }

        /// <summary>
        /// Returns the absolute maximum value allowed for a configuration variable
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <example>min=GetCVarAbsoluteMax("cvar")</example>
        internal static string[] GetCVarAbsoluteMax(string cvar)
        {
            return Run("GetCVarAbsoluteMax(\"{0}\")", cvar); //min
        }

        /// <summary>
        /// Returns the absolute minimum value allowed for a configuration variable
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <example>min=GetCVarAbsoluteMin("cvar")</example>
        internal static string[] GetCVarAbsoluteMin(string cvar)
        {
            return Run("GetCVarAbsoluteMin(\"{0}\")", cvar); //min
        }

        /// <summary>
        /// Returns the value of a configuration variable in a format compatible with Lua conditional expressions. All configuration variables are stored as strings; many CVars represent the state of a binary flag and are stored as either "1" or "0". This function provides a convenient way to test the state of such variables without the extra syntax required to explicitly check for "1" or "0" values.
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <example>value=GetCVarBool("cvar")</example>
        internal static string[] GetCVarBool(string cvar)
        {
            return Run("GetCVarBool(\"{0}\")", cvar); //value
        }

        /// <summary>
        /// Returns the default value of a configuration variable. Causes an error if the named CVar does not exist.
        /// </summary>
        /// <param name="CVar">Name of a CVar (string)</param>
        /// <example>value=GetCVarDefault("CVar")</example>
        internal static string[] GetCVarDefault(string CVar)
        {
            return Run("Get{0}Default(\"{0}\")", CVar); //value
        }

        /// <summary>
        /// Returns information about a configuration variable
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <example>value,defaultValue,serverStoredAccountWide,serverStoredPerCharacter=GetCVarInfo("cvar")</example>
        internal static string[] GetCVarInfo(string cvar)
        {
            return Run("GetCVarInfo(\"{0}\")", cvar); //value,defaultValue,serverStoredAccountWide,serverStoredPerCharacter
        }

        /// <summary>
        /// Returns the maximum recommended value for a configuration variable. Used in the default UI to set the upper bounds for options controlled by slider widgets.
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <example>max=GetCVarMax("cvar")</example>
        internal static string[] GetCVarMax(string cvar)
        {
            return Run("GetCVarMax(\"{0}\")", cvar); //max
        }

        /// <summary>
        /// Returns the minimum recommended value for a configuration variable. Used in the default UI to set the lower bounds for options controlled by slider widgets.
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <example>min=GetCVarMin("cvar")</example>
        internal static string[] GetCVarMin(string cvar)
        {
            return Run("GetCVarMin(\"{0}\")", cvar); //min
        }

        /// <summary>
        /// Returns the number of daily quests the player has completed today. The daily quest period resets at or around 3:00 AM server time on most realms.
        /// </summary>
        /// <example>dailyQuestsComplete=GetDailyQuestsCompleted()</example>
        internal static string[] GetDailyQuestsCompleted()
        {
            return Run("GetDailyQuestsCompleted()"); //dailyQuestsComplete
        }

        /// <summary>
        /// Returns the index of the basic statistic that provides increased physical damage. Unused in the default UI.
        /// </summary>
        /// <example>bonusStat=GetDamageBonusStat()</example>
        internal static string[] GetDamageBonusStat()
        {
            return Run("GetDamageBonusStat()"); //bonusStat
        }

        /// <summary>
        /// Returns the location of the graveyard where the player's spirit will appear upon release. Returns 0,0 if the player is not dead or the graveyard's location is not visible on the current world map.
        /// </summary>
        /// <example>graveyardX,graveyardY=GetDeathReleasePosition()</example>
        internal static string[] GetDeathReleasePosition()
        {
            return Run("GetDeathReleasePosition()"); //graveyardX,graveyardY
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetDebugStats()</example>
        internal static string[] GetDebugStats()
        {
            return Run("GetDebugStats()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetDebugZoneMap()</example>
        internal static string[] GetDebugZoneMap()
        {
            return Run("GetDebugZoneMap()");
        }

        /// <summary>
        /// Returns the name of the player character's default language. This is the language used in the chat system (Common or Orcish, as opposed to Taurahe, Darnassian, etc), not the real-world language of the client or server. 
        /// </summary>
        /// <example>language=GetDefaultLanguage()</example>
        internal static string[] GetDefaultLanguage()
        {
            return Run("GetDefaultLanguage()"); //language
        }

        /// <summary>
        /// Returns the player's chance to dodge melee attacks
        /// </summary>
        /// <example>chance=GetDodgeChance()</example>
        internal static string[] GetDodgeChance()
        {
            return Run("GetDodgeChance()"); //chance
        }

        /// <summary>
        /// Returns the 5 player selected dungeon difficulty
        /// </summary>
        /// <example>difficulty=GetDungeonDifficulty()</example>
        internal static string[] GetDungeonDifficulty()
        {
            return Run("GetDungeonDifficulty()"); //difficulty
        }

        /// <summary>
        /// Returns information about an equipment set (specified by index)
        /// </summary>
        /// <param name="index">Index of an equipment set (between 1 and GetNumEquipmentSets()) (number)</param>
        /// <example>name,icon,setID=GetEquipmentSetInfo(index)</example>
        internal static string[] GetEquipmentSetInfo(int index)
        {
            return Run("GetEquipmentSetInfo({0})", index); //name,icon,setID
        }

        /// <summary>
        /// Returns information about an equipment set
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <example>icon,setID=GetEquipmentSetInfoByName("name")</example>
        internal static string[] GetEquipmentSetInfoByName(string name)
        {
            return Run("GetEquipmentSetInfoByName(\"{0}\")", name); //icon,setID
        }

        /// <summary>
        /// Returns a table listing the items in an equipment set
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <example>itemIDs=GetEquipmentSetItemIDs("name")</example>
        internal static string[] GetEquipmentSetItemIDs(string name)
        {
            return Run("GetEquipmentSetItemIDs(\"{0}\")", name); //itemIDs
        }

        /// <summary>
        /// Returns a table listing the locations of the items in an equipment set
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <example>itemIDs=GetEquipmentSetLocations("name")</example>
        internal static string[] GetEquipmentSetLocations(string name)
        {
            return Run("GetEquipmentSetLocations(\"{0}\")", name); //itemIDs
        }

        /// <summary>
        /// Returns the current error handler function
        /// </summary>
        /// <example>handler=geterrorhandler()</example>
        internal static string[] geterrorhandler()
        {
            return Run("geterrorhandler()"); //handler
        }

        /// <summary>
        /// Returns information about the CPU usage of an event. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.
        /// </summary>
        /// <param name="event">Name of an event; if omitted, returns usage information for all events (string)</param>
        /// <example>usage,numEvents=GetEventCPUUsage(["event"])</example>
        internal static string[] GetEventCPUUsage(string Event)
        {
            return Run("GetEventCPUUsage([\"{0}\"])", Event); //usage,numEvents
        }

        /// <summary>
        /// Returns a list of installed localization packs for the Wow client
        /// </summary>
        /// <example>...=GetExistingLocales()</example>
        internal static string[] GetExistingLocales()
        {
            return Run("GetExistingLocales()"); //...
        }

        /// <summary>
        /// Returns information about a permanently socketed gem. If the given socket contains a permanently socketed gem, returns information for that gem (even if a new gem has been dropped in the socket to overwrite the existing gem, but has not yet been confirmed). If the socket is empty, returns nil.Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <param name="index">Index of a gem socket (between 1 and GetNumSockets()) (number)</param>
        /// <example>name,texture,name=GetExistingSocketInfo(index)</example>
        internal static string[] GetExistingSocketInfo(int index)
        {
            return Run("GetExistingSocketInfo({0})", index); //name,texture,name
        }

        /// <summary>
        /// Returns a hyperlink for a permanently socketed gem. If the given socket contains a permanently socketed gem, returns an item link for that gem (even if a new gem has been dropped in the socket to overwrite the existing gem, but has not yet been confirmed). If the socket is empty, returns nil.Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <param name="index">Index of a gem socket (between 1 and GetNumSockets()) (number)</param>
        /// <example>link=GetExistingSocketLink(index)</example>
        internal static string[] GetExistingSocketLink(int index)
        {
            return Run("GetExistingSocketLink({0})", index); //link
        }

        /// <summary>
        /// Returns the player's current expertise value
        /// </summary>
        /// <example>expertise=GetExpertise()</example>
        internal static string[] GetExpertise()
        {
            return Run("GetExpertise()"); //expertise
        }

        /// <summary>
        /// Returns the reduction in chance to be dodged or parried conferred by the player's expertise value
        /// </summary>
        /// <example>expertisePerc,offhandExpertisePercent=GetExpertisePercent()</example>
        internal static string[] GetExpertisePercent()
        {
            return Run("GetExpertisePercent()"); //expertisePerc,offhandExpertisePercent
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetExtendedItemInfo()</example>
        internal static string[] GetExtendedItemInfo()
        {
            return Run("GetExtendedItemInfo()");
        }

        /// <summary>
        /// Returns a token used for displaying facial feature customization options. The token referred to by this function can be used to look up a global variable containing localized names for the customization options available to the player's race at character creation time and in the Barbershop UI; see example.
        /// </summary>
        /// <example>token=GetFacialHairCustomization()</example>
        internal static string[] GetFacialHairCustomization()
        {
            return Run("GetFacialHairCustomization()"); //token
        }

        /// <summary>
        /// Returns information about a faction or header listing
        /// </summary>
        /// <param name="index">The index of the faction in the Reputation window (number)</param>
        /// <example>name,description,standingID,barMin,barMax,barValue,atWarWith,canToggleAtWar,isHeader,isCollapsed,hasRep,isWatched,isChild=GetFactionInfo(index)</example>
        internal static string[] GetFactionInfo(int index)
        {
            return Run("GetFactionInfo({0})", index); //name,description,standingID,barMin,barMax,barValue,atWarWith,canToggleAtWar,isHeader,isCollapsed,hasRep,isWatched,isChild
        }

        /// <summary>
        /// Returns the maximum distance at which terrain is drawn. Corresponds to the "View Distance" slider in the default UI's Video Options pane, which allows settings between 177 and 1277 yards.Functional but no longer used by the default UI; see the farclip CVar instead.
        /// </summary>
        /// <example>distance=GetFarclip()</example>
        internal static string[] GetFarclip()
        {
            return Run("GetFarclip()"); //distance
        }

        /// <summary>
        /// Returns the environment for a function (or the global environment). If the environment has a __environment metatable, that value is returned instead.
        /// </summary>
        /// <param name="f">A function (function)</param>
        /// <param name="stackLevel">Level of a function in the calling stack (number)</param>
        /// <example>env=getfenv([f])orgetfenv([stackLevel])</example>
        internal static string[] getfenv(string f, int stackLevel)
        {
            return Run("get{0}env([{0}])orget{0}env([{1}])", f, stackLevel); //env
        }

        /// <summary>
        /// Returns the index of the first non-header in the trade skill listing
        /// </summary>
        /// <example>index=GetFirstTradeSkill()</example>
        internal static string[] GetFirstTradeSkill()
        {
            return Run("GetFirstTradeSkill()"); //index
        }

        /// <summary>
        /// Returns information about CPU usage by a frame's script handlers. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.
        /// </summary>
        /// <param name="frame">A Frame object (table)</param>
        /// <param name="includeChildren">True to include CPU usage by children of the frame; false to include only the frame itself (boolean)</param>
        /// <example>usage,calls=GetFrameCPUUsage(frame,includeChildren)</example>
        internal static string[] GetFrameCPUUsage(string frame, string includeChildren)
        {
            return Run("GetFrameCPUUsage({0},{1})", frame, includeChildren); //usage,calls
        }

        /// <summary>
        /// Returns the number of frames per second rendered by the client
        /// </summary>
        /// <example>framerate=GetFramerate()</example>
        internal static string[] GetFramerate()
        {
            return Run("GetFramerate()"); //framerate
        }

        /// <summary>
        /// Returns all frames registered for a given event
        /// </summary>
        /// <param name="event">An event name (string)</param>
        /// <example>...=GetFramesRegisteredForEvent("event")</example>
        internal static string[] GetFramesRegisteredForEvent(string Event)
        {
            return Run("GetFramesRegisteredForEvent(\"{0}\")", Event); //...
        }

        /// <summary>
        /// Returns information about a character on the player's friends list
        /// </summary>
        /// <param name="index">Index of a character in the Friends list (between 1 and GetNumFriends()) (number)</param>
        /// <example>name,level,class,area,connected,status,note,RAF=GetFriendInfo(index)</example>
        internal static string[] GetFriendInfo(int index)
        {
            return Run("GetFriendInfo({0})", index); //name,level,class,area,connected,status,note,RAF
        }

        /// <summary>
        /// Returns information about CPU usage by a function. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.
        /// </summary>
        /// <param name="function">A function reference (function)</param>
        /// <param name="includeSubroutines">True to include time spent in other functions called by the given function; false to count only time spent in the function body (boolean)</param>
        /// <example>usage,calls=GetFunctionCPUUsage(function,includeSubroutines)</example>
        internal static string[] GetFunctionCPUUsage(string function, string includeSubroutines)
        {
            return Run("GetFunctionCPUUsage({0},{1})", function, includeSubroutines); //usage,calls
        }

        /// <summary>
        /// Returns the current realm (server) time
        /// </summary>
        /// <example>hour,minute=GetGameTime()</example>
        internal static string[] GetGameTime()
        {
            return Run("GetGameTime()"); //hour,minute
        }

        /// <summary>
        /// Returns the current display gamma setting. Gamma value determines the contrast between lighter and darker portions of the game display; for a detailed explanation see the Wikipedia entry on Gamma correction entry.
        /// </summary>
        /// <example>gamma=GetGamma()</example>
        internal static string[] GetGamma()
        {
            return Run("GetGamma()"); //gamma
        }

        /// <summary>
        /// Returns the value of a global variable. Often used in the default UI in cases where several similar names are systematically constructed. Examples:In a script attached to a frame template, getglobal(self:GetName().."Icon") can refer to the Texture whose name is defined in XML as $parentIcon.Several sets of localized string tokens follow standard formats: e.g. getglobal("ITEM_QUALITY"..quality.."_DESC) returns the name for the numeric quality.Equivalent to _G.name or _G["name"].
        /// </summary>
        /// <param name="name">Name of a global variable (string)</param>
        /// <example>value=getglobal("name")</example>
        internal static string[] getglobal(string name)
        {
            return Run("getglobal(\"{0}\")", name); //value
        }

        /// <summary>
        /// Gets a hyperlink for the contents of a glyph socket. Glyph links are distinct from item and spell links: e.g. "|cff66bbff|Hglyph:21:361|h[Glyph of Hunter's Mark]|h|r".
        /// </summary>
        /// <param name="socket">Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex)</param>
        /// <param name="talentGroup">Which set of glyphs to query, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>link=GetGlyphLink(socket,talentGroup)</example>
        internal static string[] GetGlyphLink(string socket, int talentGroup)
        {
            return Run("GetGlyphLink({0},{1})", socket, talentGroup); //link
        }

        /// <summary>
        /// Returns information about a glyph socket and its contents. The spell ID referenced in the third return glyphSpell refers to the spell used to put the glyph in the socket -- not the Inscription spell that creates a glyph item, but the spell associated with that item's "Use:" effect.
        /// </summary>
        /// <param name="socket">Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex)</param>
        /// <param name="talentGroup">Which set of glyphs to query, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>enabled,glyphType,glyphSpell,icon=GetGlyphSocketInfo(socket,talentGroup)</example>
        internal static string[] GetGlyphSocketInfo(string socket, int talentGroup)
        {
            return Run("GetGlyphSocketInfo({0},{1})", socket, talentGroup); //enabled,glyphType,glyphSpell,icon
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetGMStatus()</example>
        internal static string[] GetGMStatus()
        {
            return Run("GetGMStatus()");
        }

        /// <summary>
        /// Requests GM ticket status from the server. The UPDATE_TICKET event fires when data is ready.
        /// </summary>
        /// <example>GetGMTicket()</example>
        internal static string[] GetGMTicket()
        {
            return Run("GetGMTicket()");
        }

        /// <summary>
        /// Returns a list of available GM ticket categories. No longer used in the current GM Help UI.
        /// </summary>
        /// <example>...=GetGMTicketCategories()</example>
        internal static string[] GetGMTicketCategories()
        {
            return Run("GetGMTicketCategories()"); //...
        }

        /// <summary>
        /// Returns a list of quests which can be turned in to the current Gossip NPC. These quests are displayed with a question mark icon in the default UI's GossipFrame.
        /// </summary>
        /// <example>name,level,isTrivial,...=GetGossipActiveQuests()</example>
        internal static string[] GetGossipActiveQuests()
        {
            return Run("GetGossipActiveQuests()"); //name,level,isTrivial,...
        }

        /// <summary>
        /// Returns a list of quests available from the current Gossip NPC. These quests are displayed with an exclamation mark icon in the default UI's GossipFrame.
        /// </summary>
        /// <example>name,level,isTrivial,...=GetGossipAvailableQuests()</example>
        internal static string[] GetGossipAvailableQuests()
        {
            return Run("GetGossipAvailableQuests()"); //name,level,isTrivial,...
        }

        /// <summary>
        /// Returns a list of interaction options for the Gossip NPC
        /// </summary>
        /// <example>text,gossipType,...=GetGossipOptions()</example>
        internal static string[] GetGossipOptions()
        {
            return Run("GetGossipOptions()"); //text,gossipType,...
        }

        /// <summary>
        /// Returns greeting or other text to be displayed in an NPC dialog
        /// </summary>
        /// <example>text=GetGossipText()</example>
        internal static string[] GetGossipText()
        {
            return Run("GetGossipText()"); //text
        }

        /// <summary>
        /// Returns the greeting text displayed for quest NPCs with multiple quests. Not used often; most quest NPCs offering multiple quests (and/or other options) use the Gossip functions to provide a greeting (see GetGossipText()).
        /// </summary>
        /// <example>greetingText=GetGreetingText()</example>
        internal static string[] GetGreetingText()
        {
            return Run("GetGreetingText()"); //greetingText
        }

        /// <summary>
        /// Returns the total number of points spent in the Talent UI's preview mode. This function only counts points spent in the preview mode, not those actually learned.
        /// </summary>
        /// <param name="isPet">true to query talent info for the player's pet, false to query talent info for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>pointsSpent=GetGroupPreviewTalentPointsSpent(isPet,talentGroup)</example>
        internal static string[] GetGroupPreviewTalentPointsSpent(string isPet, int talentGroup)
        {
            return Run("GetGroupPreviewTalentPointsSpent({0},{1})", isPet, talentGroup); //pointsSpent
        }

        /// <summary>
        /// Returns information about the contents of a guild bank item slot
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name="slot">Index of an item slot in the guild bank tab (between 1 and MAX_GUILDBANK_SLOTS_PER_TAB) (number)</param>
        /// <example>texture,count,locked=GetGuildBankItemInfo(tab,slot)</example>
        internal static string[] GetGuildBankItemInfo(int tab, int slot)
        {
            return Run("GetGuildBankItemInfo({0},{1})", tab, slot); //texture,count,locked
        }

        /// <summary>
        /// Returns a hyperlink for an item in the guild bank
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name="slot">Index of an item slot in the guild bank tab (between 1 and MAX_GUILDBANK_SLOTS_PER_TAB) (number)</param>
        /// <example>item=GetGuildBankItemLink(tab,slot)</example>
        internal static string[] GetGuildBankItemLink(int tab, int slot)
        {
            return Run("GetGuildBankItemLink({0},{1})", tab, slot); //item
        }

        /// <summary>
        /// Returns the amount of money in the guild bank. The return value is cached and returns the last value seen when not interacting with a guild bank vault.  This cache works across characters, and is updated when the GUILDBANK_UPDATE_MONEY or GUILDBANKFRAME_OPENED event fires. If no player character has accessed a guild bank since the game client was launched, this function returns 0.
        /// </summary>
        /// <example>guildBankMoney=GetGuildBankMoney()</example>
        internal static string[] GetGuildBankMoney()
        {
            return Run("GetGuildBankMoney()"); //guildBankMoney
        }

        /// <summary>
        /// Returns information about a transaction in the guild bank money log
        /// </summary>
        /// <param name="index">Index of a transaction in the money log (between 1 and GetNumGuildBankMoneyTransactions()) (number)</param>
        /// <example>type,name,year,month,day,hour=GetGuildBankMoneyTransaction(index)</example>
        internal static string[] GetGuildBankMoneyTransaction(int index)
        {
            return Run("GetGuildBankMoneyTransaction({0})", index); //type,name,year,month,day,hour
        }

        /// <summary>
        /// Returns the cost of the next available guild bank tab
        /// </summary>
        /// <example>tabCost=GetGuildBankTabCost()</example>
        internal static string[] GetGuildBankTabCost()
        {
            return Run("GetGuildBankTabCost()"); //tabCost
        }

        /// <summary>
        /// Returns information about a guild bank tab
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>name,icon,isViewable,canDeposit,numWithdrawals,remainingWithdrawals=GetGuildBankTabInfo(tab)</example>
        internal static string[] GetGuildBankTabInfo(int tab)
        {
            return Run("GetGuildBankTabInfo({0})", tab); //name,icon,isViewable,canDeposit,numWithdrawals,remainingWithdrawals
        }

        /// <summary>
        /// Returns information about guild bank tab privileges for the guild rank currently being edited. Used in the default UI's guild control panel.
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>canView,canDeposit,numWithdrawals=GetGuildBankTabPermissions(tab)</example>
        internal static string[] GetGuildBankTabPermissions(int tab)
        {
            return Run("GetGuildBankTabPermissions({0})", tab); //canView,canDeposit,numWithdrawals
        }

        /// <summary>
        /// Returns text associated with a guild bank tab. Only returns valid data after QueryGuildBankText() has been called to retrieve the text from the server and the following GUILDBANK_UPDATE_TEXT event has fired.
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>text=GetGuildBankText(tab)</example>
        internal static string[] GetGuildBankText(int tab)
        {
            return Run("GetGuildBankText({0})", tab); //text
        }

        /// <summary>
        /// Returns information about a transaction in the log for a guild bank tab. Only returns valid information following the GUILDBANKLOG_UPDATE event which fires after calling QueryGuildBankLog().
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name="index">Index of a log entry (between 1 and GetNumGuildBankTransactions(tab)) (number)</param>
        /// <example>type,name,itemLink,count,tab1,tab2,year,month,day,hour=GetGuildBankTransaction(tab,index)</example>
        internal static string[] GetGuildBankTransaction(int tab, int index)
        {
            return Run("GetGuildBankTransaction({0},{1})", tab, index); //type,name,itemLink,count,{0}1,{0}2,year,month,day,hour
        }

        /// <summary>
        /// Returns the guild bank money withdrawal limit for the guild rank currently being edited
        /// </summary>
        /// <example>goldWithdrawLimit=GetGuildBankWithdrawLimit()</example>
        internal static string[] GetGuildBankWithdrawLimit()
        {
            return Run("GetGuildBankWithdrawLimit()"); //goldWithdrawLimit
        }

        /// <summary>
        /// Returns the amount of money the player is allowed to withdraw from the guild bank per day
        /// </summary>
        /// <example>withdrawLimit=GetGuildBankWithdrawMoney()</example>
        internal static string[] GetGuildBankWithdrawMoney()
        {
            return Run("GetGuildBankWithdrawMoney()"); //withdrawLimit
        }

        /// <summary>
        /// Returns the cost to purchase a guild charter. Usable if the player is interacting with a guild registrar (i.e. between the GUILD_REGISTRAR_SHOW and GUILD_REGISTRAR_CLOSED events).
        /// </summary>
        /// <example>cost=GetGuildCharterCost()</example>
        internal static string[] GetGuildCharterCost()
        {
            return Run("GetGuildCharterCost()"); //cost
        }

        /// <summary>
        /// Returns information about an entry in the guild event log. Only returns valid data after calling QueryGuildEventLog() and the following GUILD_EVENT_LOG_UPDATE event has fired.
        /// </summary>
        /// <param name="index">Index of an entry in the guild event log (between 1 and GetNumGuildEvents()) (number)</param>
        /// <example>type,player1,player2,rank,year,month,day,hour=GetGuildEventInfo(index)</example>
        internal static string[] GetGuildEventInfo(int index)
        {
            return Run("GetGuildEventInfo({0})", index); //type,player1,player2,rank,year,month,day,hour
        }

        /// <summary>
        /// Returns a unit's guild affiliation
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>guildName,guildRankName,guildRankIndex=GetGuildInfo("unit")orGetGuildInfo("name")</example>
        internal static string[] GetGuildInfo(string unit, string name)
        {
            return Run("GetGuildInfo(\"{0}\")orGetGuildInfo(\"{1}\")", unit, name); //guildName,guildRankName,guildRankIndex
        }

        /// <summary>
        /// Returns guild information text. Only returns valid data after calling GuildRoster() and the following GUILD_ROSTER_UPDATE event has fired.This text appears when clicking the "Guild Information" button in the default UI's Guild window.
        /// </summary>
        /// <example>guildInfoText=GetGuildInfoText()</example>
        internal static string[] GetGuildInfoText()
        {
            return Run("GetGuildInfoText()"); //guildInfoText
        }

        /// <summary>
        /// Returns information about the selected player in your guild roster.. Only returns valid data after calling GuildRoster() and the following GUILD_ROSTER_UPDATE event has fired.
        /// </summary>
        /// <param name="index">Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number)</param>
        /// <example>name,rank,rankIndex,level,class,zone,note,officernote,online,status,classFileName=GetGuildRosterInfo(index)</example>
        internal static string[] GetGuildRosterInfo(int index)
        {
            return Run("GetGuildRosterInfo({0})", index); //name,rank,rankIndex,level,class,zone,note,officernote,online,status,classFileName
        }

        /// <summary>
        /// Returns the amount of time since a guild member was last online. Only returns valid data after calling GuildRoster() and the following GUILD_ROSTER_UPDATE event has fired.
        /// </summary>
        /// <param name="index">Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number)</param>
        /// <example>years,months,days,hours=GetGuildRosterLastOnline(index)</example>
        internal static string[] GetGuildRosterLastOnline(int index)
        {
            return Run("GetGuildRosterLastOnline({0})", index); //years,months,days,hours
        }

        /// <summary>
        /// Returns the Message of the Day for the player's guild
        /// </summary>
        /// <example>guildMOTD=GetGuildRosterMOTD()</example>
        internal static string[] GetGuildRosterMOTD()
        {
            return Run("GetGuildRosterMOTD()"); //guildMOTD
        }

        /// <summary>
        /// Returns the index of the selected member in the guild roster. Selection in the guild roster is used only for display in the default UI and has no effect on other Guild APIs.
        /// </summary>
        /// <example>index=GetGuildRosterSelection()</example>
        internal static string[] GetGuildRosterSelection()
        {
            return Run("GetGuildRosterSelection()"); //index
        }

        /// <summary>
        /// Returns whether the guild roster lists offline members
        /// </summary>
        /// <example>showOffline=GetGuildRosterShowOffline()</example>
        internal static string[] GetGuildRosterShowOffline()
        {
            return Run("GetGuildRosterShowOffline()"); //showOffline
        }

        /// <summary>
        /// Returns the textures that comprise the player's guild tabard. Returns nil if the player is not in a guild.
        /// </summary>
        /// <example>tabardBackgroundUpper,tabardBackgroundLower,tabardEmblemUpper,tabardEmblemLower,tabardBorderUpper,tabardBorderLower=GetGuildTabardFileNames()</example>
        internal static string[] GetGuildTabardFileNames()
        {
            return Run("GetGuildTabardFileNames()"); //tabardBackgroundUpper,tabardBackgroundLower,tabardEmblemUpper,tabardEmblemLower,tabardBorderUpper,tabardBorderLower
        }

        /// <summary>
        /// Returns a token used for displaying "hair" customization options. The token referred to by this function can be used to look up a global variable containing localized names for the customization options available to the player's race at character creation time and in the Barbershop UI; see example.
        /// </summary>
        /// <example>token=GetHairCustomization()</example>
        internal static string[] GetHairCustomization()
        {
            return Run("GetHairCustomization()"); //token
        }

        /// <summary>
        /// Returns the player's amount of honor points
        /// </summary>
        /// <example>honorPoints,maxHonor=GetHonorCurrency()</example>
        internal static string[] GetHonorCurrency()
        {
            return Run("GetHonorCurrency()"); //honorPoints,maxHonor
        }

        /// <summary>
        /// Returns the name of a character on the ignore list
        /// </summary>
        /// <param name="index">Index of an entry in the ignore list (between 1 and GetNumIgnores()) (string)</param>
        /// <example>name=GetIgnoreName("index")</example>
        internal static string[] GetIgnoreName(string index)
        {
            return Run("GetIgnoreName(\"{0}\")", index); //name
        }

        /// <summary>
        /// Returns information about a message in the player's inbox
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>packageIcon,stationeryIcon,sender,subject,money,CODAmount,daysLeft,itemCount,wasRead,wasReturned,textCreated,canReply,isGM,itemQuantity=GetInboxHeaderInfo(mailID)</example>
        internal static string[] GetInboxHeaderInfo(int mailID)
        {
            return Run("GetInboxHeaderInfo({0})", mailID); //packageIcon,stationeryIcon,sender,subject,money,CODAmount,daysLeft,itemCount,wasRead,wasReturned,textCreated,canReply,isGM,itemQuantity
        }

        /// <summary>
        /// Returns auction house invoice information for a mail message
        /// </summary>
        /// <param name="index">Index of the mail message in the inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>invoiceType,itemName,playerName,bid,buyout,deposit,consignment,moneyDelay,etaHour,etaMin=GetInboxInvoiceInfo(index)</example>
        internal static string[] GetInboxInvoiceInfo(int index)
        {
            return Run("GetInboxInvoiceInfo({0})", index); //invoiceType,itemName,playerName,bid,buyout,deposit,consignment,moneyDelay,etaHour,etaMin
        }

        /// <summary>
        /// Returns information for an item attached to a message in the player's inbox
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <param name="attachmentIndex">Index of an attachment to the message (between 1 and select(8,GetInboxHeaderInfo(mailID))) (number)</param>
        /// <example>name,itemTexture,count,quality,canUse=GetInboxItem(mailID,attachmentIndex)</example>
        internal static string[] GetInboxItem(int mailID, int attachmentIndex)
        {
            return Run("GetInboxItem({0},{1})", mailID, attachmentIndex); //name,itemTexture,count,quality,canUse
        }

        /// <summary>
        /// Returns a hyperlink for an item attached to a message in the player's inbox
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <param name="attachmentIndex">Index of an attachment to the message (between 1 and select(8,GetInboxHeaderInfo(mailID))) (number)</param>
        /// <example>itemlink=GetInboxItemLink(mailID,attachmentIndex)</example>
        internal static string[] GetInboxItemLink(int mailID, int attachmentIndex)
        {
            return Run("GetInboxItemLink({0},{1})", mailID, attachmentIndex); //itemlink
        }

        /// <summary>
        /// Returns the number of messages in the player's inbox
        /// </summary>
        /// <example>numItems=GetInboxNumItems()</example>
        internal static string[] GetInboxNumItems()
        {
            return Run("GetInboxNumItems()"); //numItems
        }

        /// <summary>
        /// Returns information about the text of an inbox message
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>bodyText,texture,isTakeable,isInvoice=GetInboxText(mailID)</example>
        internal static string[] GetInboxText(int mailID)
        {
            return Run("GetInboxText({0})", mailID); //bodyText,texture,isTakeable,isInvoice
        }

        /// <summary>
        /// Returns arena team information about the currently inspected unit. Only available if data has been downloaded from the server; see HasInspectHonorData() and RequestInspectHonorData().
        /// </summary>
        /// <param name="team">Index of one of the unit's arena teams (number, arenaTeamID)</param>
        /// <example>teamName,teamSize,teamRating,teamPlayed,teamWins,playerPlayed,playerRating,bg_red,bg_green,bg_blue,emblem,emblem_red,emblem_green,emblem_blue,border,border_red,border_green,border_blue=GetInspectArenaTeamData(team)</example>
        internal static string[] GetInspectArenaTeamData(string team)
        {
            return Run("GetInspectArenaTeamData({0})", team); //{0}Name,{0}Size,{0}Rating,{0}Played,{0}Wins,playerPlayed,playerRating,bg_red,bg_green,bg_blue,emblem,emblem_red,emblem_green,emblem_blue,border,border_red,border_green,border_blue
        }

        /// <summary>
        /// Returns PvP honor information about the currently inspected unit. Only available if data has been downloaded from the server; see HasInspectHonorData() and RequestInspectHonorData().
        /// </summary>
        /// <example>todayHK,todayHonor,yesterdayHK,yesterdayHonor,lifetimeHK,lifetimeRank=GetInspectHonorData()</example>
        internal static string[] GetInspectHonorData()
        {
            return Run("GetInspectHonorData()"); //todayHK,todayHonor,yesterdayHK,yesterdayHonor,lifetimeHK,lifetimeRank
        }

        /// <summary>
        /// Returns the amount of time left until the player is removed from the current instance. Used when the player is in an instance he doesn't own; e.g. if the player enters an instance with a group and is then removed from the group.
        /// </summary>
        /// <example>timeleft=GetInstanceBootTimeRemaining()</example>
        internal static string[] GetInstanceBootTimeRemaining()
        {
            return Run("GetInstanceBootTimeRemaining()"); //timeleft
        }

        /// <summary>
        /// Returns difficulty setting for the current dungeon/raid instance. This returns the difficulty setting for the instance the player is currently in; not to be confused with GetCurrentDungeonDifficulty(), which is the current group's setting for entering new instances, nor with GetDefaultDungeonDifficulty(), which is the player's preference for dungeon difficulty and may differ from that of the current party leader.
        /// </summary>
        /// <example>difficulty=GetInstanceDifficulty()</example>
        internal static string[] GetInstanceDifficulty()
        {
            return Run("GetInstanceDifficulty()"); //difficulty
        }

        /// <summary>
        /// Returns instance information about the current area
        /// </summary>
        /// <example>name,type,difficulty,difficultyName,maxPlayers,playerDifficulty,isDynamicInstance=GetInstanceInfo()</example>
        internal static string[] GetInstanceInfo()
        {
            return Run("GetInstanceInfo()"); //name,type,difficulty,difficultyName,maxPlayers,playerDifficulty,isDynamicInstance
        }

        /// <summary>
        /// Returns time remaining before the player is saved to a recently entered instance. Applies when the player enters an instance to which other members of her group are saved; if the player leaves the instance (normally or with RespondInstanceLock(false)) within this time limit she will not be saved to the instance.
        /// </summary>
        /// <example>seconds=GetInstanceLockTimeRemaining()</example>
        internal static string[] GetInstanceLockTimeRemaining()
        {
            return Run("GetInstanceLockTimeRemaining()"); //seconds
        }

        /// <summary>
        /// Returns the durability warning status of an equipped item. Looking up the status returned by this function in the INVENTORY_ALERT_COLORS table provides color values, used in the default UI to highlight parts of the DurabiltyFrame (i.e. the "armored man" image) that appears when durability is low.
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>status=GetInventoryAlertStatus(slot)</example>
        internal static string[] GetInventoryAlertStatus(string slot)
        {
            return Run("GetInventoryAlertStatus({0})", slot); //status
        }

        /// <summary>
        /// Returns whether an equipped item is broken
        /// </summary>
        /// <param name="unit">A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>isBroken=GetInventoryItemBroken("unit",slot)</example>
        internal static string[] GetInventoryItemBroken(string unit, string slot)
        {
            return Run("GetInventoryItemBroken(\"{0}\",{1})", unit, slot); //isBroken
        }

        /// <summary>
        /// Returns cooldown information about an equipped item
        /// </summary>
        /// <param name="unit">A unit to query; only valid for 'player' (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>start,duration,enable=GetInventoryItemCooldown("unit",slot)</example>
        internal static string[] GetInventoryItemCooldown(string unit, string slot)
        {
            return Run("GetInventoryItemCooldown(\"{0}\",{1})", unit, slot); //start,duration,enable
        }

        /// <summary>
        /// Returns the number of items stacked in an inventory slot. Currently only returns meaningful information for the ammo slot.
        /// </summary>
        /// <param name="unit">A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>count=GetInventoryItemCount("unit",slot)</example>
        internal static string[] GetInventoryItemCount(string unit, string slot)
        {
            return Run("GetInventoryItemCount(\"{0}\",{1})", unit, slot); //count
        }

        /// <summary>
        /// Returns the current durability level of an equipped item
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>durability,max=GetInventoryItemDurability(slot)</example>
        internal static string[] GetInventoryItemDurability(string slot)
        {
            return Run("GetInventoryItemDurability({0})", slot); //durability,max
        }

        /// <summary>
        /// Returns the gems socketed in an equipped item. The IDs returned refer to the gems themselves (not the enchantments they provide), and thus can be passed to GetItemInfo() to get a gem's name, quality, icon, etc.
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>gem1,gem2,gem3=GetInventoryItemGems(slot)</example>
        internal static string[] GetInventoryItemGems(string slot)
        {
            return Run("GetInventoryItemGems({0})", slot); //gem1,gem2,gem3
        }

        /// <summary>
        /// Returns the item ID of an equipped item
        /// </summary>
        /// <param name="unit">A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>id=GetInventoryItemID("unit",slot)</example>
        internal static string[] GetInventoryItemID(string unit, string slot)
        {
            return Run("GetInventoryItemID(\"{0}\",{1})", unit, slot); //id
        }

        /// <summary>
        /// Returns an item link for an equipped item
        /// </summary>
        /// <param name="unit">A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>link=GetInventoryItemLink("unit",slot)</example>
        internal static string[] GetInventoryItemLink(string unit, string slot)
        {
            return Run("GetInventoryItemLink(\"{0}\",{1})", unit, slot); //link
        }

        /// <summary>
        /// Returns the quality level of an equipped item
        /// </summary>
        /// <param name="unit">A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>quality=GetInventoryItemQuality("unit",slot)</example>
        internal static string[] GetInventoryItemQuality(string unit, string slot)
        {
            return Run("GetInventoryItemQuality(\"{0}\",{1})", unit, slot); //quality
        }

        /// <summary>
        /// Returns a list of items that can be equipped in a given inventory slot
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>availableItems=GetInventoryItemsForSlot(slot)</example>
        internal static string[] GetInventoryItemsForSlot(string slot)
        {
            return Run("GetInventoryItemsForSlot({0})", slot); //availableItems
        }

        /// <summary>
        /// Returns the icon texture for an equipped item
        /// </summary>
        /// <param name="unit">A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>texture=GetInventoryItemTexture("unit",slot)</example>
        internal static string[] GetInventoryItemTexture(string unit, string slot)
        {
            return Run("GetInventoryItemTexture(\"{0}\",{1})", unit, slot); //texture
        }

        /// <summary>
        /// Returns information about an inventory slot
        /// </summary>
        /// <param name="slotName">Name of an inventory slot to query (string) AmmoSlot - Ranged ammunition slotBackSlot - Back (cloak) slotBag0Slot - Backpack slotBag1Slot - First bag slotBag2Slot - Second bag slotBag3Slot - Third bag slotChestSlot - Chest slotFeetSlot - Feet (boots) slotFinger0Slot - First finger (ring) slotFinger1Slot - Second finger (ring) slotHandsSlot - Hand (gloves) slotHeadSlot - Head (helmet) slotLegsSlot - Legs (pants) slotMainHandSlot - Main hand weapon slotNeckSlot - Necklace slotRangedSlot - Ranged weapon or relic slotSecondaryHandSlot - Off-hand (weapon, shield, or held item) slotShirtSlot - Shirt slotShoulderSlot - Shoulder slotTabardSlot - Tabard slotTrinket0Slot - First trinket slotTrinket1Slot - Second trinket slotWaistSlot - Waist (belt) slotWristSlot - Wrist (bracers) slot</param>
        /// <example>id,texture,checkRelic=GetInventorySlotInfo("slotName")</example>
        internal static string[] GetInventorySlotInfo(string slotName)
        {
            return Run("GetInventorySlotInfo(\"{0}\")", slotName); //id,texture,checkRelic
        }

        /// <summary>
        /// Returns cooldown information about an arbitrary item
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>start,duration,enable=GetItemCooldown(itemID)orGetItemCooldown("itemName")orGetItemCooldown("itemLink")</example>
        internal static string[] GetItemCooldown(int itemID, string itemName, string itemLink)
        {
            return Run("GetItemCooldown({0})orGetItemCooldown(\"{1}\")orGetItemCooldown(\"{2}\")", itemID, itemName, itemLink); //start,duration,enable
        }

        /// <summary>
        /// Returns information about how many of a given item the player has or on remaining item charges. When the third argument includeCharges is true, the returned number indicates the total number of remaining charges for the item instead of how many of the item you have; e.g. if you have 3 Wizard Oils and one of them has been used twice, the returned value will be 13.
        /// </summary>
        /// <param name="itemId">An item id (number)</param>
        /// <param name="itemName">An item name (string)</param>
        /// <param name="itemLink">An item link (string)</param>
        /// <param name="includeBank">true to include items in the bank in the returned count, otherwise false (boolean)</param>
        /// <param name="includeCharges">true to count charges for applicable items, otherwise false (boolean)</param>
        /// <example>itemCount=GetItemCount(itemId,includeBank,includeCharges)orGetItemCount("itemName",includeBank,includeCharges)orGetItemCount("itemLink",includeBank,includeCharges)</example>
        internal static string[] GetItemCount(int itemId, string itemName, string itemLink, string includeBank, string includeCharges)
        {
            return Run("GetItemCount({0},{3},{4})orGetItemCount(\"{1}\",{3},{4})orGetItemCount(\"{2}\",{3},{4})", itemId, itemName, itemLink, includeBank, includeCharges); //itemCount
        }

        /// <summary>
        /// Returns information about special bag types that can hold a given item. The meaning of bagType varies depending on the item:If the item is a container, bagType indicates which kinds of items the container is limited to holding; a bagType of 0 indicates the container can hold any kind of item.If the item is not a container, bagType indicates which kinds of specialty containers can hold the item; a bagType of 0 indicates the item can only be put in general-purpose containers.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>bagType=GetItemFamily(itemID)orGetItemFamily("itemName")orGetItemFamily("itemLink")</example>
        internal static string[] GetItemFamily(int itemID, string itemName, string itemLink)
        {
            return Run("GetItemFamily({0})orGetItemFamily(\"{1}\")orGetItemFamily(\"{2}\")", itemID, itemName, itemLink); //bagType
        }

        /// <summary>
        /// Returns information about gems socketed in an item
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <param name="index">Index of a socket on the item (number)</param>
        /// <example>name,link=GetItemGem(itemID,index)orGetItemGem("itemName",index)orGetItemGem("itemLink",index)</example>
        internal static string[] GetItemGem(int itemID, string itemName, string itemLink, int index)
        {
            return Run("GetItemGem({0},{3})orGetItemGem(\"{1}\",{3})orGetItemGem(\"{2}\",{3})", itemID, itemName, itemLink, index); //name,link
        }

        /// <summary>
        /// Returns the path to an icon texture for the item. Unlike GetItemInfo, this function always returns icons for valid items, even if the item is not in the client's cache.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>texture=GetItemIcon(itemID)orGetItemIcon("itemName")orGetItemIcon("itemLink")</example>
        internal static string[] GetItemIcon(int itemID, string itemName, string itemLink)
        {
            return Run("GetItemIcon({0})orGetItemIcon(\"{1}\")orGetItemIcon(\"{2}\")", itemID, itemName, itemLink); //texture
        }

        /// <summary>
        /// Returns information about an item, by name, link or id. Only returns information for items in the Wow client's local cache; returns nil for items the client has not seen.
        /// </summary>
        /// <param name="itemID">An item's ID (number, itemID)</param>
        /// <param name="itemName">An item's name.  This value will only work if the player has the item in their bags. (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>name,link,quality,iLevel,reqLevel,class,subclass,maxStack,equipSlot,texture,vendorPrice=GetItemInfo(itemID)orGetItemInfo("itemName")orGetItemInfo("itemLink")</example>
        internal static string[] GetItemInfo(int itemID = -1, string itemName = null, string itemLink = null)
        {
            return Run("GetItemInfo({0})", itemID == -1 ? "\"" + (itemName ?? itemLink) + "\"" : itemID.ToString()); //name,link,quality,iLevel,reqLevel,class,subclass,maxStack,equipSlot,texture,vendorPrice
        }

        /// <summary>
        /// Returns color values for use in displaying items of a given quality. Color components are floating-point values between 0 (no component) and 1 (full intensity of the component). 
        /// </summary>
        /// <param name="quality">An numeric item quality (rarity) value (number, itemQuality)</param>
        /// <example>redComponent,greenComponent,blueComponent,hexColor=GetItemQualityColor(quality)</example>
        internal static string[] GetItemQualityColor(string quality)
        {
            return Run("GetItemQualityColor({0})", quality); //redComponent,greenComponent,blueComponent,hexColor
        }

        /// <summary>
        /// Returns information about the spell cast by an item's "Use:" effect
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>name,rank=GetItemSpell(itemID)orGetItemSpell("itemName")orGetItemSpell("itemLink")</example>
        internal static string[] GetItemSpell(int itemID, string itemName, string itemLink)
        {
            return Run("GetItemSpell({0})orGetItemSpell(\"{1}\")orGetItemSpell(\"{2}\")", itemID, itemName, itemLink); //name,rank
        }

        /// <summary>
        /// Returns a summary of the difference in stat bonuses between two items. Keys in the table returned are the names of global variables containing the localized names of the stats (e.g. _G["ITEM_MOD_SPIRIT_SHORT"] = "Spirit", _G["ITEM_MOD_HIT_RATING_SHORT"] = "Hit Rating").The optional argument returnTable allows for performance optimization in cases where this function is expected to be called repeatedly. Rather than creating new tables each time the function is called (eventually requiring garbage collection), an existing table can be recycled. (Note, however, that this function does not clear the table's contents; use wipe() first to guarantee consistent results.)
        /// </summary>
        /// <param name="item1Link">An item's hyperlink, or any string containing the itemString portion of an item link (string, hyperlink)</param>
        /// <param name="item2Link">Another item's hyperlink, or any string containing the itemString portion of an item link (string, hyperlink)</param>
        /// <param name="returnTable">Reference to a table to be filled with return values (table)</param>
        /// <example>statTable=GetItemStatDelta("item1Link","item2Link"[,returnTable])</example>
        internal static string[] GetItemStatDelta(string item1Link, string item2Link, string returnTable)
        {
            return Run("GetItemStatDelta(\"{0}\",\"{1}\"[,{2}])", item1Link, item2Link, returnTable); //statTable
        }

        /// <summary>
        /// Returns a summary of an item's stat bonuses. Keys in the table returned are the names of global variables containing the localized names of the stats (e.g. _G["ITEM_MOD_SPIRIT_SHORT"] = "Spirit", _G["ITEM_MOD_HIT_RATING_SHORT"] = "Hit Rating").The optional argument returnTable allows for performance optimization in cases where this function is expected to be called repeatedly. Rather than creating new tables each time the function is called (eventually requiring garbage collection), an existing table can be recycled. (Note, however, that this function does not clear the table's contents; use wipe() first to guarantee consistent results.)
        /// </summary>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string, hyperlink)</param>
        /// <param name="returnTable">Reference to a table to be filled with return values (table)</param>
        /// <example>statTable=GetItemStats("itemLink"[,returnTable])</example>
        internal static string[] GetItemStats(string itemLink, string returnTable)
        {
            return Run("GetItemStats(\"{0}\"[,{1}])", itemLink, returnTable); //statTable
        }

        /// <summary>
        /// Returns information about uniqueness restrictions for equipping an item. Only applies to items with "Unique Equipped" restrictions upon how many similar items can be equipped -- returns nil for items which for which "Unique" restricts how many the player can have in her possession.Also returns nil if the queried item is not currently in the Wow client's item cache.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's link (string)</param>
        /// <example>uniqueFamily,maxEquipped=GetItemUniqueness(itemID)orGetItemUniqueness("itemName")orGetItemUniqueness("itemLink")</example>
        internal static string[] GetItemUniqueness(int itemID, string itemName, string itemLink)
        {
            return Run("GetItemUniqueness({0})orGetItemUniqueness(\"{1}\")orGetItemUniqueness(\"{2}\")", itemID, itemName, itemLink); //uniqueFamily,maxEquipped
        }

        /// <summary>
        /// Returns the spellbook slot for the player's highest known rank of a spell
        /// </summary>
        /// <param name="slot">Spellbook slot index of a known spell (number)</param>
        /// <example>maxRankSlot=GetKnownSlotFromHighestRankSlot(slot)</example>
        internal static string[] GetKnownSlotFromHighestRankSlot(int slot)
        {
            return Run("GetKnownSlotFromHighestRankSlot({0})", slot); //maxRankSlot
        }

        /// <summary>
        /// Returns the localized name of a player character language
        /// </summary>
        /// <param name="index">Index of a player character language (between 1 and GetNumLanguages() (number)</param>
        /// <example>language=GetLanguageByIndex(index)</example>
        internal static string[] GetLanguageByIndex(int index)
        {
            return Run("GetLanguageByIndex({0})", index); //language
        }

        /// <summary>
        /// Returns a list of the player's most recently earned achievements
        /// </summary>
        /// <example>...=GetLatestCompletedAchievements()</example>
        internal static string[] GetLatestCompletedAchievements()
        {
            return Run("GetLatestCompletedAchievements()"); //...
        }

        /// <summary>
        /// Returns a list of the comparison unit's most recently earned achievements
        /// </summary>
        /// <example>...=GetLatestCompletedComparisonAchievements()</example>
        internal static string[] GetLatestCompletedComparisonAchievements()
        {
            return Run("GetLatestCompletedComparisonAchievements()"); //...
        }

        /// <summary>
        /// Returns the names of the last three senders of new mail. Returns sender names for new messages which the player has not yet seen in the mailbox; returns nothing if the player's inbox only contains unread messages which have been seen in the mailbox listing but not yet opened.
        /// </summary>
        /// <example>sender1,sender2,sender3=GetLatestThreeSenders()</example>
        internal static string[] GetLatestThreeSenders()
        {
            return Run("GetLatestThreeSenders()"); //sender1,sender2,sender3
        }

        /// <summary>
        /// Returns a list of the comparison unit's latest updated statistics.  Currently always returns a list of invalid statistic IDs -- the "latest updated statistics" feature is no longer a part of the Achievements UI. 
        /// </summary>
        /// <example>...=GetLatestUpdatedComparisonStats()</example>
        internal static string[] GetLatestUpdatedComparisonStats()
        {
            return Run("GetLatestUpdatedComparisonStats()"); //...
        }

        /// <summary>
        /// Returns a list of the player's latest updated statistics. Currently always returns a list of invalid statistic IDs -- the "latest updated statistics" feature is no longer a part of the Achievements UI.
        /// </summary>
        /// <example>...=GetLatestUpdatedStats()</example>
        internal static string[] GetLatestUpdatedStats()
        {
            return Run("GetLatestUpdatedStats()"); //...
        }

        /// <summary>
        /// Provides information about the LFG status of the player.
        /// </summary>
        /// <example>mode,submode=GetLFGMode()</example>
        internal static string[] GetLFGMode()
        {
            return Run("GetLFGMode()"); //mode,submode
        }

        /// <summary>
        /// Returns the group roles for which the player has signed up in the LFG system
        /// </summary>
        /// <example>leader,tank,healer,damage=GetLFGRoles()</example>
        internal static string[] GetLFGRoles()
        {
            return Run("GetLFGRoles()"); //leader,tank,healer,damage
        }

        /// <summary>
        /// Returns a list of LFG query types
        /// </summary>
        /// <example>...=GetLFGTypes()</example>
        internal static string[] GetLFGTypes()
        {
            return Run("GetLFGTypes()"); //...
        }

        /// <summary>
        /// Returns a code indicating the localization currently in use by the client
        /// </summary>
        /// <example>locale=GetLocale()</example>
        internal static string[] GetLocale()
        {
            return Run("GetLocale()"); //locale
        }

        /// <summary>
        /// Returns information about the current loot method in a party or raid. Only returns useful information if the player is in a party or raid.
        /// </summary>
        /// <example>method,partyMaster,raidMaster=GetLootMethod()</example>
        internal static string[] GetLootMethod()
        {
            return Run("GetLootMethod()"); //method,partyMaster,raidMaster
        }

        /// <summary>
        /// Returns information about an item currently up for loot rolling
        /// </summary>
        /// <param name="id">Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number)</param>
        /// <example>texture,name,count,quality,bindOnPickUp=GetLootRollItemInfo(id)</example>
        internal static string[] GetLootRollItemInfo(int id)
        {
            return Run("GetLootRollItemInfo({0})", id); //texture,name,count,quality,bindOnPickUp
        }

        /// <summary>
        /// Returns a hyperlink for an item currently up for loot rolling
        /// </summary>
        /// <param name="id">Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number)</param>
        /// <example>link=GetLootRollItemLink(id)</example>
        internal static string[] GetLootRollItemLink(int id)
        {
            return Run("GetLootRollItemLink({0})", id); //link
        }

        /// <summary>
        /// Returns the amount of time remaining before loot rolling for an item expires. When the time expires, all group members who have not yet chosen to roll Need or Greed automatically pass, random roll results are produced for those who chose to roll, and the server declares a winner and awards the item.
        /// </summary>
        /// <param name="id">Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number)</param>
        /// <example>timeLeft=GetLootRollTimeLeft(id)</example>
        internal static string[] GetLootRollTimeLeft(int id)
        {
            return Run("GetLootRollTimeLeft({0})", id); //timeLeft
        }

        /// <summary>
        /// Returns a hyperlink for an item available as loot
        /// </summary>
        /// <param name="slot">Index of a loot slot (between 1 and GetNumLootItems()) (number)</param>
        /// <example>texture,item,quantity,quality,locked=GetLootSlotInfo(slot)</example>
        internal static string[] GetLootSlotInfo(int slot)
        {
            return Run("GetLootSlotInfo({0})", slot); //texture,item,quantity,quality,locked
        }

        /// <summary>
        /// Returns a hyperlink for an item available as loot. Returns nil if the loot slot is empty or contains money.
        /// </summary>
        /// <param name="slot">Index of a loot slot (between 1 and GetNumLootItems()) (number)</param>
        /// <example>link=GetLootSlotLink(slot)</example>
        internal static string[] GetLootSlotLink(int slot)
        {
            return Run("GetLootSlotLink({0})", slot); //link
        }

        /// <summary>
        /// Returns the threshold used for Master Looter, Group Loot, and Need Before Greed loot methods. Items above the threshold quality will trigger the special behavior of the current loot method: for Group Loot and Need Before Greed, rolling will automatically begin once a group member loots the corpse or object holding the item; for Master Loot, the item will be invisible to all but the loot master tasked with assigning the loot.
        /// </summary>
        /// <example>threshold=GetLootThreshold()</example>
        internal static string[] GetLootThreshold()
        {
            return Run("GetLootThreshold()"); //threshold
        }

        /// <summary>
        /// Returns the body text of a macro
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>body=GetMacroBody(index)orGetMacroBody("name")</example>
        internal static string[] GetMacroBody(string index, string name)
        {
            return Run("GetMacroBody({0})orGetMacroBody(\"{1}\")", index, name); //body
        }

        /// <summary>
        /// Returns the texture for a macro icon option
        /// </summary>
        /// <param name="index">Index of a macro icon option (between 1 and GetNumMacroIcons()) (number)</param>
        /// <example>texture=GetMacroIconInfo(index)</example>
        internal static string[] GetMacroIconInfo(int index)
        {
            return Run("GetMacroIconInfo({0})", index); //texture
        }

        /// <summary>
        /// Returns the index of a macro specified by name
        /// </summary>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>index=GetMacroIndexByName("name")</example>
        internal static string[] GetMacroIndexByName(string name)
        {
            return Run("GetMacroIndexByName(\"{0}\")", name); //index
        }

        /// <summary>
        /// Returns information about a macro
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>name,texture,body=GetMacroInfo(index)orGetMacroInfo("name")</example>
        internal static string[] GetMacroInfo(string index, string name)
        {
            return Run("GetMacroInfo({0})orGetMacroInfo(\"{1}\")", index, name); //{1},texture,body
        }

        /// <summary>
        /// Returns information about the item used by a macro. If a macro contains conditional, random, or sequence commands, this function returns the item which would currently be used if the macro were run.
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>name,link=GetMacroItem(index)orGetMacroItem("name")</example>
        internal static string[] GetMacroItem(string index, string name)
        {
            return Run("GetMacroItem({0})orGetMacroItem(\"{1}\")", index, name); //{1},link
        }

        /// <summary>
        /// Returns the texture for an item icon. Despite the "macro" in the title, this function is only used by the default UI for providing tab icon options in the guild bank.
        /// </summary>
        /// <param name="index">Index of an item icon option (between 1 and GetNumMacroItemIcons()) (number)</param>
        /// <example>texture=GetMacroItemIconInfo(index)</example>
        internal static string[] GetMacroItemIconInfo(int index)
        {
            return Run("GetMacroItemIconInfo({0})", index); //texture
        }

        /// <summary>
        /// Returns information about the spell cast by a macro. If a macro contains conditional, random, or sequence commands, this function returns the spell which would currently be cast if the macro were run.
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>name,rank=GetMacroSpell(index)orGetMacroSpell("name")</example>
        internal static string[] GetMacroSpell(string index, string name)
        {
            return Run("GetMacroSpell({0})orGetMacroSpell(\"{1}\")", index, name); //{1},rank
        }

        /// <summary>
        /// Returns information about the player's mana regeneration rate
        /// </summary>
        /// <example>base,casting=GetManaRegen()</example>
        internal static string[] GetManaRegen()
        {
            return Run("GetManaRegen()"); //base,casting
        }

        /// <summary>
        /// Returns a list of map continents names
        /// </summary>
        /// <example>...=GetMapContinents()</example>
        internal static List<string> GetMapContinents()
        {
            return Run("GetMapContinents()").ToList(); //...
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetMapDebugObjectInfo()</example>
        internal static string[] GetMapDebugObjectInfo()
        {
            return Run("GetMapDebugObjectInfo()");
        }

        /// <summary>
        /// Returns information about the current world map texture. World map images are broken into several tiles; the full texture paths follow the format "Interface\\WorldMap\\"..mapFileName.."\\"..mapFileName..i, where i is a number between 1 and NUM_WORLDMAP_DETAIL_TILES (or in a zone with multiple area images, "Interface\\WorldMap\\"..mapFileName.."\\"..mapFileName..dungeonLevel.."_"..i, where dungeonLevel is a number between 1 and GetNumDungeonMapLevels()).
        /// </summary>
        /// <example>mapFileName,textureHeight,textureWidth=GetMapInfo()</example>
        internal static string[] GetMapInfo()
        {
            return Run("GetMapInfo()"); //mapFileName,textureHeight,textureWidth
        }

        /// <summary>
        /// Returns information about a map landmark. Possible landmarks include PvP objectives (both in battlegrounds and in world PvP areas), town and city markers on continent maps, and special markers such as those used during the Scourge Invasion world event. Some landmarks (such as those for towns on a zone map) exist but are not visible in the default UI.
        /// </summary>
        /// <param name="index">The index of a map landmark, from 1 to GetNumMapLandmarks() (number)</param>
        /// <example>name,description,textureIndex,x,y,mapLinkID,showInBattleMap=GetMapLandmarkInfo(index)</example>
        internal static string[] GetMapLandmarkInfo(int index)
        {
            return Run("GetMapLandmarkInfo({0})", index); //name,description,textureIndex,x,y,mapLinkID,showInBattleMap
        }

        /// <summary>
        /// Returns information about a world map overlay. Map overlays correspond to areas which are "discovered" when entered by the player, "filling in" the blank areas of the world map.
        /// </summary>
        /// <param name="index">Index of a map overlay (between 1 and GetNumMapOverlays()) (number)</param>
        /// <example>textureName,textureWidth,textureHeight,offsetX,offsetY,mapPointX,mapPointY=GetMapOverlayInfo(index)</example>
        internal static string[] GetMapOverlayInfo(int index)
        {
            return Run("GetMapOverlayInfo({0})", index); //textureName,textureWidth,textureHeight,offsetX,offsetY,mapPointX,mapPointY
        }

        /// <summary>
        /// Returns the map zones for a given continent
        /// </summary>
        /// <param name="continentIndex">Index of a continent (in the list returned by GetMapContinents()) (number)</param>
        /// <example>...=GetMapZones(continentIndex)</example>
        internal static string[] GetMapZones(int continentIndex)
        {
            return Run("GetMapZones({0})", continentIndex); //...
        }

        /// <summary>
        /// Returns information about a given loot candidate. Used in the default UI to build the popup menu used in master loot assignment. Only valid if the player is the master looter.Not all party/raid members may be eligible for a given corpse's (or object's) loot: e.g. a member is ineligible for loot from a creature killed while that member was not in the immediate area. By repeatedly calling this function (with index incrementing from 1 to the total number of party/raid members, including the player), one can build a list of the names of members eligible for the current loot.The index is cast in stone at the time the mob was killed. If you move raid members around prior to distributing loot, their original positions will be returned by this function. The expression ceil(index/5) will yield the group number (in a raid) and the expression index % 5 will yield the group position number for an eligible raider.
        /// </summary>
        /// <param name="index">Index of a member of the party or raid (not equivalent to the numeric part of a party or raidunitID) (number)</param>
        /// <example>candidate=GetMasterLootCandidate(index)</example>
        internal static string[] GetMasterLootCandidate(int index)
        {
            return Run("GetMasterLootCandidate({0})", index); //candidate
        }

        /// <summary>
        /// Returns the maximum amount of arena points the player can accrue
        /// </summary>
        /// <example>amount=GetMaxArenaCurrency()</example>
        internal static string[] GetMaxArenaCurrency()
        {
            return Run("GetMaxArenaCurrency()"); //amount
        }

        /// <summary>
        /// Returns the maximum possible percentage bonus for a given combat rating. While this function can be applied to all combat ratings, it is currently only used in the default UI to account for the cap on (incoming) critical strike damage and mana drains provided by Resilience rating -- specifically, in generating the tooltip where Resilience rating is shown in the Character window (PaperDollFrame).
        /// </summary>
        /// <param name="ratingIndex">Which rating to query; the following global constants can be used for standard values: (number) CR_BLOCK - Block skillCR_CRIT_MELEE - Melee critical strike chanceCR_CRIT_RANGED - Ranged critical strike chanceCR_CRIT_SPELL - Spell critical strike chanceCR_CRIT_TAKEN_MELEE - Resilience (as applied to melee attacks)CR_CRIT_TAKEN_RANGED - Resilience (as applied to ranged attacks)CR_CRIT_TAKEN_SPELL - Resilience (as applied to spell effectsCR_DEFENSE_SKILL - Defense skillCR_DODGE - Dodge skillCR_HASTE_MELEE - Melee hasteCR_HASTE_RANGED - Ranged hasteCR_HASTE_SPELL - Spell hasteCR_HIT_MELEE - Melee chance to hitCR_HIT_RANGED - Ranged chance to hitCR_HIT_SPELL - Spell chance to hitCR_HIT_TAKEN_MELEE - UnusedCR_HIT_TAKEN_RANGED - UnusedCR_HIT_TAKEN_SPELL - UnusedCR_PARRY - Parry skillCR_WEAPON_SKILL - Weapon skillCR_WEAPON_SKILL_MAINHAND - Main-hand weapon skillCR_WEAPON_SKILL_OFFHAND - Offhand weapon skillCR_WEAPON_SKILL_RANGED - Ranged weapon skill</param>
        /// <example>max=GetMaxCombatRatingBonus(ratingIndex)</example>
        internal static string[] GetMaxCombatRatingBonus(int ratingIndex)
        {
            return Run("GetMaxCombatRatingBonus({0})", ratingIndex); //max
        }

        /// <summary>
        /// Returns the maximum number of daily quests that can be completed each day.
        /// </summary>
        /// <example>max=GetMaxDailyQuests()</example>
        internal static string[] GetMaxDailyQuests()
        {
            return Run("GetMaxDailyQuests()"); //max
        }

        /// <summary>
        /// Returns information about alternate currencies required to purchase an item from a vendor
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <example>honorPoints,arenaPoints,itemCount=GetMerchantItemCostInfo(index)</example>
        internal static string[] GetMerchantItemCostInfo(int index)
        {
            return Run("GetMerchantItemCostInfo({0})", index); //honorPoints,arenaPoints,itemCount
        }

        /// <summary>
        /// Returns information about currency items required to purchase an item from a vendor
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <param name="currency">Index of one of the item currencies required to purchase the item (between 1 and select(3,GetMerchantItemCostInfo(index))) (number)</param>
        /// <example>texture,value,link=GetMerchantItemCostItem(index,currency)</example>
        internal static string[] GetMerchantItemCostItem(int index, int currency)
        {
            return Run("GetMerchantItemCostItem({0},{1})", index, currency); //texture,value,link
        }

        /// <summary>
        /// Returns information about an item available for purchase from a vendor
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <example>name,texture,price,quantity,numAvailable,isUsable,extendedCost=GetMerchantItemInfo(index)</example>
        internal static dynamic GetMerchantItemInfo(int index)
        {
            var strs = Run("GetMerchantItemInfo({0})", index); //name,texture,price,quantity,numAvailable,isUsable,extendedCost
            return new
            {
                name = strs[0],
                texture = strs[1],
                price = Convert.ToInt32(strs[2]),
                quantity = Convert.ToInt32(strs[3]),
                numAvailable = Convert.ToInt32(strs[4]),
                isUsable = Convert.ToInt32(strs[5]),
                extendedCost = Convert.ToInt32(strs[6]),
            };
        }

        /// <summary>
        /// Returns a hyperlink for an item available for purchase from a vendor
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <example>link=GetMerchantItemLink(index)</example>
        internal static string[] GetMerchantItemLink(int index)
        {
            return Run("GetMerchantItemLink({0})", index); //link
        }

        /// <summary>
        /// Returns the maximum number of an item allowed in a single purchase. Determines the largest value usable for the second argument (quantity) of BuyMerchantItem() when purchasing the item. For most items, this is the same as the maximum stack size of the item. Returns 1 for items purchased in bundles (e.g. food or drink in groups of 5, ammunition in groups of 200, etc), as such items can only be purchased one bundle at a time.
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <example>maxStack=GetMerchantItemMaxStack(index)</example>
        internal static string[] GetMerchantItemMaxStack(int index)
        {
            return Run("GetMerchantItemMaxStack({0})", index); //maxStack
        }

        /// <summary>
        /// Returns the number of different items available for purchase from a vendor
        /// </summary>
        /// <example>numMerchantItems=GetMerchantNumItems()</example>
        internal static int GetMerchantNumItems()
        {
            return Convert.ToInt32(Run("GetMerchantNumItems()")[0]); //numMerchantItems
        }

        /// <summary>
        /// Returns an object's metatable
        /// </summary>
        /// <param name="object">Any table or userdata object (value)</param>
        /// <example>metatable=getmetatable(object)</example>
        internal static string[] getmetatable(string Object)
        {
            return Run("getmetatable({0})", Object); //metatable
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetMinigameState()</example>
        internal static string[] GetMinigameState()
        {
            return Run("GetMinigameState()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetMinigameType()</example>
        internal static string[] GetMinigameType()
        {
            return Run("GetMinigameType()");
        }

        /// <summary>
        /// Returns the name of the current area (as displayed in the Minimap). Matches GetSubZoneText(), GetRealZoneText() or GetZoneText().
        /// </summary>
        /// <example>zoneText=GetMinimapZoneText()</example>
        internal static string[] GetMinimapZoneText()
        {
            return Run("GetMinimapZoneText()"); //zoneText
        }

        /// <summary>
        /// Returns information about special countdown timers
        /// </summary>
        /// <param name="index">Index of an available timer (between 1 and MIRRORTIMER_NUMTIMERS) (number)</param>
        /// <example>timer,value,maxvalue,scale,paused,label=GetMirrorTimerInfo(index)</example>
        internal static string[] GetMirrorTimerInfo(int index)
        {
            return Run("GetMirrorTimerInfo({0})", index); //timer,value,maxvalue,scale,paused,label
        }

        /// <summary>
        /// Returns a high-resolution value for a special countdown timer
        /// </summary>
        /// <param name="timer">Non-localized token identifying the type of timer (string) BREATH - Used for the Breath timer when swimming underwaterDEATH - Currently unusedEXHAUSTION - Used for the Fatigue timer when swimming far from shoreFEIGNDEATH - Used for the Hunter Feign Death ability</param>
        /// <example>progress=GetMirrorTimerProgress("timer")</example>
        internal static string[] GetMirrorTimerProgress(string timer)
        {
            return Run("GetMirrorTimerProgress(\"{0}\")", timer); //progress
        }

        /// <summary>
        /// Returns the keys/buttons bound for a modified click action
        /// </summary>
        /// <param name="name">Token identifying a modified click action (string)</param>
        /// <example>binding=GetModifiedClick("name")</example>
        internal static string[] GetModifiedClick(string name)
        {
            return Run("GetModifiedClick(\"{0}\")", name); //binding
        }

        /// <summary>
        /// Returns the token identifying a modified click action
        /// </summary>
        /// <param name="index">Index of a modified click action (between 1 and GetNumModifiedClickActions()) (number)</param>
        /// <example>action=GetModifiedClickAction(index)</example>
        internal static string[] GetModifiedClickAction(int index)
        {
            return Run("GetModifiedClickAction({0})", index); //action
        }

        /// <summary>
        /// Returns the total amount of money currently in the player's possession
        /// </summary>
        /// <example>money=GetMoney()</example>
        internal static string[] GetMoney()
        {
            return Run("GetMoney()"); //money
        }

        /// <summary>
        /// Returns which mouse button triggered the current script. If called in a line of execution that started with a click handler (OnMouseDown, OnMouseUp, OnClick, OnDoubleClick, PreClick, or PostClick), returns a string identifying which mouse button triggered the handler. Otherwise, returns nil.
        /// </summary>
        /// <example>button=GetMouseButtonClicked()</example>
        internal static string[] GetMouseButtonClicked()
        {
            return Run("GetMouseButtonClicked()"); //button
        }

        /// <summary>
        /// Returns the name for a mouse button specified by number
        /// </summary>
        /// <param name="buttonNumber">A mouse button number (1-5) (number)</param>
        /// <example>buttonName=GetMouseButtonName(buttonNumber)</example>
        internal static string[] GetMouseButtonName(int buttonNumber)
        {
            return Run("GetMouseButtonName({0})", buttonNumber); //buttonName
        }

        /// <summary>
        /// Returns the frame that is currently under the mouse, and has mouse input enabled.
        /// </summary>
        /// <example>frame=GetMouseFocus()</example>
        internal static string[] GetMouseFocus()
        {
            return Run("GetMouseFocus()"); //frame
        }

        /// <summary>
        /// Returns the horizontal resolution available for displaying movie content
        /// </summary>
        /// <example>resolution=GetMovieResolution()</example>
        internal static string[] GetMovieResolution()
        {
            return Run("GetMovieResolution()"); //resolution
        }

        /// <summary>
        /// Returns a list of available multisample settings. Used in the default UI to provide descriptions of multisample settings (e.g. "24-bit color 24-bit depth 6x multisample").Indices used by GetCurrentMultisampleFormat() and SetMultisampleFormat() refer to the groups of color, depth and multisample values returned by this function; e.g. index 1 refers to values 1 through 3, index 2 to values 4 through 6, etc.
        /// </summary>
        /// <example>color,depth,multisample,...=GetMultisampleFormats()</example>
        internal static string[] GetMultisampleFormats()
        {
            return Run("GetMultisampleFormats()"); //color,depth,multisample,...
        }

        /// <summary>
        /// Returns the name of a character on the mute list
        /// </summary>
        /// <param name="index">Index of an entry in the mute listing (between 1 and GetNumMutes()) (number)</param>
        /// <example>name=GetMuteName(index)</example>
        internal static string[] GetMuteName(int index)
        {
            return Run("GetMuteName({0})", index); //name
        }

        /// <summary>
        /// Returns whether a character is muted or silenced. If the channel argument is specified, this function checks the given character's voice/silence status on the channel as well as for whether the character is on the player's Muted list.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">Name of a character to query (string)</param>
        /// <param name="channel">Name of a voice channel (string)</param>
        /// <example>muteStatus=GetMuteStatus("unit"[,"channel"])orGetMuteStatus("name"[,"channel"])</example>
        internal static string[] GetMuteStatus(string unit, string name, string channel)
        {
            return Run("GetMuteStatus(\"{0}\"[,\"{2}\"])orGetMuteStatus(\"{1}\"[,\"{2}\"])", unit, name, channel); //muteStatus
        }

        /// <summary>
        /// . Alias for the standard library function table.getn. Deprecated in Lua 5.1; use the length operator # instead (e.g. aTable = {1,2,3}; #aTable == 3).
        /// </summary>
        /// <example>getn()</example>
        internal static string[] getn()
        {
            return Run("getn()");
        }

        /// <summary>
        /// Returns information about current network connection performance
        /// </summary>
        /// <example>bandwidthIn,bandwidthOut,latency=GetNetStats()</example>
        internal static string[] GetNetStats()
        {
            return Run("GetNetStats()"); //bandwidthIn,bandwidthOut,latency
        }

        /// <summary>
        /// Returns information about a gem added to a socket. If the given socket contains a new gem (one that has been placed in the UI, but not yet confirmed for permanently socketing into the item), returns information for that gem. If the socket is empty or has a permanently socketed gem but no new gem, returns nil.Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <param name="index">Index of a gem socket (between 1 and GetNumSockets()) (number)</param>
        /// <example>name,texture,matches=GetNewSocketInfo(index)</example>
        internal static string[] GetNewSocketInfo(int index)
        {
            return Run("GetNewSocketInfo({0})", index); //name,texture,matches
        }

        /// <summary>
        /// Returns a hyperlink for a gem added to a socket. If the given socket contains a new gem (one that has been placed in the UI, but not yet confirmed for permanently socketing into the item), returns an item link for that gem. If the socket is empty or has a permanently socketed gem but no new gem, returns nil.Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <param name="index">Index of a gem socket (between 1 and GetNumSockets()) (number)</param>
        /// <example>link=GetNewSocketLink(index)</example>
        internal static string[] GetNewSocketLink(int index)
        {
            return Run("GetNewSocketLink({0})", index); //link
        }

        /// <summary>
        /// Returns the next achievement for an achievement which is part of a series
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>nextID,completed=GetNextAchievement(id)</example>
        internal static string[] GetNextAchievement(int id)
        {
            return Run("GetNextAchievement({0})", id); //nextID,completed
        }

        /// <summary>
        /// Returns the cost of the next available stable slot. Returns 0 if all available slots have been purchased.
        /// </summary>
        /// <example>money=GetNextStableSlotCost()</example>
        internal static string[] GetNextStableSlotCost()
        {
            return Run("GetNextStableSlotCost()"); //money
        }

        /// <summary>
        /// Returns the number of quests which can be turned in to the current Quest NPC. Only returns valid information after a QUEST_GREETING event.Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.
        /// </summary>
        /// <example>numActiveQuests=GetNumActiveQuests()</example>
        internal static int GetNumActiveQuests()
        {
            return Convert.ToInt32(Run("GetNumActiveQuests()")[0]); //numActiveQuests
        }

        /// <summary>
        /// Returns the number of addons in the addon listing
        /// </summary>
        /// <example>numAddons=GetNumAddOns()</example>
        internal static string[] GetNumAddOns()
        {
            return Run("GetNumAddOns()"); //numAddons
        }

        /// <summary>
        /// Returns the number of enemy players in an arena match
        /// </summary>
        /// <example>numOpponents=GetNumArenaOpponents()</example>
        internal static string[] GetNumArenaOpponents()
        {
            return Run("GetNumArenaOpponents()"); //numOpponents
        }

        /// <summary>
        /// Returns the number of members in an arena team
        /// </summary>
        /// <param name="teamindex">The index of the arena team, Based on the order they are displayed in the PvP tab. (number)</param>
        /// <param name="showOffline">True to include currently offline members in the count; otherwise false (boolean)</param>
        /// <example>numMembers=GetNumArenaTeamMembers(teamindex,showOffline)</example>
        internal static string[] GetNumArenaTeamMembers(int teamindex, string showOffline)
        {
            return Run("GetNumArenaTeamMembers({0},{1})", teamindex, showOffline); //numMembers
        }

        /// <summary>
        /// Returns the number of auction items in a listing
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <example>numBatchAuctions,totalAuctions=GetNumAuctionItems("list")</example>
        internal static string[] GetNumAuctionItems(string list)
        {
            return Run("GetNumAuctionItems(\"{0}\")", list); //numBatchAuctions,totalAuctions
        }

        /// <summary>
        /// Returns the number quests available from the current Quest NPC. Only returns valid information after a QUEST_GREETING event.Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.
        /// </summary>
        /// <example>numAvailableQuests=GetNumAvailableQuests()</example>
        internal static int GetNumAvailableQuests()
        {
            return Convert.ToInt32(Run("GetNumAvailableQuests()")[0]); //numAvailableQuests
        }

        /// <summary>
        /// Returns information about purchased bank bag slots
        /// </summary>
        /// <example>numSlots,isFull=GetNumBankSlots()</example>
        internal static string[] GetNumBankSlots()
        {
            return Run("GetNumBankSlots()"); //numSlots,isFull
        }

        /// <summary>
        /// Returns the number of battleground flags for which map position information is available
        /// </summary>
        /// <example>numFlags=GetNumBattlefieldFlagPositions()</example>
        internal static string[] GetNumBattlefieldFlagPositions()
        {
            return Run("GetNumBattlefieldFlagPositions()"); //numFlags
        }

        /// <summary>
        /// Returns the number of team members in the battleground not in the player's group. Still used in the default UI but no longer useful; always returns 0, as all team members in a battleground match are automatically joined into a raid group.
        /// </summary>
        /// <example>numTeamMembers=GetNumBattlefieldPositions()</example>
        internal static string[] GetNumBattlefieldPositions()
        {
            return Run("GetNumBattlefieldPositions()"); //numTeamMembers
        }

        /// <summary>
        /// Returns the number of instances available for a battleground
        /// </summary>
        /// <param name="index">Index of a battleground (between 1 and NUM_BATTLEGROUNDS), if using the queue-anywhere UI; not used when choosing an instance for a single battleground (e.g. at a battlemaster or battleground portal) (number)</param>
        /// <example>numBattlefields=GetNumBattlefields([index])</example>
        internal static string[] GetNumBattlefields(int index)
        {
            return Run("GetNumBattlefields([{0}])", index); //numBattlefields
        }

        /// <summary>
        /// Returns the number of participant scores available in the current battleground
        /// </summary>
        /// <example>numScores=GetNumBattlefieldScores()</example>
        internal static string[] GetNumBattlefieldScores()
        {
            return Run("GetNumBattlefieldScores()"); //numScores
        }

        /// <summary>
        /// Returns the number of battleground-specific statistics on the current battleground's scoreboard. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc. For the name and icon associated with each statistic, see GetBattlefieldStatInfo().
        /// </summary>
        /// <example>numStats=GetNumBattlefieldStats()</example>
        internal static string[] GetNumBattlefieldStats()
        {
            return Run("GetNumBattlefieldStats()"); //numStats
        }

        /// <summary>
        /// Returns the number of special vehicles in the current zone. Used only for certain vehicles in certain zones: includes the airships in Icecrown as well as vehicles used in Ulduar, Wintergrasp, and Strand of the Ancients.
        /// </summary>
        /// <example>numVehicles=GetNumBattlefieldVehicles()</example>
        internal static string[] GetNumBattlefieldVehicles()
        {
            return Run("GetNumBattlefieldVehicles()"); //numVehicles
        }

        /// <summary>
        /// Returns the number of different battlegrounds available. Refers to distinct battlegrounds, not battleground instances. Does not indicate the number of battlegrounds the player can enter: for that, see GetBattlegroundInfo.As of Wow 3.2, should always return 6: for Alterac Valley, Warsong Gulch, Arathi Basin, Eye of the Storm, Strand of the Ancients, and Isle of Conquest. If a future patch adds a new battleground, this function will reflect that.
        /// </summary>
        /// <example>numBattlegrounds=GetNumBattlegroundTypes()</example>
        internal static string[] GetNumBattlegroundTypes()
        {
            return Run("GetNumBattlegroundTypes()"); //numBattlegrounds
        }

        /// <summary>
        /// Returns the number of entries in the key bindings list
        /// </summary>
        /// <example>numBindings=GetNumBindings()</example>
        internal static string[] GetNumBindings()
        {
            return Run("GetNumBindings()"); //numBindings
        }

        /// <summary>
        /// Returns the number of items recently sold to a vendor and available to be repurchased
        /// </summary>
        /// <example>numBuybackItems=GetNumBuybackItems()</example>
        internal static string[] GetNumBuybackItems()
        {
            return Run("GetNumBuybackItems()"); //numBuybackItems
        }

        /// <summary>
        /// Returns the number of members in a chat channel
        /// </summary>
        /// <param name="id">Numeric identifier of a chat channel (number)</param>
        /// <example>numMembers=GetNumChannelMembers(id)</example>
        internal static string[] GetNumChannelMembers(int id)
        {
            return Run("GetNumChannelMembers({0})", id); //numMembers
        }

        /// <summary>
        /// Returns the number of mounts or non-combat pets the player can summon
        /// </summary>
        /// <param name="type">
        /// The type of companion (string)
        /// CRITTER - Non-combat pets
        /// MOUNT - Mounts</param>
        /// <example>count=GetNumCompanions("type")</example>
        internal static int GetNumCompanions(string type)
        {
            return Convert.ToInt32(Run("GetNumCompanions(\"{0}\")", type)[0]); //count
        }

        /// <summary>
        /// Returns the number of achievements earned by the comparison unit.  Does not include Feats of Strength. 
        /// </summary>
        /// <example>total,completed=GetNumComparisonCompletedAchievements()</example>
        internal static string[] GetNumComparisonCompletedAchievements()
        {
            return Run("GetNumComparisonCompletedAchievements()"); //total,completed
        }

        /// <summary>
        /// Returns the number of achievements earned by the player. Does not include Feats of Strength.
        /// </summary>
        /// <example>total,completed=GetNumCompletedAchievements()</example>
        internal static string[] GetNumCompletedAchievements()
        {
            return Run("GetNumCompletedAchievements()"); //total,completed
        }

        /// <summary>
        /// Returns the number of suggested declension sets for a name. Used in the Russian localized World of Warcraft client; see DeclineName for further details. Returns 0 in other locales.
        /// </summary>
        /// <param name="name">Nominative form of the player's or pet's name (string)</param>
        /// <param name="gender">Gender for names (for declensions of the player's name, should match the player's gender; for the pet's name, should be neuter) (number) 1 or nil - Neuter2 - Male3 - Female</param>
        /// <example>numSets=GetNumDeclensionSets("name",gender)</example>
        internal static string[] GetNumDeclensionSets(string name, int gender)
        {
            return Run("GetNumDeclensionSets(\"{0}\",{1})", name, gender); //numSets
        }

        /// <summary>
        /// Returns the number of entries in the channel list display
        /// </summary>
        /// <example>channelCount=GetNumDisplayChannels()</example>
        internal static string[] GetNumDisplayChannels()
        {
            return Run("GetNumDisplayChannels()"); //channelCount
        }

        /// <summary>
        /// Returns the number of map images for the world map's current zone. Used in zones with more than one "floor" or area such as Dalaran and several Wrath of the Lich King dungeons and raids.
        /// </summary>
        /// <example>numLevels=GetNumDungeonMapLevels()</example>
        internal static string[] GetNumDungeonMapLevels()
        {
            return Run("GetNumDungeonMapLevels()"); //numLevels
        }

        /// <summary>
        /// Returns the number of saved equipment sets
        /// </summary>
        /// <example>numSets=GetNumEquipmentSets()</example>
        internal static string[] GetNumEquipmentSets()
        {
            return Run("GetNumEquipmentSets()"); //numSets
        }

        /// <summary>
        /// Returns the number of entries in the reputation UI. Entries in the reputation UI can be major group headers (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.), the sub-group headers within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.), or individual factions (Darkmoon Faire, Orgrimmar, Honor Hold, Kirin Tor, etc.).This function returns not the total number of factions (and headers) known, but the number which should currently be visible in the UI according to the expanded/collapsed state of headers. 
        /// </summary>
        /// <example>numFactions=GetNumFactions()</example>
        internal static string[] GetNumFactions()
        {
            return Run("GetNumFactions()"); //numFactions
        }

        /// <summary>
        /// Returns the number of existing Frame objects (and derivatives). Only counts Frame objects and derivatives thereof (e.g. Button, Minimap, and StatusBar; but not FontString, AnimationGroup, and Texture).
        /// </summary>
        /// <example>numFrames=GetNumFrames()</example>
        internal static string[] GetNumFrames()
        {
            return Run("GetNumFrames()"); //numFrames
        }

        /// <summary>
        /// Returns the number of characters on the player's friends list
        /// </summary>
        /// <example>numFriends=GetNumFriends()</example>
        internal static string[] GetNumFriends()
        {
            return Run("GetNumFriends()"); //numFriends
        }

        /// <summary>
        /// Currently unused. Use the constant NUM_GLYPH_SLOTS instead.
        /// </summary>
        /// <example>GetNumGlyphSockets()</example>
        internal static string[] GetNumGlyphSockets()
        {
            return Run("GetNumGlyphSockets()");
        }

        /// <summary>
        /// Returns the number of quests which can be turned in to the current Gossip NPC. These quests are displayed with a question mark icon in the default UI's GossipFrame.
        /// </summary>
        /// <example>num=GetNumGossipActiveQuests()</example>
        internal static int GetNumGossipActiveQuests()
        {
            return Convert.ToInt32(Run("GetNumGossipActiveQuests()")[0]); //numActiveQuests
        }

        /// <summary>
        /// Returns the number of quests available from the current Gossip NPC. These quests are displayed with an exclamation mark icon in the default UI's GossipFrame.
        /// </summary>
        /// <example>num=GetNumGossipAvailableQuests()</example>
        internal static int GetNumGossipAvailableQuests()
        {
            return Convert.ToInt32(Run("GetNumGossipAvailableQuests()")[0]); //numAvailableQuests
        }

        /// <summary>
        /// Returns the number of non-quest dialog options for the current Gossip NPC. Used by the default UI to skip greeting gossip for NPCs which provide only a greeting and one gossip option leading to the NPC's main interaction type (e.g. flight masters, merchants).
        /// </summary>
        /// <example>numOptions=GetNumGossipOptions()</example>
        internal static int GetNumGossipOptions()
        {
            return Convert.ToInt32(Run("GetNumGossipOptions()")[0]); //numOptions
        }

        /// <summary>
        /// Returns the number of transactions in the guild bank money log
        /// </summary>
        /// <example>numTransactions=GetNumGuildBankMoneyTransactions()</example>
        internal static string[] GetNumGuildBankMoneyTransactions()
        {
            return Run("GetNumGuildBankMoneyTransactions()"); //numTransactions
        }

        /// <summary>
        /// Returns the number of purchased tabs in the guild bank. Returns valid information even if the player is not interacting with a guild bank vault.
        /// </summary>
        /// <example>numTabs=GetNumGuildBankTabs()</example>
        internal static string[] GetNumGuildBankTabs()
        {
            return Run("GetNumGuildBankTabs()"); //numTabs
        }

        /// <summary>
        /// Returns the number of entries in a guild bank tab's transaction log. Only returns valid information following the GUILDBANKLOG_UPDATE event which fires after calling QueryGuildBankLog().
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>numTransactions=GetNumGuildBankTransactions(tab)</example>
        internal static string[] GetNumGuildBankTransactions(int tab)
        {
            return Run("GetNumGuildBankTransactions({0})", tab); //numTransactions
        }

        /// <summary>
        /// Returns the number of entries in the guild event log. Only returns valid data after calling QueryGuildEventLog() and the following GUILD_EVENT_LOG_UPDATE event has fired.
        /// </summary>
        /// <example>numEvents=GetNumGuildEvents()</example>
        internal static string[] GetNumGuildEvents()
        {
            return Run("GetNumGuildEvents()"); //numEvents
        }

        /// <summary>
        /// Returns the number of members in the guild roster
        /// </summary>
        /// <param name="includeOffline">True to count all members in the guild; false or omitted to count only those members currently online (boolean)</param>
        /// <example>numGuildMembers=GetNumGuildMembers([includeOffline])</example>
        internal static string[] GetNumGuildMembers(string includeOffline)
        {
            return Run("GetNumGuildMembers([{0}])", includeOffline); //numGuildMembers
        }

        /// <summary>
        /// Returns the number of characters on the player's ignore list
        /// </summary>
        /// <example>numIgnores=GetNumIgnores()</example>
        internal static string[] GetNumIgnores()
        {
            return Run("GetNumIgnores()"); //numIgnores
        }

        /// <summary>
        /// Returns the number of languages the player character can speak
        /// </summary>
        /// <example>languages=GetNumLanguages()</example>
        internal static string[] GetNumLanguages()
        {
            return Run("GetNumLanguages()"); //languages
        }

        /// <summary>
        /// Returns the number of items available to be looted
        /// </summary>
        /// <example>numItems=GetNumLootItems()</example>
        internal static int GetNumLootItems()
        {
            return Convert.ToInt32(Run("GetNumLootItems()")[0]); //numItems
        }

        /// <summary>
        /// Returns the number of available macro icons
        /// </summary>
        /// <example>numMacroIcons=GetNumMacroIcons()</example>
        internal static string[] GetNumMacroIcons()
        {
            return Run("GetNumMacroIcons()"); //numMacroIcons
        }

        /// <summary>
        /// Returns the number of available item icons. Despite the "macro" in the title, this function is only used by the default UI for providing tab icon options in the guild bank.
        /// </summary>
        /// <example>numIcons=GetNumMacroItemIcons()</example>
        internal static string[] GetNumMacroItemIcons()
        {
            return Run("GetNumMacroItemIcons()"); //numIcons
        }

        /// <summary>
        /// Returns the number of macros the player has stored
        /// </summary>
        /// <example>numAccountMacros,numCharacterMacros=GetNumMacros()</example>
        internal static string[] GetNumMacros()
        {
            return Run("GetNumMacros()"); //numAccountMacros,numCharacterMacros
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetNumMapDebugObjects()</example>
        internal static string[] GetNumMapDebugObjects()
        {
            return Run("GetNumMapDebugObjects()");
        }

        /// <summary>
        /// Returns the number of landmarks on the world map. Possible landmarks include PvP objectives (both in battlegrounds and in world PvP areas), town and city markers on continent maps, and special markers such as those used during the Scourge Invasion world event. Some landmarks (such as those for towns on a zone map) exist but are not visible in the default UI.
        /// </summary>
        /// <example>numLandmarks=GetNumMapLandmarks()</example>
        internal static string[] GetNumMapLandmarks()
        {
            return Run("GetNumMapLandmarks()"); //numLandmarks
        }

        /// <summary>
        /// Returns the number of overlays for the current world map zone. Map overlays correspond to areas which are "discovered" when entered by the player, "filling in" the blank areas of the world map.
        /// </summary>
        /// <example>numOverlays=GetNumMapOverlays()</example>
        internal static string[] GetNumMapOverlays()
        {
            return Run("GetNumMapOverlays()"); //numOverlays
        }

        /// <summary>
        /// Returns the number of modified click actions registered. May return an invalid result if called when no modified click actions have been registered (i.e. early in the UI loading process).
        /// </summary>
        /// <example>num=GetNumModifiedClickActions()</example>
        internal static string[] GetNumModifiedClickActions()
        {
            return Run("GetNumModifiedClickActions()"); //num
        }

        /// <summary>
        /// Returns the number of characters on the player's mute list
        /// </summary>
        /// <example>numMuted=GetNumMutes()</example>
        internal static string[] GetNumMutes()
        {
            return Run("GetNumMutes()"); //numMuted
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetNumPackages()</example>
        internal static string[] GetNumPackages()
        {
            return Run("GetNumPackages()");
        }

        /// <summary>
        /// Returns the number of additional members in the player's party
        /// </summary>
        /// <example>numPartyMembers=GetNumPartyMembers()</example>
        internal static string[] GetNumPartyMembers()
        {
            return Run("GetNumPartyMembers()"); //numPartyMembers
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetNumPetitionItems()</example>
        internal static string[] GetNumPetitionItems()
        {
            return Run("GetNumPetitionItems()");
        }

        /// <summary>
        /// Returns the number of people who have signed the open petition
        /// </summary>
        /// <example>numNames=GetNumPetitionNames()</example>
        internal static string[] GetNumPetitionNames()
        {
            return Run("GetNumPetitionNames()"); //numNames
        }

        /// <summary>
        /// Returns the number of available quest rewards from which the player must choose one upon completing the quest presented by a questgiver. Only valid during the accept/decline or completion stages of a quest dialog (following the QUEST_DETAIL or QUEST_COMPLETE  events); otherwise may return 0 or a value from the most recently displayed quest.
        /// </summary>
        /// <example>numQuestChoices=GetNumQuestChoices()</example>
        internal static int GetNumQuestChoices()
        {
            return Convert.ToInt32(Run("GetNumQuestChoices()")[0]); //numQuestChoices
        }

        /// <summary>
        /// Returns the number of different items required to complete the quest presented by a questgiver. Usable following the QUEST_PROGRESS event in which it is determined whether the player can complete the quest.
        /// </summary>
        /// <example>numRequiredItems=GetNumQuestItems()</example>
        internal static string[] GetNumQuestItems()
        {
            return Run("GetNumQuestItems()"); //numRequiredItems
        }

        /// <summary>
        /// Returns the number of quest objectives for a quest in the player's quest log
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries(); if omitted, Defaults to the selected quest (number)</param>
        /// <example>numObjectives=GetNumQuestLeaderBoards([questIndex])</example>
        internal static string[] GetNumQuestLeaderBoards(int questIndex)
        {
            return Run("GetNumQuestLeaderBoards([{0}])", questIndex); //numObjectives
        }

        /// <summary>
        /// Returns the number of available item reward choices for the selected quest in the quest log. This function refers to quest rewards for which the player is allowed to choose one item from among several; for items always awarded upon quest completion, see GetNumQuestLogRewards.
        /// </summary>
        /// <example>numChoices=GetNumQuestLogChoices()</example>
        internal static string[] GetNumQuestLogChoices()
        {
            return Run("GetNumQuestLogChoices()"); //numChoices
        }

        /// <summary>
        /// Returns the number of quests and headers in the quest log
        /// </summary>
        /// <example>numEntries,numQuests=GetNumQuestLogEntries()</example>
        internal static string[] GetNumQuestLogEntries()
        {
            return Run("GetNumQuestLogEntries()"); //numEntries,numQuests
        }

        /// <summary>
        /// Returns the number of item rewards for the selected quest in the quest log. This function refers to items always awarded upon quest completion; for quest rewards for which the player is allowed to choose one item from among several, see GetNumQuestLogChoices.
        /// </summary>
        /// <example>numRewards=GetNumQuestLogRewards()</example>
        internal static string[] GetNumQuestLogRewards()
        {
            return Run("GetNumQuestLogRewards()"); //numRewards
        }

        /// <summary>
        /// Returns the number of different items always awarded upon completing the quest presented by a questgiver. Only valid during the accept/decline or completion stages of a quest dialog (following the QUEST_DETAIL or QUEST_COMPLETE  events); otherwise may return 0 or a value from the most recently displayed quest.
        /// </summary>
        /// <example>numQuestRewards=GetNumQuestRewards()</example>
        internal static string[] GetNumQuestRewards()
        {
            return Run("GetNumQuestRewards()"); //numQuestRewards
        }

        /// <summary>
        /// Returns the number of quests included in the objectives tracker
        /// </summary>
        /// <example>numWatches=GetNumQuestWatches()</example>
        internal static string[] GetNumQuestWatches()
        {
            return Run("GetNumQuestWatches()"); //numWatches
        }

        /// <summary>
        /// Returns the number of members in the player's raid
        /// </summary>
        /// <example>numRaidMembers=GetNumRaidMembers()</example>
        internal static string[] GetNumRaidMembers()
        {
            return Run("GetNumRaidMembers()"); //numRaidMembers
        }

        /// <summary>
        /// Returns the number of hops from the current location to another taxi node. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="index">Index of a flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>numHops=GetNumRoutes(index)</example>
        internal static string[] GetNumRoutes(int index)
        {
            return Run("GetNumRoutes({0})", index); //numHops
        }

        /// <summary>
        /// Returns the number of instances to which the player is saved
        /// </summary>
        /// <example>savedInstances=GetNumSavedInstances()</example>
        internal static string[] GetNumSavedInstances()
        {
            return Run("GetNumSavedInstances()"); //savedInstances
        }

        /// <summary>
        /// Returns the number of abilities to be presented on the stance/shapeshift bar
        /// </summary>
        /// <example>numForms=GetNumShapeshiftForms()</example>
        internal static string[] GetNumShapeshiftForms()
        {
            return Run("GetNumShapeshiftForms()"); //numForms
        }

        /// <summary>
        /// Returns the number of entries in the Skills UI list. Includes both character skills (including non-ranked skills such as talent schools and armor proficiencies, as well as progressively learned skills such as trade skills, weapon skills, and Defense skill) and skill group headers. Reflects the current state of the list (i.e. returns a lower number if group headers are collapsed.)
        /// </summary>
        /// <example>numSkills=GetNumSkillLines()</example>
        internal static string[] GetNumSkillLines()
        {
            return Run("GetNumSkillLines()"); //numSkills
        }

        /// <summary>
        /// Returns the number of sockets on the item currently being socketed. Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <example>numSockets=GetNumSockets()</example>
        internal static string[] GetNumSockets()
        {
            return Run("GetNumSockets()"); //numSockets
        }

        /// <summary>
        /// Returns the number of tabs in the player's spellbook
        /// </summary>
        /// <example>numTabs=GetNumSpellTabs()</example>
        internal static string[] GetNumSpellTabs()
        {
            return Run("GetNumSpellTabs()"); //numTabs
        }

        /// <summary>
        /// Returns the number of stabled pets. Returned value does not include the current pet.
        /// </summary>
        /// <example>numPets=GetNumStablePets()</example>
        internal static string[] GetNumStablePets()
        {
            return Run("GetNumStablePets()"); //numPets
        }

        /// <summary>
        /// Returns the number of stable slots the player has purchased.
        /// </summary>
        /// <example>numSlots=GetNumStableSlots()</example>
        internal static string[] GetNumStableSlots()
        {
            return Run("GetNumStableSlots()"); //numSlots
        }

        /// <summary>
        /// Returns the number of available stationery types. Always returns 1; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.
        /// </summary>
        /// <example>numStationeries=GetNumStationeries()</example>
        internal static string[] GetNumStationeries()
        {
            return Run("GetNumStationeries()"); //numStationeries
        }

        /// <summary>
        /// Returns the number of talent specs a character can switch among
        /// </summary>
        /// <param name="isInspect">true to query talent info for the currently inspected unit, false to query talent info for the player (boolean)</param>
        /// <param name="isPet">true to query talent info for the player's pet, false to query talent info for the player (boolean)</param>
        /// <example>numTalentGroups=GetNumTalentGroups(isInspect,isPet)</example>
        internal static string[] GetNumTalentGroups(string isInspect, string isPet)
        {
            return Run("GetNumTalentGroups({0},{1})", isInspect, isPet); //numTalentGroups
        }

        /// <summary>
        /// Returns the number of options in a talent tab
        /// </summary>
        /// <param name="tabIndex">Index of a talent tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="inspect">true to return information for the currently inspected unit; false to return information for the player (boolean)</param>
        /// <param name="pet">true to return information for the player's pet; false to return information for the player (boolean)</param>
        /// <example>numTalents=GetNumTalents(tabIndex,inspect,pet)</example>
        internal static string[] GetNumTalents(int tabIndex, string inspect, string pet)
        {
            return Run("GetNumTalents({0},{1},{2})", tabIndex, inspect, pet); //numTalents
        }

        /// <summary>
        /// Returns the number of talent tabs for the player, pet, or inspect target
        /// </summary>
        /// <param name="inspect">true to return information for the currently inspected unit; false to return information for the player (boolean)</param>
        /// <param name="pet">true to return information for the player's pet; false to return information for the player (boolean)</param>
        /// <example>numTabs=GetNumTalentTabs(inspect,pet)</example>
        internal static string[] GetNumTalentTabs(string inspect, string pet)
        {
            return Run("GetNumTalentTabs({0},{1})", inspect, pet); //numTabs
        }

        /// <summary>
        /// Returns the number of available player titles. Includes all titles, not just those earned by the player
        /// </summary>
        /// <example>numTitles=GetNumTitles()</example>
        internal static string[] GetNumTitles()
        {
            return Run("GetNumTitles()"); //numTitles
        }

        /// <summary>
        /// Returns the number of achievements flagged for display in the objectives tracker UI
        /// </summary>
        /// <example>count=GetNumTrackedAchievements()</example>
        internal static string[] GetNumTrackedAchievements()
        {
            return Run("GetNumTrackedAchievements()"); //count
        }

        /// <summary>
        /// Returns the number of available minimap object/unit tracking abilities
        /// </summary>
        /// <example>count=GetNumTrackingTypes()</example>
        internal static string[] GetNumTrackingTypes()
        {
            return Run("GetNumTrackingTypes()"); //count
        }

        /// <summary>
        /// Returns the number of entries in the trade skill listing. Entries include both group headers and individual trade skill recipes. Reflects the list as it should currently be displayed, not necessarily the complete list -- if headers are collapsed or a filter is enabled, a smaller number will be returned.Returns 0 if a trade skill is not "open".
        /// </summary>
        /// <example>numSkills=GetNumTradeSkills()</example>
        internal static int GetNumTradeSkills()
        {
            return Convert.ToInt32(Run("GetNumTradeSkills()")[0]); //numSkills
        }

        /// <summary>
        /// Returns the number of entries in the trainer service listing. Entries include both group headers and individual trainer services (i.e spells or recipes to be purchased). Reflects the list as it should currently be displayed, not necessarily the complete list -- if headers are collapsed or a filter is enabled, a smaller number will be returned.Returns 0 if not interacting with a trainer.
        /// </summary>
        /// <example>numServices=GetNumTrainerServices()</example>
        internal static int GetNumTrainerServices()
        {
            return Convert.ToInt32(Run("GetNumTrainerServices()")[0]); //numServices
        }

        /// <summary>
        /// Returns the number of members in a voice channel
        /// </summary>
        /// <param name="sessionId">Index of a voice session (between 1 and GetNumVoiceSessions()) (number)</param>
        /// <example>numMembers=GetNumVoiceSessionMembersBySessionID(sessionId)</example>
        internal static string[] GetNumVoiceSessionMembersBySessionID(int sessionId)
        {
            return Run("GetNumVoiceSessionMembersBySessionID({0})", sessionId); //numMembers
        }

        /// <summary>
        /// Returns the number of available voice channels. Returns 0 if voice chat is disabled.
        /// </summary>
        /// <example>count=GetNumVoiceSessions()</example>
        internal static string[] GetNumVoiceSessions()
        {
            return Run("GetNumVoiceSessions()"); //count
        }

        /// <summary>
        /// Returns the number of results from a Who system query
        /// </summary>
        /// <example>numResults,totalCount=GetNumWhoResults()</example>
        internal static string[] GetNumWhoResults()
        {
            return Run("GetNumWhoResults()"); //numResults,totalCount
        }

        /// <summary>
        /// Returns the number of world state UI elements. World State UI elements include PvP, instance, and quest objective information (displayed at the top center of the screen in the default UI) as well as more specific information for "control point" style PvP objectives. Examples: the Horde/Alliance score in Arathi Basin, the tower status and capture progress bars in Hellfire Peninsula, the progress text in the Black Morass and Violet Hold instances, and the event status text for quests The Light of Dawn and The Battle For The Undercity.
        /// </summary>
        /// <example>numUI=GetNumWorldStateUI()</example>
        internal static string[] GetNumWorldStateUI()
        {
            return Run("GetNumWorldStateUI()"); //numUI
        }

        /// <summary>
        /// Returns a summary of objectives for the quest offered by a questgiver. Only valid when the questgiver UI is showing the accept/decline stage of a quest dialog (between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.
        /// </summary>
        /// <example>questObjective=GetObjectiveText()</example>
        internal static string[] GetObjectiveText()
        {
            return Run("GetObjectiveText()"); //questObjective
        }

        /// <summary>
        /// Returns whether the player has opted out of loot rolls. When opting out, no prompt will be shown for loot which ordinarily would prompt the player to roll (need/greed) or pass; the loot rolling process will continue for other group members as if the player had chosen to pass on every roll.
        /// </summary>
        /// <example>isOptOut=GetOptOutOfLoot()</example>
        internal static string[] GetOptOutOfLoot()
        {
            return Run("GetOptOutOfLoot()"); //isOptOut
        }

        /// <summary>
        /// Requests data from the server for the list of auctions created by the player. The AUCTION_OWNED_LIST_UPDATE event fires if new data is available; listing information can then be retrieved using GetAuctionItemInfo() or other Auction APIs.
        /// </summary>
        /// <example>GetOwnerAuctionItems()</example>
        internal static string[] GetOwnerAuctionItems()
        {
            return Run("GetOwnerAuctionItems()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetPackageInfo()</example>
        internal static string[] GetPackageInfo()
        {
            return Run("GetPackageInfo()");
        }

        /// <summary>
        /// Returns the player's parry chance
        /// </summary>
        /// <example>chance=GetParryChance()</example>
        internal static string[] GetParryChance()
        {
            return Run("GetParryChance()"); //chance
        }

        /// <summary>
        /// Returns whether a party/raid member is assigned a specific group role
        /// </summary>
        /// <param name="assignment">A group role assignment (string) MAINASSIST - Return whether the unit is assigned the main assist roleMAINTANK - Return whether the unit is assigned the main tank role</param>
        /// <param name="unit">A unit in the player's party or raid (string, unitID)</param>
        /// <param name="name">Name of a unit in the player's party or raid (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>
        /// <example>isAssigned=GetPartyAssignment("assignment","unit")orGetPartyAssignment("assignment","name"[,exactMatch])</example>
        internal static string[] GetPartyAssignment(string assignment, string unit, string name, string exactMatch)
        {
            return Run("GetPartyAssignment(\"{0}\",\"{1}\")orGetPartyAssignment(\"{0}\",\"{2}\"[,{3}])", assignment, unit, name, exactMatch); //isAssigned
        }

        /// <summary>
        /// Returns the index of the current party leader. Returns 0 if the player is the party leader or if the player is not in a party.
        /// </summary>
        /// <example>index=GetPartyLeaderIndex()</example>
        internal static string[] GetPartyLeaderIndex()
        {
            return Run("GetPartyLeaderIndex()"); //index
        }

        /// <summary>
        /// Returns whether a party member exists at a given index
        /// </summary>
        /// <param name="index">Index of a party member (between 1 and MAX_PARTY_MEMBERS), or the numeric portion of a partyunitID (e.g. 3 = party3) (number)</param>
        /// <example>hasMember=GetPartyMember(index)</example>
        internal static string[] GetPartyMember(int index)
        {
            return Run("GetPartyMember({0})", index); //hasMember
        }

        /// <summary>
        /// Returns cooldown information about a given pet action slot
        /// </summary>
        /// <param name="index">Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number)</param>
        /// <example>start,duration,enable=GetPetActionCooldown(index)</example>
        internal static string[] GetPetActionCooldown(int index)
        {
            return Run("GetPetActionCooldown({0})", index); //start,duration,enable
        }

        /// <summary>
        /// Returns information about a pet action
        /// </summary>
        /// <param name="index">Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number)</param>
        /// <example>name,subtext,texture,isToken,isActive,autoCastAllowed,autoCastEnabled=GetPetActionInfo(index)</example>
        internal static string[] GetPetActionInfo(int index)
        {
            return Run("GetPetActionInfo({0})", index); //name,subtext,texture,isToken,isActive,autoCastAllowed,autoCastEnabled
        }

        /// <summary>
        /// Returns whether a pet action can be used. Used in the default UI to show pet actions as grayed out when the pet cannot be commanded to perform them (e.g. when the player or pet is stunned).
        /// </summary>
        /// <param name="index">Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number)</param>
        /// <example>usable=GetPetActionSlotUsable(index)</example>
        internal static string[] GetPetActionSlotUsable(int index)
        {
            return Run("GetPetActionSlotUsable({0})", index); //usable
        }

        /// <summary>
        /// Returns whether the pet's actions are usable. Note: GetPetActionSlotUsable can return nil for individual actions even if GetPetActionsUsable returns 1 (though not the other way around).
        /// </summary>
        /// <example>petActionsUsable=GetPetActionsUsable()</example>
        internal static string[] GetPetActionsUsable()
        {
            return Run("GetPetActionsUsable()"); //petActionsUsable
        }

        /// <summary>
        /// Returns information about experience points for the player's pet
        /// </summary>
        /// <example>currXP,nextXP=GetPetExperience()</example>
        internal static string[] GetPetExperience()
        {
            return Run("GetPetExperience()"); //currXP,nextXP
        }

        /// <summary>
        /// Returns a list of the food types the player's pet will eat
        /// </summary>
        /// <example>...=GetPetFoodTypes()</example>
        internal static string[] GetPetFoodTypes()
        {
            return Run("GetPetFoodTypes()"); //...
        }

        /// <summary>
        /// Returns information about the player's pet's happiness
        /// </summary>
        /// <example>happiness,damagePercentage=GetPetHappiness()</example>
        internal static string[] GetPetHappiness()
        {
            return Run("GetPetHappiness()"); //happiness,damagePercentage
        }

        /// <summary>
        /// Returns an icon representing the current pet. Used in the default Pet Stables and Talent UIs for hunter pets; returns nil for other pets.
        /// </summary>
        /// <example>texture=GetPetIcon()</example>
        internal static string[] GetPetIcon()
        {
            return Run("GetPetIcon()"); //texture
        }

        /// <summary>
        /// Returns information about the currently open petition
        /// </summary>
        /// <example>petitionType,title,bodyText,maxSignatures,originatorName,isOriginator,minSignatures=GetPetitionInfo()</example>
        internal static string[] GetPetitionInfo()
        {
            return Run("GetPetitionInfo()"); //petitionType,title,bodyText,maxSignatures,originatorName,isOriginator,minSignatures
        }

        /// <summary>
        /// Returns information about a purchasable arena team charter
        /// </summary>
        /// <param name="team">Index of a team size for a charter (number, arenaTeamID)</param>
        /// <example>name,texture,price=GetPetitionItemInfo(team)</example>
        internal static string[] GetPetitionItemInfo(string team)
        {
            return Run("GetPetitionItemInfo({0})", team); //name,texture,price
        }

        /// <summary>
        /// Returns the name of a character who has signed the currently offered petition
        /// </summary>
        /// <param name="index">Index of a signature slot on the petition (between 1 and minSignatures, where minSignatures = select(7,GetPetitionInfo())) (number)</param>
        /// <example>name=GetPetitionNameInfo(index)</example>
        internal static string[] GetPetitionNameInfo(int index)
        {
            return Run("GetPetitionNameInfo({0})", index); //name
        }

        /// <summary>
        /// Returns the name of the talent tree used by the player's current pet. Hunter pets use one of three different talent trees according to pet type. Returns nil if the player does not have a pet or the player's current pet does not use talents (i.e. warlock pets, quest pets, etc.)
        /// </summary>
        /// <example>talent=GetPetTalentTree()</example>
        internal static string[] GetPetTalentTree()
        {
            return Run("GetPetTalentTree()"); //talent
        }

        /// <summary>
        /// Returns the time remaining before a temporary pet is automatically dismissed. Temporary pets include priests' Shadowfriend, mages' Water Elemental, and various quest-related pets.
        /// </summary>
        /// <example>petTimeRemaining=GetPetTimeRemaining()</example>
        internal static string[] GetPetTimeRemaining()
        {
            return Run("GetPetTimeRemaining()"); //petTimeRemaining
        }

        /// <summary>
        /// Returns the player's orientation (heading). Indicates the direction the player model is (normally) facing and in which the player will move if he begins walking forward, not the camera orientation.
        /// </summary>
        /// <example>facing=GetPlayerFacing()</example>
        internal static string[] GetPlayerFacing()
        {
            return Run("GetPlayerFacing()"); //facing
        }

        /// <summary>
        /// Returns information about a player character identified by globally unique identifier. Returns nil if given the GUID of a non-player unit.
        /// </summary>
        /// <param name="guid">Globally unique identifier of a player unit (string, guid)</param>
        /// <example>class,classFilename,race,raceFilename,sex=GetPlayerInfoByGUID("guid")</example>
        internal static string[] GetPlayerInfoByGUID(string guid)
        {
            return Run("GetPlayerInfoByGUID(\"{0}\")", guid); //class,classFilename,race,raceFilename,sex
        }

        /// <summary>
        /// Returns the position of the player's corpse on the world map. Returns 0,0 if the unit's location is not visible on the current world map.
        /// </summary>
        /// <param name="unit">A unit in the player's party or raid (string, unitID)</param>
        /// <example>unitX,unitY=GetPlayerMapPosition("unit")</example>
        internal static string[] GetPlayerMapPosition(string unit)
        {
            return Run("GetPlayerMapPosition(\"{0}\")", unit); //{0}X,{0}Y
        }

        /// <summary>
        /// Returns the amount of money offered for trade by the player
        /// </summary>
        /// <example>amount=GetPlayerTradeMoney()</example>
        internal static string[] GetPlayerTradeMoney()
        {
            return Run("GetPlayerTradeMoney()"); //amount
        }

        /// <summary>
        /// Returns information about special actions available while the player possesses another unit. Used in the default UI to show additional special actions (e.g. canceling possession) while the player possesses another unit through an ability such as Eyes of the Beast or Mind Control.Does not apply to actions (spells) belonging to the possessed unit; those are regular actions (see GetActionInfo()) whose actionIDs begin at ((NUM_ACTIONBAR_PAGES - 1 +GetBonusBarOffset()) * NUM_ACTIONBAR_BUTTONS + 1).
        /// </summary>
        /// <param name="index">Index of a possession bar action (between 1 and NUM_POSSESS_SLOTS) (number)</param>
        /// <example>texture,name=GetPossessInfo(index)</example>
        internal static string[] GetPossessInfo(int index)
        {
            return Run("GetPossessInfo({0})", index); //texture,name
        }

        /// <summary>
        /// Returns information about the player's mana/energy/etc regeneration rate. Contexts for inactiveRegen and activeRegen vary by power type. If the player (currently) uses mana, activeRegen refers to mana regeneration while casting (within five seconds of casting a spell) and inactiveRegen refers to mana regeneration while not casting (more than five seconds after casting a spell). For other power types, activeRegen refers to regeneration while in combat and inactiveRegen to regeneration outside of combat.Note that values returned can be negative: e.g. for rage and runic power users, inactiveRegen describes the rate of power decay while not in combat.
        /// </summary>
        /// <example>inactiveRegen,activeRegen=GetPowerRegen()</example>
        internal static string[] GetPowerRegen()
        {
            return Run("GetPowerRegen()"); //inactiveRegen,activeRegen
        }

        /// <summary>
        /// . Replaced by GetGroupPreviewTalentPointsSpent().
        /// </summary>
        /// <example>GetPreviewTalentPointsSpent()</example>
        internal static string[] GetPreviewTalentPointsSpent()
        {
            return Run("GetPreviewTalentPointsSpent()");
        }

        /// <summary>
        /// Returns the previous achievement for an achievement which is part of a series
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>previousID=GetPreviousAchievement(id)</example>
        internal static string[] GetPreviousAchievement(int id)
        {
            return Run("GetPreviousAchievement({0})", id); //previousID
        }

        /// <summary>
        /// Returns a number identifying the previous arena season. New arena seasons begin every few months, resetting team rankings and providing new rewards.
        /// </summary>
        /// <example>season=GetPreviousArenaSeason()</example>
        internal static string[] GetPreviousArenaSeason()
        {
            return Run("GetPreviousArenaSeason()"); //season
        }

        /// <summary>
        /// Returns the quest progress text presented by a questgiver. Only valid when the questgiver UI is showing the progress stage of a quest dialog (between the QUEST_PROGRESS and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.
        /// </summary>
        /// <example>text=GetProgressText()</example>
        internal static string[] GetProgressText()
        {
            return Run("GetProgressText()"); //text
        }

        /// <summary>
        /// Returns whether the player has manually enabled PvP status. Only indicates whether the player has manually and directly enabled his PvP flag (e.g. by typing "/pvp" or using the default UI's menu when right-clicking the player portrait); returns 0 if the player only became PvP flagged by attacking an enemy player, entering an enemy zone, etc.
        /// </summary>
        /// <example>isPVPDesired=GetPVPDesired()</example>
        internal static string[] GetPVPDesired()
        {
            return Run("GetPVPDesired()"); //isPVPDesired
        }

        /// <summary>
        /// Returns the player's lifetime total of honorable kills and highest rank achieved. Highest rank achieved applies only to the older PvP rewards system that was abandoned with the Wow 2.0 patch, but is still accurate for players who participated in it.
        /// </summary>
        /// <example>hk,highestRank=GetPVPLifetimeStats()</example>
        internal static string[] GetPVPLifetimeStats()
        {
            return Run("GetPVPLifetimeStats()"); //hk,highestRank
        }

        /// <summary>
        /// Returns information about a given PvP rank index. These ranks are no longer in use, as they were part of the older PvP rewards system that was abandoned with the Wow 2.0 patch.
        /// </summary>
        /// <param name="index">Index of a rank (begins at 1, corresponding to a never-used "Pariah" rank; actual ranks start at 5) (number)</param>
        /// <param name="unit">A unit to use as basis for the rank name (i.e. to return Horde rank names for Horde units and Alliance rank names for Alliance units); if omitted, uses the player's faction (string, unitID)</param>
        /// <example>rankName,rankNumber=GetPVPRankInfo(index[,"unit"])</example>
        internal static string[] GetPVPRankInfo(int index, string unit)
        {
            return Run("GetPVPRankInfo({0}[,\"{1}\"])", index, unit); //rankName,rankNumber
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetPVPRankProgress()</example>
        internal static string[] GetPVPRankProgress()
        {
            return Run("GetPVPRankProgress()");
        }

        /// <summary>
        /// Returns the number of kills and honor points scored by the player since logging in
        /// </summary>
        /// <example>honorKills,honorPoints=GetPVPSessionStats()</example>
        internal static string[] GetPVPSessionStats()
        {
            return Run("GetPVPSessionStats()"); //honorKills,honorPoints
        }

        /// <summary>
        /// Returns the amount of time until the player's PVP flag expires. Returns 300000 or higher if the player's PvP flag is manually enabled or if the player is in a  PvP or enemy zone.
        /// </summary>
        /// <example>timer=GetPVPTimer()</example>
        internal static string[] GetPVPTimer()
        {
            return Run("GetPVPTimer()"); //timer
        }

        /// <summary>
        /// Returns the number of kills and honor points scored by the player on the previous day
        /// </summary>
        /// <example>honorKills,honorPoints=GetPVPYesterdayStats()</example>
        internal static string[] GetPVPYesterdayStats()
        {
            return Run("GetPVPYesterdayStats()"); //honorKills,honorPoints
        }

        /// <summary>
        /// Returns background display style information for a questgiver dialog. The value returned can be used to look up background textures and text colors for display:Background textures displayed in the default UI can be found by prepending "Interface\\ItemTextFrame\\ItemText-" and appending "-TopLeft", "-TopRight", "-BotLeft", "-BotRight" to the material string (e.g. "Interface\\ItemTextFrame\\ItemText-Stone-TopLeft").Colors for body and title text can be found by calling GetMaterialTextColors(material) (a Lua function implemented in the Blizzard UI).In cases where this function returns nil, the default UI uses the colors and textures for "Parchment".
        /// </summary>
        /// <example>material=GetQuestBackgroundMaterial()</example>
        internal static string[] GetQuestBackgroundMaterial()
        {
            return Run("GetQuestBackgroundMaterial()"); //material
        }

        /// <summary>
        /// Returns a table of color values indicating the difficulty of a quest's level as compared to the player's
        /// </summary>
        /// <param name="level">Level for which to compare difficulty (number)</param>
        /// <example>color=GetQuestDifficultyColor(level)</example>
        internal static string[] GetQuestDifficultyColor(int level)
        {
            return Run("GetQuestDifficultyColor({0})", level); //color
        }

        /// <summary>
        /// Returns the level range in which a quest below the player's level still rewards XP. If a quest's level is up to range levels below the player's level, the quest is considered easy but still rewards experience points upon completion; these quests are colored green in the default UI's quest log. (Quests more than range levels below the player's are colored gray in the default UI and reward no XP.)
        /// </summary>
        /// <example>range=GetQuestGreenRange()</example>
        internal static string[] GetQuestGreenRange()
        {
            return Run("GetQuestGreenRange()"); //range
        }

        /// <summary>
        /// Returns the quest log index of a timed quest's timer
        /// </summary>
        /// <param name="index">Index of a timer (in the list returned by GetQuestTimers()) (number)</param>
        /// <example>questIndex=GetQuestIndexForTimer(index)</example>
        internal static string[] GetQuestIndexForTimer(int index)
        {
            return Run("GetQuestIndexForTimer({0})", index); //questIndex
        }

        /// <summary>
        /// Returns the quest log index of a quest in the objectives tracker
        /// </summary>
        /// <param name="index">Index of a quest in the list of quests on the objectives tracker (between 1 and GetNumQuestWatches()) (number)</param>
        /// <example>questIndex=GetQuestIndexForWatch(index)</example>
        internal static string[] GetQuestIndexForWatch(int index)
        {
            return Run("GetQuestIndexForWatch({0})", index); //questIndex
        }

        /// <summary>
        /// Returns information about items in a questgiver dialog. Only valid when the questgiver UI is showing the accept/decline, progress, or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED, QUEST_PROGRESS and QUEST_FINISHED, or QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return empty values or those from the most recently displayed quest.
        /// </summary>
        /// <param name="type">Which of the possible sets of items to query (string) choice - Items from which the player may choose a rewardrequired - Items required to complete the questreward - Items given as reward for the quest</param>
        /// <param name="index">Which item to query (from 1 to GetNumQuestChoices(), GetNumQuestItems(), or GetNumQuestRewards(), depending on the value of the itemType argument) (number)</param>
        /// <example>name,texture,numItems,quality,isUsable=GetQuestItemInfo("type",index)</example>
        internal static string[] GetQuestItemInfo(string type, int index)
        {
            return Run("GetQuestItemInfo(\"{0}\",{1})", type, index); //name,texture,numItems,quality,isUsable
        }

        /// <summary>
        /// Returns a hyperlink for an item in a questgiver dialog. Only valid when the questgiver UI is showing the accept/decline, progress, or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED, QUEST_PROGRESS and QUEST_FINISHED, or QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return nil or a value from the most recently displayed quest.
        /// </summary>
        /// <param name="itemType">Token identifying one of the possible sets of items (string) choice - Items from which the player may choose a rewardrequired - Items required to complete the questreward - Items given as reward for the quest</param>
        /// <param name="index">Index of an item in the set (between 1 and GetNumQuestChoices(), GetNumQuestItems(), or GetNumQuestRewards(), according to itemType) (number)</param>
        /// <example>link=GetQuestItemLink("itemType",index)</example>
        internal static string[] GetQuestItemLink(string itemType, int index)
        {
            return Run("GetQuestItemLink(\"{0}\",{1})", itemType, index); //link
        }

        /// <summary>
        /// Returns a hyperlink for an entry in the player's quest log
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>link=GetQuestLink(questIndex)</example>
        internal static string[] GetQuestLink(int questIndex)
        {
            return Run("GetQuestLink({0})", questIndex); //link
        }

        /// <summary>
        /// Returns information about available item rewards for the selected quest in the quest log. This function refers to quest rewards for which the player is allowed to choose one item from among several; for items always awarded upon quest completion, see GetQuestLogRewardInfo.
        /// </summary>
        /// <param name="index">Index of a quest reward choice (between 1 and GetNumQuestLogChoices()) (number)</param>
        /// <example>name,texture,numItems,quality,isUsable=GetQuestLogChoiceInfo(index)</example>
        internal static string[] GetQuestLogChoiceInfo(int index)
        {
            return Run("GetQuestLogChoiceInfo({0})", index); //name,texture,numItems,quality,isUsable
        }

        /// <summary>
        /// Returns the suggested group size for the selected quest in the quest log
        /// </summary>
        /// <example>suggestedGroup=GetQuestLogGroupNum()</example>
        internal static string[] GetQuestLogGroupNum()
        {
            return Run("GetQuestLogGroupNum()"); //suggestedGroup
        }

        /// <summary>
        /// Returns a hyperlink for an item related to the selected quest in the quest log
        /// </summary>
        /// <param name="itemType">Token identifying one of the possible sets of items (string) choice - Items from which the player may choose a rewardreward - Items always given as reward for the quest</param>
        /// <param name="index">Index of an item in the set (between 1 and GetNumQuestLogChoices() or GetNumQuestLogRewards(), according to itemType) (number)</param>
        /// <example>GetQuestLogItemLink("itemType",index)</example>
        internal static string[] GetQuestLogItemLink(string itemType, int index)
        {
            return Run("GetQuestLogItemLink(\"{0}\",{1})", itemType, index);
        }

        /// <summary>
        /// Returns information about objectives for a quest in the quest log
        /// </summary>
        /// <param name="objective">Index of a quest objective (between 1 and GetNumQuestLeaderBoards()) (number)</param>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries(); if omitted, Defaults to the selected quest (number)</param>
        /// <example>text,type,finished=GetQuestLogLeaderBoard(objective[,questIndex])</example>
        internal static string[] GetQuestLogLeaderBoard(int objective, int questIndex)
        {
            return Run("GetQuestLogLeaderBoard({0}[,{1}])", objective, questIndex); //text,type,finished
        }

        /// <summary>
        /// Return whether the selected quest in the quest log can be shared to party members
        /// </summary>
        /// <example>shareable=GetQuestLogPushable()</example>
        internal static string[] GetQuestLogPushable()
        {
            return Run("GetQuestLogPushable()"); //shareable
        }

        /// <summary>
        /// Returns the description and objective text for the selected quest in the quest log
        /// </summary>
        /// <example>questDescription,questObjectives=GetQuestLogQuestText()</example>
        internal static string[] GetQuestLogQuestText()
        {
            return Run("GetQuestLogQuestText()"); //questDescription,questObjectives
        }

        /// <summary>
        /// Returns the amount of money required for the selected quest in the quest log
        /// </summary>
        /// <example>money=GetQuestLogRequiredMoney()</example>
        internal static string[] GetQuestLogRequiredMoney()
        {
            return Run("GetQuestLogRequiredMoney()"); //money
        }

        /// <summary>
        /// Returns the honor reward for the selected quest in the quest log
        /// </summary>
        /// <example>honor=GetQuestLogRewardHonor()</example>
        internal static string[] GetQuestLogRewardHonor()
        {
            return Run("GetQuestLogRewardHonor()"); //honor
        }

        /// <summary>
        /// Returns information about item rewards for the selected quest in the quest log. This function refers to items always awarded upon quest completion; for quest rewards for which the player is allowed to choose one item from among several, see GetQuestLogChoiceInfo.
        /// </summary>
        /// <param name="index">Index of a quest reward (between 1 and GetNumQuestLogRewards()) (number)</param>
        /// <example>name,texture,numItems,quality,isUsable=GetQuestLogRewardInfo(index)</example>
        internal static string[] GetQuestLogRewardInfo(int index)
        {
            return Run("GetQuestLogRewardInfo({0})", index); //name,texture,numItems,quality,isUsable
        }

        /// <summary>
        /// Returns the money reward for the selected quest in the quest log
        /// </summary>
        /// <example>money=GetQuestLogRewardMoney()</example>
        internal static string[] GetQuestLogRewardMoney()
        {
            return Run("GetQuestLogRewardMoney()"); //money
        }

        /// <summary>
        /// Returns information about the spell reward for the selected quest in the quest log. If both isTradeskillSpell and isSpellLearned are nil, the reward is a spell cast upon the player.
        /// </summary>
        /// <example>texture,name,isTradeskillSpell,isSpellLearned=GetQuestLogRewardSpell()</example>
        internal static string[] GetQuestLogRewardSpell()
        {
            return Run("GetQuestLogRewardSpell()"); //texture,name,isTradeskillSpell,isSpellLearned
        }

        /// <summary>
        /// Returns the talent point reward for the selected quest in the quest log. Returns 0 for quests which do not award talent points.(Very few quests award talent points; currently this functionality is only used within the Death Knight starting experience.)
        /// </summary>
        /// <example>talents=GetQuestLogRewardTalents()</example>
        internal static string[] GetQuestLogRewardTalents()
        {
            return Run("GetQuestLogRewardTalents()"); //talents
        }

        /// <summary>
        /// Returns the title reward for the selected quest in the quest log. Returns nil if no title is awarded or if no quest is selected.
        /// </summary>
        /// <example>title=GetQuestLogRewardTitle()</example>
        internal static string[] GetQuestLogRewardTitle()
        {
            return Run("GetQuestLogRewardTitle()"); //title
        }

        /// <summary>
        /// Returns the index of the selected quest in the quest log
        /// </summary>
        /// <example>questIndex=GetQuestLogSelection()</example>
        internal static string[] GetQuestLogSelection()
        {
            return Run("GetQuestLogSelection()"); //questIndex
        }

        /// <summary>
        /// Returns cooldown information about an item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)
        /// </summary>
        /// <param name="questIndex">Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>start,duration,enable=GetQuestLogSpecialItemCooldown(questIndex)</example>
        internal static string[] GetQuestLogSpecialItemCooldown(int questIndex)
        {
            return Run("GetQuestLogSpecialItemCooldown({0})", questIndex); //start,duration,enable
        }

        /// <summary>
        /// Returns information about a usable item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)
        /// </summary>
        /// <param name="questIndex">Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>link,icon,charges=GetQuestLogSpecialItemInfo(questIndex)</example>
        internal static string[] GetQuestLogSpecialItemInfo(int questIndex)
        {
            return Run("GetQuestLogSpecialItemInfo({0})", questIndex); //link,icon,charges
        }

        /// <summary>
        /// Returns a hyperlink for a spell in the selected quest in the quest log
        /// </summary>
        /// <example>link=GetQuestLogSpellLink()</example>
        internal static string[] GetQuestLogSpellLink()
        {
            return Run("GetQuestLogSpellLink()"); //link
        }

        /// <summary>
        /// Returns time remaining for the selected quest in the quest log. If the selected quest is not timed, returns nil.
        /// </summary>
        /// <example>questTimer=GetQuestLogTimeLeft()</example>
        internal static string[] GetQuestLogTimeLeft()
        {
            return Run("GetQuestLogTimeLeft()"); //questTimer
        }

        /// <summary>
        /// Returns information about an entry in the player's quest log
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>questLogTitleText,level,questTag,suggestedGroup,isHeader,isCollapsed,isComplete,isDaily,questID=GetQuestLogTitle(questIndex)</example>
        internal static string[] GetQuestLogTitle(int questIndex)
        {
            return Run("GetQuestLogTitle({0})", questIndex); //questLogTitleText,level,questTag,suggestedGroup,isHeader,isCollapsed,isComplete,isDaily,questID
        }

        /// <summary>
        /// Returns the amount of money required to complete the quest presented by a questgiver. Usable following the QUEST_PROGRESS event in which it is determined whether the player can complete the quest.
        /// </summary>
        /// <example>money=GetQuestMoneyToGet()</example>
        internal static string[] GetQuestMoneyToGet()
        {
            return Run("GetQuestMoneyToGet()"); //money
        }

        /// <summary>
        /// Returns the amount of time remaining until the daily quest period resets
        /// </summary>
        /// <example>time=GetQuestResetTime()</example>
        internal static string[] GetQuestResetTime()
        {
            return Run("GetQuestResetTime()"); //time
        }

        /// <summary>
        /// Finishes turning in a quest to a questgiver, selecting an item reward if applicable. Usable following the QUEST_COMPLETE event in which the questgiver presents the player with rewards.
        /// </summary>
        /// <param name="choice">Index of a quest reward choice (between 1 and GetNumQuestChoices()), or nil if the quest does not offer a choice of item rewards (number)</param>
        /// <example>GetQuestReward(choice)</example>
        internal static string[] GetQuestReward(int choice)
        {
            return Run("GetQuestReward({0})", choice);
        }

        internal static string[] GetQuestReward()
        {
            return Run("GetQuestReward()");
        }

        /// <summary>
        /// Gets a table containing the quests the player has completed. This function will only return data after QuestQuestsCompleted() has been called and the QUEST_QUERY_COMPLETE event has fired.  The keys in the returned table are the numeric questIds, with a value of true for each set key.
        /// </summary>
        /// <param name="questTbl">A table that will be wiped and filled with the quest data (table)</param>
        /// <example>completedQuests=GetQuestsCompleted(questTbl)</example>
        internal static List<int> GetQuestsCompleted() //string questTbl
        {
            var cmd =
                "local questTbl,retTable,completedQuests = " +
                "{}, {}, GetQuestsCompleted(questTbl) " +
                "for k,v in pairs(completedQuests) do table.insert(retTable, k) end " +
                "return table.concat(retTable, ';')";

            return WowBase.Instance.Bridge.DoString(cmd)[0].Split(';').Select(s => Convert.ToInt32(s)).ToList();
        }

        /// <summary>
        /// Returns a hyperlink for a spell in a questgiver dialog. Only valid when the questgiver UI is showing the accept/decline, progress, or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED, QUEST_PROGRESS and QUEST_FINISHED, or QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return empty values or those from the most recently displayed quest.
        /// </summary>
        /// <example>link=GetQuestSpellLink()</example>
        internal static string[] GetQuestSpellLink()
        {
            return Run("GetQuestSpellLink()"); //link
        }

        /// <summary>
        /// Returns the text for the quest offered by a questgiver. Only valid when the questgiver UI is showing the accept/decline stage of a quest dialog (between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.
        /// </summary>
        /// <example>text=GetQuestText()</example>
        internal static string[] GetQuestText()
        {
            return Run("GetQuestText()"); //text
        }

        /// <summary>
        /// Returns a list of the times remaining for any active timed quests
        /// </summary>
        /// <example>...=GetQuestTimers()</example>
        internal static string[] GetQuestTimers()
        {
            return Run("GetQuestTimers()"); //...
        }

        /// <summary>
        /// Returns information about a member of the player's raid
        /// </summary>
        /// <param name="index">Index of the raid member (between 1 and GetNumRaidMembers(); matches the numeric part of the unit's raidunitID, e.g. 21 for raid21 (number)</param>
        /// <example>name,rank,subgroup,level,class,fileName,zone,online,isDead,role,isML=GetRaidRosterInfo(index)</example>
        internal static string[] GetRaidRosterInfo(int index)
        {
            return Run("GetRaidRosterInfo({0})", index); //name,rank,subgroup,level,class,fileName,zone,online,isDead,role,isML
        }

        /// <summary>
        /// Returns the index of the selected unit in the raid roster. Selection in the raid roster is used only for display in the default UI and has no effect on other Raid APIs.
        /// </summary>
        /// <example>raidIndex=GetRaidRosterSelection()</example>
        internal static string[] GetRaidRosterSelection()
        {
            return Run("GetRaidRosterSelection()"); //raidIndex
        }

        /// <summary>
        /// Returns the index of the raid target marker on a unit
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>index=GetRaidTargetIndex("unit")orGetRaidTargetIndex("name")</example>
        internal static string[] GetRaidTargetIndex(string unit, string name)
        {
            return Run("GetRaidTargetIndex(\"{0}\")orGetRaidTargetIndex(\"{1}\")", unit, name); //index
        }

        /// <summary>
        /// Returns the player's ranged critical strike chance
        /// </summary>
        /// <example>critChance=GetRangedCritChance()</example>
        internal static string[] GetRangedCritChance()
        {
            return Run("GetRangedCritChance()"); //critChance
        }

        /// <summary>
        /// Returns a unit's status during a ready check. Returns nil for all units unless the player is the party/raid leader or a raid assistant.
        /// </summary>
        /// <param name="unit">A unit in the player's party or raid (string, unitID)</param>
        /// <example>status=GetReadyCheckStatus("unit")</example>
        internal static string[] GetReadyCheckStatus(string unit)
        {
            return Run("GetReadyCheckStatus(\"{0}\")", unit); //status
        }

        /// <summary>
        /// Returns the amount of time left on the current ready check. Returns 0 if no ready check is in progress.
        /// </summary>
        /// <example>timeLeft=GetReadyCheckTimeLeft()</example>
        internal static string[] GetReadyCheckTimeLeft()
        {
            return Run("GetReadyCheckTimeLeft()"); //timeLeft
        }

        /// <summary>
        /// Returns the name of the player's realm (server name)
        /// </summary>
        /// <example>realm=GetRealmName()</example>
        internal static string[] GetRealmName()
        {
            return Run("GetRealmName()"); //realm
        }

        /// <summary>
        /// Returns the number of members in the player's non-battleground party. When the player is in a party/raid and joins a battleground or arena, the normal party/raid functions refer to the battleground's party/raid, but the game still keeps track of the player's place in a non-battleground party/raid.
        /// </summary>
        /// <example>numMembers=GetRealNumPartyMembers()</example>
        internal static string[] GetRealNumPartyMembers()
        {
            return Run("GetRealNumPartyMembers()"); //numMembers
        }

        /// <summary>
        /// Returns the number of members in the player's non-battleground raid. When the player is in a party/raid and joins a battleground or arena, the normal party/raid functions refer to the battleground's party/raid, but the game still keeps track of the player's place in a non-battleground party/raid.
        /// </summary>
        /// <example>numMembers=GetRealNumRaidMembers()</example>
        internal static string[] GetRealNumRaidMembers()
        {
            return Run("GetRealNumRaidMembers()"); //numMembers
        }

        /// <summary>
        /// Returns the "official" name of the zone or instance in which the player is located. This name matches that seen in the Who, Guild, and Friends UIs when reporting character locations. It may differ from those the default UI displays in other locations (GetZoneText() and GetMinimapZoneText()), especially if the player is in an instance: e.g. this function returns "The Stockade" when the others return "Stormwind Stockade".
        /// </summary>
        /// <example>zoneName=GetRealZoneText()</example>
        internal static string[] GetRealZoneText()
        {
            return Run("GetRealZoneText()"); //zoneName
        }

        /// <summary>
        /// Returns a list of available screen refresh rates. The current refresh rate can be found in the gxRefresh CVar.
        /// </summary>
        /// <example>...=GetRefreshRates()</example>
        internal static string[] GetRefreshRates()
        {
            return Run("GetRefreshRates()"); //...
        }

        /// <summary>
        /// Returns the amount of time remaining until the player's spirit is automatically released when dead. Returns -1 if the player died in a dungeon or raid instance; in such cases, the player's spirit will not be released automatically (see RepopMe() to release manually).
        /// </summary>
        /// <example>timeleft=GetReleaseTimeRemaining()</example>
        internal static string[] GetReleaseTimeRemaining()
        {
            return Run("GetReleaseTimeRemaining()"); //timeleft
        }

        /// <summary>
        /// Returns the cost to repair all of the player's damaged items. Returns 0, nil if none of the player's items are damaged. Only returns valid data while interacting with a vendor which allows repairs (i.e. for whom CanMerchantRepair() returns 1).
        /// </summary>
        /// <example>repairAllCost,canRepair=GetRepairAllCost()</example>
        internal static string[] GetRepairAllCost()
        {
            return Run("GetRepairAllCost()"); //repairAllCost,canRepair
        }

        /// <summary>
        /// Returns the duration of resurrection sickness at the player's current level. Returns nil for players under level 10, who are allowed to resurrect at a spirit healer without suffering resurrection sickness.
        /// </summary>
        /// <example>resSicknessTime=GetResSicknessDuration()</example>
        internal static string[] GetResSicknessDuration()
        {
            return Run("GetResSicknessDuration()"); //resSicknessTime
        }

        /// <summary>
        /// Returns the player's current rest state
        /// </summary>
        /// <example>state,name,multiplier=GetRestState()</example>
        internal static string[] GetRestState()
        {
            return Run("GetRestState()"); //state,name,multiplier
        }

        /// <summary>
        /// Returns the amount of honor points awarded when completing a quest. Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return zero or a value from the most recently displayed quest.
        /// </summary>
        /// <example>honor=GetRewardHonor()</example>
        internal static string[] GetRewardHonor()
        {
            return Run("GetRewardHonor()"); //honor
        }

        /// <summary>
        /// Returns the amount of money awarded when completing a quest.  Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return zero or a value from the most recently displayed quest. 
        /// </summary>
        /// <example>money=GetRewardMoney()</example>
        internal static string[] GetRewardMoney()
        {
            return Run("GetRewardMoney()"); //money
        }

        /// <summary>
        /// Returns information about a spell awarded when completing a quest. Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return zero or values from the most recently displayed quest.If both isTradeskillSpell and isSpellLearned are nil, the reward is a spell cast upon the player.
        /// </summary>
        /// <example>texture,name,isTradeskillSpell,isSpellLearned=GetRewardSpell()</example>
        internal static string[] GetRewardSpell()
        {
            return Run("GetRewardSpell()"); //texture,name,isTradeskillSpell,isSpellLearned
        }

        /// <summary>
        /// Returns the talent points awarded when completing a quest. Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return zero or a value from the most recently displayed quest.(Very few quests award talent points; currently this functionality is only used within the Death Knight starting experience.)
        /// </summary>
        /// <example>talents=GetRewardTalents()</example>
        internal static string[] GetRewardTalents()
        {
            return Run("GetRewardTalents()"); //talents
        }

        /// <summary>
        /// Returns questgiver dialog to be displayed when completing a quest. Only valid when the questgiver UI is showing the completion stage of a quest dialog (between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.
        /// </summary>
        /// <example>text=GetRewardText()</example>
        internal static string[] GetRewardText()
        {
            return Run("GetRewardText()"); //text
        }

        /// <summary>
        /// Returns the title awarded when completing a quest.  Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return nil or a value from the most recently displayed quest.  
        /// </summary>
        /// <example>title=GetRewardTitle()</example>
        internal static string[] GetRewardTitle()
        {
            return Run("GetRewardTitle()"); //title
        }

        /// <summary>
        /// Returns cooldown information about one of the player's rune resources. Note the placement of runes 3-4 (normally Unholy) and 5-6 (normally Frost) are reversed in the default UI. Also note the behavior of returned values differs slightly from most other GetXYZCooldown-style functions.
        /// </summary>
        /// <param name="slot">Index of a rune slot, as positioned in the default UI: (number) 1 - Leftmost2 - Second from left3 - Fifth from left (second from right)4 - Sixth from left (rightmost)5 - Third from left6 - Fourth from left</param>
        /// <example>start,duration,runeReady=GetRuneCooldown(slot)</example>
        internal static Tuple<float, int, bool> GetRuneCooldown(int slot)
        {
            var strs = Run("GetRuneCooldown({0})", slot);
            return Tuple.Create(float.Parse(strs[0]), int.Parse(strs[1]), From1Nil(strs[2])); //start,duration,runeReady
        }

        /// <summary>
        /// Returns the number of available rune resources in one of the player's rune slots. Returns 1 if a rune is ready and 0 if a rune is on cooldown. 
        /// </summary>
        /// <param name="slot">Index of a rune slot, as positioned in the default UI: (number) 1 - Leftmost2 - Second from left3 - Fifth from left (second from right)4 - Sixth from left (rightmost)5 - Third from left6 - Fourth from left</param>
        /// <example>count=GetRuneCount(slot)</example>
        internal static string[] GetRuneCount(int slot)
        {
            return Run("GetRuneCount({0})", slot); //count
        }

        /// <summary>
        /// Returns the type of one of the player's rune resources. Note the placement of runes 3-4 (normally Unholy) and 5-6 (normally Frost) are reversed in the default UI.
        /// </summary>
        /// <param name="slot">Index of a rune slot, as positioned in the default UI: (number) 1 - Leftmost2 - Second from left3 - Fifth from left (second from right)4 - Sixth from left (rightmost)5 - Third from left6 - Fourth from left</param>
        /// <example>runeType=GetRuneType(slot)</example>
        internal static string[] GetRuneType(int slot)
        {
            return Run("GetRuneType({0})", slot); //runeType
        }

        /// <summary>
        /// Returns the index of the currently running macro.
        /// </summary>
        /// <example>index=GetRunningMacro()</example>
        internal static string[] GetRunningMacro()
        {
            return Run("GetRunningMacro()"); //index
        }

        /// <summary>
        /// Returns the mouse button that was used to activate the running macro
        /// </summary>
        /// <example>button=GetRunningMacroButton()</example>
        internal static string[] GetRunningMacroButton()
        {
            return Run("GetRunningMacroButton()"); //button
        }

        /// <summary>
        /// Returns information on a specific instance to which the player is saved
        /// </summary>
        /// <param name="index">Index of a saved instance (between 1 and GetNumSavedInstances()) (number)</param>
        /// <example>instanceName,instanceID,instanceReset,instanceDifficulty,locked,extended,instanceIDMostSig,isRaid,maxPlayers,difficultyName=GetSavedInstanceInfo(index)</example>
        internal static string[] GetSavedInstanceInfo(int index)
        {
            return Run("GetSavedInstanceInfo({0})", index); //instanceName,instanceID,instanceReset,instanceDifficulty,locked,extended,instanceIDMostSig,isRaid,maxPlayers,difficultyName
        }

        /// <summary>
        /// Returns the height of the screen for UI layout purposes. Measurements for layout are affected by the UI Scale setting (i.e. the uiscale CVar) and may not match actual screen pixels.
        /// </summary>
        /// <example>height=GetScreenHeight()</example>
        internal static string[] GetScreenHeight()
        {
            return Run("GetScreenHeight()"); //height
        }

        /// <summary>
        /// Returns a list of available screen resolutions
        /// </summary>
        /// <example>...=GetScreenResolutions()</example>
        internal static string[] GetScreenResolutions()
        {
            return Run("GetScreenResolutions()"); //...
        }

        /// <summary>
        /// Returns the width of the screen for UI layout purposes. Measurements for layout are affected by the UI Scale setting (i.e. the uiscale CVar) and may not match actual screen pixels.
        /// </summary>
        /// <example>screenWidth=GetScreenWidth()</example>
        internal static string[] GetScreenWidth()
        {
            return Run("GetScreenWidth()"); //screenWidth
        }

        /// <summary>
        /// Returns the total CPU time used by the scripting system. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.
        /// </summary>
        /// <example>usage=GetScriptCPUUsage()</example>
        internal static string[] GetScriptCPUUsage()
        {
            return Run("GetScriptCPUUsage()"); //usage
        }

        /// <summary>
        /// Returns the index of the currently selected item in an auction listing. Auction selection is used only for display and internal static recordkeeping in the default UI; it has no direct effect on other Auction APIs.
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <example>index=GetSelectedAuctionItem("list")</example>
        internal static string[] GetSelectedAuctionItem(string list)
        {
            return Run("GetSelectedAuctionItem(\"{0}\")", list); //index
        }

        /// <summary>
        /// Returns the index of the selected battleground instance in the queueing list. Selection in the battleground instance list is used only for display in the default UI and has no effect on other Battlefield APIs.
        /// </summary>
        /// <example>index=GetSelectedBattlefield()</example>
        internal static string[] GetSelectedBattlefield()
        {
            return Run("GetSelectedBattlefield()"); //index
        }

        /// <summary>
        /// Returns the selected channel in the channel list display
        /// </summary>
        /// <example>index=GetSelectedDisplayChannel()</example>
        internal static string[] GetSelectedDisplayChannel()
        {
            return Run("GetSelectedDisplayChannel()"); //index
        }

        /// <summary>
        /// Returns which faction entry is selected in the reputation UI. Selection has no bearing on other faction-related APIs; this function merely facilitates behaviors of Blizzard's reputation UI.
        /// </summary>
        /// <example>index=GetSelectedFaction()</example>
        internal static string[] GetSelectedFaction()
        {
            return Run("GetSelectedFaction()"); //index
        }

        /// <summary>
        /// Returns the index of the selected character in the player's friends list. Selection in the Friends list is used only for display in the default UI and has no effect on other Friends list APIs.
        /// </summary>
        /// <example>index=GetSelectedFriend()</example>
        internal static string[] GetSelectedFriend()
        {
            return Run("GetSelectedFriend()"); //index
        }

        /// <summary>
        /// Returns the index of the selected character in the player's ignore list. Selection in the Ignore list is used only for display in the default UI and has no effect on other Ignore list APIs.
        /// </summary>
        /// <example>index=GetSelectedIgnore()</example>
        internal static string[] GetSelectedIgnore()
        {
            return Run("GetSelectedIgnore()"); //index
        }

        /// <summary>
        /// Returns the index of the selected entry in the Muted list. Mute list selection is only used for display purposes in the default UI and has no effect on other API functions.
        /// </summary>
        /// <example>selectedMute=GetSelectedMute()</example>
        internal static string[] GetSelectedMute()
        {
            return Run("GetSelectedMute()"); //selectedMute
        }

        /// <summary>
        /// Returns the index of the selected skill in the Skills UI. Selection is only used for display purposes in the default Skills UI and has no effect on other Skill APIs.
        /// </summary>
        /// <example>index=GetSelectedSkill()</example>
        internal static string[] GetSelectedSkill()
        {
            return Run("GetSelectedSkill()"); //index
        }

        /// <summary>
        /// Returns the index of the selected stable pet
        /// </summary>
        /// <example>selectedPet=GetSelectedStablePet()</example>
        internal static string[] GetSelectedStablePet()
        {
            return Run("GetSelectedStablePet()"); //selectedPet
        }

        /// <summary>
        /// Returns the currently selected stationery type. Always returns 1; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.
        /// </summary>
        /// <example>index=GetSelectedStationeryTexture()</example>
        internal static string[] GetSelectedStationeryTexture()
        {
            return Run("GetSelectedStationeryTexture()"); //index
        }

        /// <summary>
        /// Returns the Cash-On-Delivery cost of the outgoing message. Returns the amount set via SetSendMailCOD(), which in the default UI is only called once its Send button has been clicked (immediately before sending the message). Thus, does not return the COD amount set in the default UI's Send Mail window.
        /// </summary>
        /// <example>amount=GetSendMailCOD()</example>
        internal static string[] GetSendMailCOD()
        {
            return Run("GetSendMailCOD()"); //amount
        }

        /// <summary>
        /// Returns information for an item attached to the outgoing message
        /// </summary>
        /// <param name="slot">Index of an outgoing attachment slot (between 1 and ATTACHMENTS_MAX_SEND) (number)</param>
        /// <example>itemName,itemTexture,stackCount,quality=GetSendMailItem(slot)</example>
        internal static string[] GetSendMailItem(int slot)
        {
            return Run("GetSendMailItem({0})", slot); //itemName,itemTexture,stackCount,quality
        }

        /// <summary>
        /// Returns a hyperlink for an item attached to the outgoing message
        /// </summary>
        /// <param name="slot">Index of an outgoing attachment slot (between 1 and ATTACHMENTS_MAX_SEND) (number)</param>
        /// <example>itemlink=GetSendMailItemLink(slot)</example>
        internal static string[] GetSendMailItemLink(int slot)
        {
            return Run("GetSendMailItemLink({0})", slot); //itemlink
        }

        /// <summary>
        /// Returns the amount of money to be sent with the outgoing message. Returns the amount set via SetSendMailMoney(), which in the default UI is only called once its Send button has been clicked (immediately before sending the message). Thus, does not return the Send Money amount set in the default UI's Send Mail window.
        /// </summary>
        /// <example>amount=GetSendMailMoney()</example>
        internal static string[] GetSendMailMoney()
        {
            return Run("GetSendMailMoney()"); //amount
        }

        /// <summary>
        /// Returns the cost to send the outgoing mail message. The cost of sending a message rises as more items are attached.
        /// </summary>
        /// <example>price=GetSendMailPrice()</example>
        internal static string[] GetSendMailPrice()
        {
            return Run("GetSendMailPrice()"); //price
        }

        /// <summary>
        /// Returns the index of the active ability on the stance/shapeshift bar
        /// </summary>
        /// <example>index=GetShapeshiftForm()</example>
        internal static string[] GetShapeshiftForm()
        {
            return Run("GetShapeshiftForm()"); //index
        }

        /// <summary>
        /// Returns cooldown information about an ability on the stance/shapeshift bar
        /// </summary>
        /// <param name="index">Index of an ability on the stance/shapeshift bar (between 1 and GetNumShapeshiftForms()) (number)</param>
        /// <example>start,duration,enable=GetShapeshiftFormCooldown(index)</example>
        internal static string[] GetShapeshiftFormCooldown(int index)
        {
            return Run("GetShapeshiftFormCooldown({0})", index); //start,duration,enable
        }

        /// <summary>
        /// Returns information about an ability on the stance/shapeshift bar
        /// </summary>
        /// <param name="index">Index of an ability on the stance/shapeshift bar (between 1 and GetNumShapeshiftForms()) (number)</param>
        /// <example>texture,name,isActive,isCastable=GetShapeshiftFormInfo(index)</example>
        internal static string[] GetShapeshiftFormInfo(int index)
        {
            return Run("GetShapeshiftFormInfo({0})", index); //texture,name,isActive,isCastable
        }

        /// <summary>
        /// Returns the amount of damage prevented when the player blocks with a shield
        /// </summary>
        /// <example>damage=GetShieldBlock()</example>
        internal static string[] GetShieldBlock()
        {
            return Run("GetShieldBlock()"); //damage
        }

        /// <summary>
        /// Returns information about an entry in the Skills UI list
        /// </summary>
        /// <param name="index">Index of an entry in the skills list (between 1 and GetNumSkillLines()) (number)</param>
        /// <example>skillName,header,isExpanded,skillRank,numTempPoints,skillModifier,skillMaxRank,isAbandonable,stepCost,rankCost,minLevel,skillCostType,skillDescription=GetSkillLineInfo(index)</example>
        internal static string[] GetSkillLineInfo(int index)
        {
            return Run("GetSkillLineInfo({0})", index); //skillName,header,isExpanded,skillRank,numTempPoints,skillModifier,skillMaxRank,isAbandonable,stepCost,rankCost,minLevel,skillCostType,skillDescription
        }

        /// <summary>
        /// Returns whether the item open for socketing is temporarily tradeable. A Bind on Pickup item looted by the player can be traded to other characters who were originally eligible to loot it, but only within a limited time after looting. This period can be ended prematurely if the player attempts certain actions (such as socketing gems into the item).
        /// </summary>
        /// <example>tradeable=GetSocketItemBoundTradeable()</example>
        internal static string[] GetSocketItemBoundTradeable()
        {
            return Run("GetSocketItemBoundTradeable()"); //tradeable
        }

        /// <summary>
        /// Returns information about the item currently being socketed. Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <example>name,icon,quality=GetSocketItemInfo()</example>
        internal static string[] GetSocketItemInfo()
        {
            return Run("GetSocketItemInfo()"); //name,icon,quality
        }

        /// <summary>
        /// Returns whether the item open for socketing is temporarily refundable. Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase. This period can be ended prematurely if the player attempts certain actions (such as socketing gems into the item).
        /// </summary>
        /// <example>refundable=GetSocketItemRefundable()</example>
        internal static string[] GetSocketItemRefundable()
        {
            return Run("GetSocketItemRefundable()"); //refundable
        }

        /// <summary>
        /// Returns information about the gem types usable in a socket. Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).
        /// </summary>
        /// <param name="index">Index of a gem socket (between 1 and GetNumSockets()) (number)</param>
        /// <example>gemColor=GetSocketTypes(index)</example>
        internal static string[] GetSocketTypes(int index)
        {
            return Run("GetSocketTypes({0})", index); //gemColor
        }

        /// <summary>
        /// Returns information about automatic casting for a spell in the spellbook. Generally, only certain pet spells can be autocast.
        /// </summary>
        /// <param name="id">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <example>autocastAllowed,autocastEnabled=GetSpellAutocast(id,"bookType")</example>
        internal static string[] GetSpellAutocast(string id, string bookType)
        {
            return Run("GetSpellAutocast({0},\"{1}\")", id, bookType); //autocastAllowed,autocastEnabled
        }

        /// <summary>
        /// Returns the player's spell damage bonus for a spell school
        /// </summary>
        /// <param name="school">Index of a spell school (number) 1 - Physical2 - Holy3 - Fire4 - Nature5 - Frost6 - Shadow7 - Arcane</param>
        /// <example>minModifier=GetSpellBonusDamage(school)</example>
        internal static string[] GetSpellBonusDamage(int school)
        {
            return Run("GetSpellBonusDamage({0})", school); //minModifier
        }

        /// <summary>
        /// Returns the player's amount of bonus healing
        /// </summary>
        /// <example>bonusHealing=GetSpellBonusHealing()</example>
        internal static string[] GetSpellBonusHealing()
        {
            return Run("GetSpellBonusHealing()"); //bonusHealing
        }

        /// <summary>
        /// Returns cooldown information about a spell in the spellbook
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>start,duration,enable=GetSpellCooldown(index,"bookType")orGetSpellCooldown("name")</example>
        internal static dynamic GetSpellCooldown(string name = null, int ID = -1)
        {
            var strs = Run("GetSpellCooldown(\"{0}\")", !string.IsNullOrEmpty(name) ? string.Format("\"{0}\"", name) : ID.ToString()); //start,duration,enable
            return new
            {
                start = Convert.ToDouble(strs[0]),
                duration = Convert.ToDouble(strs[1]),
                enable = Convert.ToInt32(strs[2]),
            };
        }

        /// <summary>
        /// Returns the number of times a spell can be cast. Generally used for spells whose casting is limited by the number of item reagents in the player's possession.
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>numCasts=GetSpellCount(index,"bookType")orGetSpellCount("name")</example>
        internal static string[] GetSpellCount(string index, string bookType, string name)
        {
            return Run("GetSpellCount({0},\"{1}\")orGetSpellCount(\"{2}\")", index, bookType, name); //numCasts
        }

        /// <summary>
        /// Returns the player's spell critical strike chance for a spell school
        /// </summary>
        /// <param name="school">Index of a spell school (number) 1 - Physical2 - Holy3 - Fire4 - Nature5 - Frost6 - Shadow7 - Arcane</param>
        /// <example>minCrit=GetSpellCritChance(school)</example>
        internal static string[] GetSpellCritChance(int school)
        {
            return Run("GetSpellCritChance({0})", school); //minCrit
        }

        /// <summary>
        /// Returns additional spell critical strike chance provided by Intellect
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player and pet, Defaults to player if omitted (string, unitID)</param>
        /// <example>critChance=GetSpellCritChanceFromIntellect(["unit"])</example>
        internal static string[] GetSpellCritChanceFromIntellect(string unit)
        {
            return Run("GetSpellCritChanceFromIntellect([\"{0}\"])", unit); //critChance
        }

        /// <summary>
        /// Returns information about a spell
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell, optionally including secondary text (e.g. "Mana Burn" to find the player's highest rank, or "Mana Burn(Rank 2)" -- no space before the parenthesis -- for a specific rank) (string)</param>
        /// <param name="id">Numeric ID of a spell (number, spellID)</param>
        /// <example>name,rank,icon,powerCost,isFunnel,powerType,castingTime,minRange,maxRange=GetSpellInfo(index,"bookType")orGetSpellInfo("name")orGetSpellInfo(id)</example>
        internal static string[] GetSpellInfo(string name)
        {
            return Run("GetSpellInfo(\"{0}\")", name); //name,rank,icon,powerCost,isFunnel,powerType,castingTime,minRange,maxRange
        }

        /// <summary>
        /// Returns a hyperlink for a spell
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell, optionally including secondary text (e.g. "Mana Burn" to find the player's highest rank, or "Mana Burn(Rank 2)" -- no space before the parenthesis -- for a specific rank) (string)</param>
        /// <param name="id">Numeric ID of a spell (number, spellID)</param>
        /// <example>link,tradeLink=GetSpellLink(index,"bookType")</example>
        /// <example>GetSpellLink("name")</example>
        /// <example>GetSpellLink(id)</example>
        internal static string[] GetSpellLink(int index = -1, string bookType = null, string name = null, int id = -1)
        {
            string format = "link,tradeLink=" + (
                (index != -1 && bookType != null) ? "GetSpellLink({0},\"{1}\")" :
                (name != null) ? "GetSpellLink(\"{2}\")" :
                (id != -1) ? "GetSpellLink({3})" :
                string.Empty);
            return Run(format, index, bookType, name, id);
        }

        /// <summary>
        /// Returns the name and secondary text for a spell in the spellbook
        /// </summary>
        /// <param name="id">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <example>spellName,subSpellName=GetSpellName(id,"bookType")</example>
        internal static string[] GetSpellName(string id, string bookType)
        {
            return Run("GetSpellName({0},\"{1}\")", id, bookType); //spellName,subSpellName
        }

        /// <summary>
        /// Returns the amount of enemy magic resistance ignored due to the player's Spell Penetration Rating
        /// </summary>
        /// <example>penetration=GetSpellPenetration()</example>
        internal static string[] GetSpellPenetration()
        {
            return Run("GetSpellPenetration()"); //penetration
        }

        /// <summary>
        /// Returns information about a tab in the spellbook
        /// </summary>
        /// <param name="index">Index of a spellbook tab (between 1 and GetNumSpellTabs()) (number)</param>
        /// <example>name,texture,offset,numSpells=GetSpellTabInfo(index)</example>
        internal static string[] GetSpellTabInfo(int index)
        {
            return Run("GetSpellTabInfo({0})", index); //name,texture,offset,numSpells
        }

        /// <summary>
        /// Returns the icon texture path for a spell
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>texture=GetSpellTexture(index,"bookType")orGetSpellTexture("name")</example>
        internal static string[] GetSpellTexture(string index, string bookType, string name)
        {
            return Run("GetSpellTexture({0},\"{1}\")orGetSpellTexture(\"{2}\")", index, bookType, name); //texture
        }

        /// <summary>
        /// Returns the types of food that a stabled pet will eat
        /// </summary>
        /// <param name="index">Index of a stable slot (number) 0 - Active pet1 to NUM_PET_STABLE_SLOTS - A stabled pet</param>
        /// <example>...=GetStablePetFoodTypes(index)</example>
        internal static string[] GetStablePetFoodTypes(int index)
        {
            return Run("GetStablePetFoodTypes({0})", index); //...
        }

        /// <summary>
        /// Returns information about a stabled pet
        /// </summary>
        /// <param name="index">Index of a stable slot (number) 0 - Active pet1 to NUM_PET_STABLE_SLOTS - A stable slot</param>
        /// <example>icon,name,level,family,talent=GetStablePetInfo(index)</example>
        internal static string[] GetStablePetInfo(int index)
        {
            return Run("GetStablePetInfo({0})", index); //icon,name,level,family,talent
        }

        /// <summary>
        /// Returns information about a stationery type. Only returns information for the default stationery type; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.
        /// </summary>
        /// <param name="index">Index of a stationery type (between 1 and GetNumStationeries()) (number)</param>
        /// <example>name,texture,cost=GetStationeryInfo(index)</example>
        internal static string[] GetStationeryInfo(int index)
        {
            return Run("GetStationeryInfo({0})", index); //name,texture,cost
        }

        /// <summary>
        /// Returns data for a statistic
        /// </summary>
        /// <param name="id">The numeric ID of a statistic (number)</param>
        /// <example>info=GetStatistic(id)</example>
        internal static string[] GetStatistic(int id)
        {
            return Run("GetStatistic({0})", id); //info
        }

        /// <summary>
        /// Returns a list of all statistic categories
        /// </summary>
        /// <example>categories=GetStatisticsCategoryList()</example>
        internal static string[] GetStatisticsCategoryList()
        {
            return Run("GetStatisticsCategoryList()"); //categories
        }

        /// <summary>
        /// Returns the name of the minor area in which the player is located. Subzones are named regions within a larger zone or instance: e.g. the Valley of Trials in Durotar, the Terrace of Light in Shattrath City, or the Njorn Stair in Utgarde Keep.
        /// </summary>
        /// <example>subzoneText=GetSubZoneText()</example>
        internal static string[] GetSubZoneText()
        {
            return Run("GetSubZoneText()"); //subzoneText
        }

        /// <summary>
        /// Returns the suggested group size for attempting the quest currently offered by a questgiver. Usable following the QUEST_DETAIL event in which the questgiver presents the player with the details of a quest and the option to accept or decline.
        /// </summary>
        /// <example>suggestedGroup=GetSuggestedGroupNum()</example>
        internal static string[] GetSuggestedGroupNum()
        {
            return Run("GetSuggestedGroupNum()"); //suggestedGroup
        }

        /// <summary>
        /// Returns the destination area of an offered summons. The name returned is generally that of the subzone in which the summoner performed the spell.Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.
        /// </summary>
        /// <example>area=GetSummonConfirmAreaName()</example>
        internal static string[] GetSummonConfirmAreaName()
        {
            return Run("GetSummonConfirmAreaName()"); //area
        }

        /// <summary>
        /// Returns the name of the unit offering a summons to the player. Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.
        /// </summary>
        /// <example>text=GetSummonConfirmSummoner()</example>
        internal static string[] GetSummonConfirmSummoner()
        {
            return Run("GetSummonConfirmSummoner()"); //text
        }

        /// <summary>
        /// Returns the amount of time remaining before an offered summons expires. Returns 0 if no summons is currently available.
        /// </summary>
        /// <example>timeleft=GetSummonConfirmTimeLeft()</example>
        internal static string[] GetSummonConfirmTimeLeft()
        {
            return Run("GetSummonConfirmTimeLeft()"); //timeleft
        }

        /// <summary>
        /// Returns cooldown information about the player's Summon Friend ability
        /// </summary>
        /// <example>start,duration=GetSummonFriendCooldown()</example>
        internal static string[] GetSummonFriendCooldown()
        {
            return Run("GetSummonFriendCooldown()"); //start,duration
        }

        /// <summary>
        /// Returns the cost to create a guild tabard. Only returns valid data if the player is interacting with a tabard designer (i.e. between the OPEN_TABARD_FRAME and CLOSE_TABARD_FRAME events).
        /// </summary>
        /// <example>cost=GetTabardCreationCost()</example>
        internal static string[] GetTabardCreationCost()
        {
            return Run("GetTabardCreationCost()"); //cost
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetTabardInfo()</example>
        internal static string[] GetTabardInfo()
        {
            return Run("GetTabardInfo()");
        }

        /// <summary>
        /// Returns information about a talent option
        /// </summary>
        /// <param name="tabIndex">Index of a talent tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="talentIndex">Index of a talent option (between 1 and GetNumTalents()) (number)</param>
        /// <param name="inspect">true to return information for the currently inspected unit; false to return information for the player (boolean)</param>
        /// <param name="pet">true to return information for the player's pet; false to return information for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>name,iconTexture,tier,column,rank,maxRank,isExceptional,meetsPrereq,previewRank,meetsPreviewPrereq=GetTalentInfo(tabIndex,talentIndex,inspect,pet,talentGroup)</example>
        internal static string[] GetTalentInfo(int tabIndex, int talentIndex, string inspect, string pet, int talentGroup)
        {
            return Run("GetTalentInfo({0},{1},{2},{3},{4})", tabIndex, talentIndex, inspect, pet, talentGroup); //name,iconTexture,tier,column,rank,maxRank,isExceptional,meetsPrereq,previewRank,meetsPreviewPrereq
        }

        /// <summary>
        /// Returns a hyperlink for a talent
        /// </summary>
        /// <param name="tabIndex">Index of a talent tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="talentIndex">Index of a talent option (between 1 and GetNumTalents()) (number)</param>
        /// <param name="inspect">true to return information for the currently inspected unit; false to return information for the player (boolean)</param>
        /// <param name="pet">true to return information for the player's pet; false to return information for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>link=GetTalentLink(tabIndex,talentIndex,inspect,pet,talentGroup)</example>
        internal static string[] GetTalentLink(int tabIndex, int talentIndex, string inspect, string pet, int talentGroup)
        {
            return Run("GetTalentLink({0},{1},{2},{3},{4})", tabIndex, talentIndex, inspect, pet, talentGroup); //link
        }

        /// <summary>
        /// Returns information about prerequisites to learning a talent
        /// </summary>
        /// <param name="tabIndex">Index of a talent tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="talentIndex">Index of a talent option (between 1 and GetNumTalents()) (number)</param>
        /// <param name="inspect">true to return information for the currently inspected unit; false to return information for the player (boolean)</param>
        /// <param name="pet">true to return information for the player's pet; false to return information for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>tier,column,isLearnable,isPreviewLearnable,...=GetTalentPrereqs(tabIndex,talentIndex,inspect,pet,talentGroup)</example>
        internal static string[] GetTalentPrereqs(int tabIndex, int talentIndex, string inspect, string pet, int talentGroup)
        {
            return Run("GetTalentPrereqs({0},{1},{2},{3},{4})", tabIndex, talentIndex, inspect, pet, talentGroup); //tier,column,isLearnable,isPreviewLearnable,...
        }

        /// <summary>
        /// Returns information about a talent tab
        /// </summary>
        /// <param name="tabIndex">Index of a talent tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="inspect">true to return information for the currently inspected unit; false to return information for the player (boolean)</param>
        /// <param name="pet">true to return information for the player's pet; false to return information for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>name,icon,points,background,previewPoints=GetTalentTabInfo(tabIndex,inspect,pet,talentGroup)</example>
        internal static string[] GetTalentTabInfo(int tabIndex, string inspect, string pet, int talentGroup)
        {
            return Run("GetTalentTabInfo({0},{1},{2},{3})", tabIndex, inspect, pet, talentGroup); //name,icon,points,background,previewPoints
        }

        /// <summary>
        /// Returns the amount of money offered for trade by the target
        /// </summary>
        /// <example>amount=GetTargetTradeMoney()</example>
        internal static string[] GetTargetTradeMoney()
        {
            return Run("GetTargetTradeMoney()"); //amount
        }

        /// <summary>
        /// Returns whether flight path benchmark mode is enabled
        /// </summary>
        /// <example>isBenchmark=GetTaxiBenchmarkMode()</example>
        internal static string[] GetTaxiBenchmarkMode()
        {
            return Run("GetTaxiBenchmarkMode()"); //isBenchmark
        }

        /// <summary>
        /// Returns the level of terrain detail displayed. Corresponds to the "Terrain Blending" slider in the default UI's Video Options pane.
        /// </summary>
        /// <example>terrainDetail=GetTerrainMip()</example>
        internal static string[] GetTerrainMip()
        {
            return Run("GetTerrainMip()"); //terrainDetail
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetTexLodBias()</example>
        internal static string[] GetTexLodBias()
        {
            return Run("GetTexLodBias()");
        }

        /// <summary>
        /// Returns a localized string according to given parameters. Applies to any global variable whose name fits a standard format: for example, GetText("foo") returns the value of the global variable foo (if it exists), and GetText("foo", 3) returns the value of foo_FEMALE (or if it does not exist, the value of foo). Causes a Lua error if the given variable does not exists (or is nil).
        /// </summary>
        /// <param name="token">Base name of a localized string token (string)</param>
        /// <param name="gender">Gender of the string's subject (as returned by UnitSex()) (number)</param>
        /// <param name="ordinal">Currently unused (number)</param>
        /// <example>text=GetText("token"[,gender[,ordinal]])</example>
        internal static string[] GetText(string token, int gender, int ordinal)
        {
            return Run("GetText(\"{0}\"[,{1}[,{2}]])", token, gender, ordinal); //text
        }

        /// <summary>
        /// Returns color values for a given threat status. Color component values are floating point numbers between 0 and 1, with 1 representing full intensity.
        /// </summary>
        /// <param name="status">A threat status category, as returned by UnitThreatSituation or UnitDetailedThreatSituation (number)</param>
        /// <example>red,green,blue=GetThreatStatusColor(status)</example>
        internal static string[] GetThreatStatusColor(int status)
        {
            return Run("GetThreatStatusColor({0})", status); //red,green,blue
        }

        /// <summary>
        /// Returns a number representing the current time (with millisecond precision). Unlike with time(), the number returned by this function has no meaning of its own and may not be comparable across clients; however, since it also provides higher resolution it can be compared against itself for high-precision time measurements.
        /// </summary>
        /// <example>time=GetTime()</example>
        internal static string[] GetTime()
        {
            return Run("GetTime()"); //time
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>seconds=GetTimeToWellRested()</example>
        internal static string[] GetTimeToWellRested()
        {
            return Run("GetTimeToWellRested()"); //seconds
        }

        /// <summary>
        /// Returns the text of an available player title
        /// </summary>
        /// <param name="titleIndex">Index of a title available to the player (between 1 and GetNumTitles()) (integer)</param>
        /// <example>titleName=GetTitleName(titleIndex)</example>
        internal static string[] GetTitleName(string titleIndex)
        {
            return Run("GetTitleName({0})", titleIndex); //titleName
        }

        /// <summary>
        /// Returns the title text for the quest presented by a questgiver. Only valid following the QUEST_DETAIL, QUEST_PROGRESS, or QUEST_COMPLETE events; otherwise may return nil or a value from the most recently displayed quest.
        /// </summary>
        /// <example>text=GetTitleText()</example>
        internal static string[] GetTitleText()
        {
            return Run("GetTitleText()"); //text
        }

        /// <summary>
        /// Returns the player's total achievement points earned
        /// </summary>
        /// <example>points=GetTotalAchievementPoints()</example>
        internal static string[] GetTotalAchievementPoints()
        {
            return Run("GetTotalAchievementPoints()"); //points
        }

        /// <summary>
        /// Returns information on a currently active totem (or ghoul). Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).
        /// </summary>
        /// <param name="slot">Which totem to query (number) 1 - Fire (or Death Knight's ghoul)2 - Earth3 - Water4 - Air</param>
        /// <example>haveTotem,name,startTime,duration,icon=GetTotemInfo(slot)</example>
        internal static string[] GetTotemInfo(int slot)
        {
            return Run("GetTotemInfo({0})", slot); //haveTotem,name,startTime,duration,icon
        }

        /// <summary>
        /// Returns the time remaining before a totem (or ghoul) automatically disappears. Using GetTime() and the third and fourth returns (startTime and duration) of GetTotemInfo() instead of this function is recommended if frequent updates are needed.Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).
        /// </summary>
        /// <param name="slot">Which totem to query (number) 1 - Fire (or Death Knight's ghoul)2 - Earth3 - Water4 - Air</param>
        /// <example>seconds=GetTotemTimeLeft(slot)</example>
        internal static string[] GetTotemTimeLeft(int slot)
        {
            return Run("GetTotemTimeLeft({0})", slot); //seconds
        }

        /// <summary>
        /// Returns numeric IDs of the achievements flagged for display in the objectives tracker UI
        /// </summary>
        /// <example>...=GetTrackedAchievements()</example>
        internal static string[] GetTrackedAchievements()
        {
            return Run("GetTrackedAchievements()"); //...
        }

        /// <summary>
        /// Returns information about a given tracking option
        /// </summary>
        /// <param name="index">Index of a tracking ability to query (between 1 and GetNumTrackingTypes()) (number)</param>
        /// <example>name,texture,active,category=GetTrackingInfo(index)</example>
        internal static string[] GetTrackingInfo(int index)
        {
            return Run("GetTrackingInfo({0})", index); //name,texture,active,category
        }

        /// <summary>
        /// Returns the texture of the active tracking ability. Returns "Interface\Minimap\Tracking\None" if no tracking ability is active.
        /// </summary>
        /// <example>texture=GetTrackingTexture()</example>
        internal static string[] GetTrackingTexture()
        {
            return Run("GetTrackingTexture()"); //texture
        }

        /// <summary>
        /// Returns information about an item offered for trade by the player
        /// </summary>
        /// <param name="index">Index of an item slot on the player's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number)</param>
        /// <example>name,texture,numItems,quality,isUsable,enchantment=GetTradePlayerItemInfo(index)</example>
        internal static string[] GetTradePlayerItemInfo(int index)
        {
            return Run("GetTradePlayerItemInfo({0})", index); //name,texture,numItems,quality,isUsable,enchantment
        }

        /// <summary>
        /// Returns a hyperlink for an item offered for trade by the player
        /// </summary>
        /// <param name="index">Index of an item offered for trade by the player (between 1 and MAX_TRADE_ITEMS) (number)</param>
        /// <example>link=GetTradePlayerItemLink(index)</example>
        internal static string[] GetTradePlayerItemLink(int index)
        {
            return Run("GetTradePlayerItemLink({0})", index); //link
        }

        /// <summary>
        /// Returns the time remaining on a trade skill recipe's cooldown
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>cooldown=GetTradeSkillCooldown(index)</example>
        internal static string[] GetTradeSkillCooldown(int index)
        {
            return Run("GetTradeSkillCooldown({0})", index); //cooldown
        }

        /// <summary>
        /// Returns descriptive text for a tradeskill recipe. Most recipes that create items don't provide descriptive text; it's more often used for enchants and special recipes such as inscription or alchemy research.
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>description=GetTradeSkillDescription(index)</example>
        internal static string[] GetTradeSkillDescription(int index)
        {
            return Run("GetTradeSkillDescription({0})", index); //description
        }

        /// <summary>
        /// Returns the icon for a trade skill recipe. For recipes which create an item, this is generally the icon of the item created; for other recipes (such as enchants and alchemy/inscription research) a generic icon is used.
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>texturePath=GetTradeSkillIcon(index)</example>
        internal static string[] GetTradeSkillIcon(int index)
        {
            return Run("GetTradeSkillIcon({0})", index); //texturePath
        }

        /// <summary>
        /// Returns information about a trade skill header or recipe
        /// </summary>
        /// <param name="index">Index of an entry in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>skillName,skillType,numAvailable,isExpanded,serviceType=GetTradeSkillInfo(index)</example>
        internal static dynamic GetTradeSkillInfo(int index)
        {
            var strs = Run("GetTradeSkillInfo({0})", index); //skillName,skillType,numAvailable,isExpanded,serviceType
            return new
            {
                skillName = strs[0],
                skillType = (TradeSkillType)Enum.Parse(typeof(TradeSkillType), strs[1], true),
                numAvailable = Convert.ToInt32(strs[2]),
                isExpanded = Convert.ToInt32(strs[3]),
                serviceType = (TradeSkillServiceType)Enum.Parse(typeof(TradeSkillServiceType), strs[4], true),
            };
        }

        internal enum TradeSkillType
        {
            Easy,
            Medium,
            Optimal,
            Trivial,
            Header
        }

        internal enum TradeSkillServiceType
        {
            Emboss,
            Embrodier,
            Enchant,
            Engrace,
            Inscribe,
            Modify,
            Tinker,
            nil
        }

        /// <summary>
        /// Returns whether the trade skill listing is filtered by a given item equipment slot
        /// </summary>
        /// <param name="index">Index of an item equipment slot (in the list returned by GetTradeSkillInvSlots()), or 0 for the "All" filter (number)</param>
        /// <example>enabled=GetTradeSkillInvSlotFilter(index)</example>
        internal static string[] GetTradeSkillInvSlotFilter(int index)
        {
            return Run("GetTradeSkillInvSlotFilter({0})", index); //enabled
        }

        /// <summary>
        /// Returns a list of recipe equipment slots for the current trade skill. These inventory types correspond to those of the items produced (see GetItemInfo() and GetAuctionItemInvTypes()) and can be used to filter the recipe list.
        /// </summary>
        /// <example>...=GetTradeSkillInvSlots()</example>
        internal static string[] GetTradeSkillInvSlots()
        {
            return Run("GetTradeSkillInvSlots()"); //...
        }

        /// <summary>
        /// Returns the current settings for filtering the trade skill listing by required level of items produced
        /// </summary>
        /// <example>minLevel,maxLevel=GetTradeSkillItemLevelFilter()</example>
        internal static string[] GetTradeSkillItemLevelFilter()
        {
            return Run("GetTradeSkillItemLevelFilter()"); //minLevel,maxLevel
        }

        /// <summary>
        /// Returns a hyperlink for the item created by a tradeskill recipe. The tooltip produced when resolving the link describes only the item created by the recipe. For a link which describes the recipe itself (its reagents and description), see GetTradeSkillRecipeLink().If the recipe does not create an item, this function returns the same hyperlink as does GetTradeSkillRecipeLink() (though the text of the link may differ).
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>link=GetTradeSkillItemLink(index)</example>
        internal static string[] GetTradeSkillItemLink(int index)
        {
            return Run("GetTradeSkillItemLink({0})", index); //link
        }

        /// <summary>
        /// Returns the current search text for filtering the trade skill listing by name
        /// </summary>
        /// <example>text=GetTradeSkillItemNameFilter()</example>
        internal static string[] GetTradeSkillItemNameFilter()
        {
            return Run("GetTradeSkillItemNameFilter()"); //text
        }

        /// <summary>
        /// Returns information about the current trade skill
        /// </summary>
        /// <example>tradeskillName,rank,maxLevel=GetTradeSkillLine()</example>
        internal static string[] GetTradeSkillLine()
        {
            return Run("GetTradeSkillLine()"); //tradeskillName,rank,maxLevel
        }

        /// <summary>
        /// Returns a hyperlink to the player's list of recipes for the current trade skill
        /// </summary>
        /// <example>link=GetTradeSkillListLink()</example>
        internal static string[] GetTradeSkillListLink()
        {
            return Run("GetTradeSkillListLink()"); //link
        }

        /// <summary>
        /// Returns the number of items created when performing a tradeskill recipe
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>minMade,maxMade=GetTradeSkillNumMade(index)</example>
        internal static string[] GetTradeSkillNumMade(int index)
        {
            return Run("GetTradeSkillNumMade({0})", index); //minMade,maxMade
        }

        /// <summary>
        /// Returns the number of different reagents required for a trade skill recipe
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>numReagents=GetTradeSkillNumReagents(index)</example>
        internal static string[] GetTradeSkillNumReagents(int index)
        {
            return Run("GetTradeSkillNumReagents({0})", index); //numReagents
        }

        /// <summary>
        /// Returns information about a reagent in a trade skill recipe
        /// </summary>
        /// <param name="skillIndex">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <param name="reagentIndex">Index of a reagent in the recipe (between 1 and GetTradeSkillNumReagents()) (number)</param>
        /// <example>reagentName,reagentTexture,reagentCount,playerReagentCount=GetTradeSkillReagentInfo(skillIndex,reagentIndex)</example>
        internal static string[] GetTradeSkillReagentInfo(int skillIndex, int reagentIndex)
        {
            return Run("GetTradeSkillReagentInfo({0},{1})", skillIndex, reagentIndex); //reagentName,reagentTexture,reagentCount,playerReagentCount
        }

        /// <summary>
        /// Returns a hyperlink for a reagent in a tradeskill recipe
        /// </summary>
        /// <param name="skillIndex">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <param name="reagentIndex">Index of a reagent in the recipe (between 1 and GetTradeSkillNumReagents()) (number)</param>
        /// <example>link=GetTradeSkillReagentItemLink(skillIndex,reagentIndex)</example>
        internal static string[] GetTradeSkillReagentItemLink(int skillIndex, int reagentIndex)
        {
            return Run("GetTradeSkillReagentItemLink({0},{1})", skillIndex, reagentIndex); //link
        }

        /// <summary>
        /// Returns hyperlink for a tradeskill recipe. The tooltip produced when resolving the link describes the recipe itself -- its reagents and (if present) description -- in addition to (if applicable) the item created. For a link which only describes the created item, see GetTradeSkillItemLink().
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>link=GetTradeSkillRecipeLink(index)</example>
        internal static string[] GetTradeSkillRecipeLink(int index)
        {
            return Run("GetTradeSkillRecipeLink({0})", index); //link
        }

        /// <summary>
        /// Returns the number of times the trade skill recipe currently being performed will repeat. Returns 1 if a recipe is not being performed; after DoTradeSkill() is called, returns the number of repetitions queued (which decrements as each repetition is finished).
        /// </summary>
        /// <example>repeatCount=GetTradeskillRepeatCount()</example>
        internal static string[] GetTradeskillRepeatCount()
        {
            return Run("GetTradeskillRepeatCount()"); //repeatCount
        }

        /// <summary>
        /// Returns the index of the currently selected trade skill recipe. Selection in the recipe list is used only for display in the default UI and has no effect on other Trade Skill APIs.
        /// </summary>
        /// <example>index=GetTradeSkillSelectionIndex()</example>
        internal static string[] GetTradeSkillSelectionIndex()
        {
            return Run("GetTradeSkillSelectionIndex()"); //index
        }

        /// <summary>
        /// Returns a list of recipe subclasses for the current trade skill. These subclasses correspond to those of the items produced (see GetItemInfo() and GetAuctionItemSubClasses()) and can be used to filter the recipe list.
        /// </summary>
        /// <example>...=GetTradeSkillSubClasses()</example>
        internal static string[] GetTradeSkillSubClasses()
        {
            return Run("GetTradeSkillSubClasses()"); //...
        }

        /// <summary>
        /// Returns whether the trade skill listing is filtered by a given item subclass
        /// </summary>
        /// <param name="index">Index of an item subclass (in the list returned by GetTradeSkillSubClasses()), or 0 for the "All" filter (number)</param>
        /// <example>enabled=GetTradeSkillSubClassFilter(index)</example>
        internal static string[] GetTradeSkillSubClassFilter(int index)
        {
            return Run("GetTradeSkillSubClassFilter({0})", index); //enabled
        }

        /// <summary>
        /// Returns a list of required tools for a trade skill recipe. A tool may be an item (e.g. Blacksmith Hammer, Virtuoso Inking Set) the player must possess, or a description of a generic (e.g. near an Anvil, in a Moonwell) or specific (e.g. Netherstorm, Emerald Dragonshrine) location to which the player must travel in order to perform the recipe. The hasTool return is only valid for the former.
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>toolName,hasTool,...=GetTradeSkillTools(index)</example>
        internal static string[] GetTradeSkillTools(int index)
        {
            return Run("GetTradeSkillTools({0})", index); //toolName,hasTool,...
        }

        /// <summary>
        /// Returns information about an item offered for trade by the target
        /// </summary>
        /// <param name="index">Index of an item slot on the player's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number)</param>
        /// <example>name,texture,numItems,quality,isUsable,enchantment=GetTradeTargetItemInfo(index)</example>
        internal static string[] GetTradeTargetItemInfo(int index)
        {
            return Run("GetTradeTargetItemInfo({0})", index); //name,texture,numItems,quality,isUsable,enchantment
        }

        /// <summary>
        /// Returns a hyperlink for an item offered for trade by the target
        /// </summary>
        /// <param name="index">Index of an item offered for trade by the target (between 1 and MAX_TRADE_ITEMS) (number)</param>
        /// <example>link=GetTradeTargetItemLink(index)</example>
        internal static string[] GetTradeTargetItemLink(int index)
        {
            return Run("GetTradeTargetItemLink({0})", index); //link
        }

        /// <summary>
        /// Returns the current trainer's greeting text. In the default UI, this text is displayed at the top of the trainer window.May return the empty string or the last used trainer's greeting text if called while not interacting with a trainer.
        /// </summary>
        /// <example>text=GetTrainerGreetingText()</example>
        internal static string[] GetTrainerGreetingText()
        {
            return Run("GetTrainerGreetingText()"); //text
        }

        /// <summary>
        /// Returns the index of the currently selected trainer service. Selection in the recipe list is used only for display in the default UI and has no effect on other Trade Skill APIs.
        /// </summary>
        /// <example>selectionIndex=GetTrainerSelectionIndex()</example>
        internal static string[] GetTrainerSelectionIndex()
        {
            return Run("GetTrainerSelectionIndex()"); //selectionIndex
        }

        /// <summary>
        /// Returns information about an ability required for purchasing a trainer service
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <param name="abilityIndex">Index of one of the service's ability requirements (between 1 and GetTrainerServiceNumAbilityReq(index)) (number)</param>
        /// <example>ability,hasReq=GetTrainerServiceAbilityReq(index,abilityIndex)</example>
        internal static string[] GetTrainerServiceAbilityReq(int index, int abilityIndex)
        {
            return Run("GetTrainerServiceAbilityReq({0},{1})", index, abilityIndex); //ability,hasReq
        }

        /// <summary>
        /// Returns the cost to purchase a trainer service
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>moneyCost,talentCost,skillCost=GetTrainerServiceCost(index)</example>
        internal static dynamic GetTrainerServiceCost(int index)
        {
            var strs = Run("GetTrainerServiceCost({0})", index); //moneyCost,talentCost,skillCost
            return new
            {
                moneyCost = Convert.ToInt32(strs[0]),
                talentCost = Convert.ToInt32(strs[1]),
                skillCost = Convert.ToInt32(strs[2]),
            };
        }

        /// <summary>
        /// Returns the description of a trainer service. Generally returns the same description found in the spell's tooltip for spells purchased from a class trainer; returns nil for trade skills and recipes.
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>text=GetTrainerServiceDescription(index)</example>
        internal static string[] GetTrainerServiceDescription(int index)
        {
            return Run("GetTrainerServiceDescription({0})", index); //text
        }

        /// <summary>
        /// Returns the icon for a trainer service
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>icon=GetTrainerServiceIcon(index)</example>
        internal static string[] GetTrainerServiceIcon(int index)
        {
            return Run("GetTrainerServiceIcon({0})", index); //icon
        }

        /// <summary>
        /// Returns information about an entry in the trainer service listing
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>serviceName,serviceSubText,serviceType,isExpanded=GetTrainerServiceInfo(index)</example>
        internal static dynamic GetTrainerServiceInfo(int index)
        {
            var strs = Run("GetTrainerServiceInfo({0})", index); //serviceName,serviceSubText,serviceType,isExpanded
            return new
            {
                serviceName = strs[0],
                serviceSubText = strs[1],
                serviceType = (SkillCategory)Enum.Parse(typeof(SkillCategory), strs[2], true),
                isExpanded = Convert.ToInt32(strs[3]),
            };
        }

        /// <summary>
        /// Returns a hyperlink for the item associated with a trainer service. Currently only returns item links for trainer services which teach trade skill recipes which produce items; does not return spell or recipe links.
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>link=GetTrainerServiceItemLink(index)</example>
        internal static string[] GetTrainerServiceItemLink(int index)
        {
            return Run("GetTrainerServiceItemLink({0})", index); //link
        }

        /// <summary>
        /// Returns the character level required to purchase a trainer service
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>reqLevel=GetTrainerServiceLevelReq(index)</example>
        internal static int GetTrainerServiceLevelReq(int index)
        {
            return Convert.ToInt32(Run(string.Format("GetTrainerServiceLevelReq({0})", index))[0]); //reqLevel
        }

        /// <summary>
        /// Returns the number of ability requirements for purchasing a trainer service. Ability requirements are often used for ranked class spells purchased from the trainer: e.g. learning Blood Strike (Rank 3) requires having learned Blood Strike (Rank 2). See GetTrainerServiceAbilityReq() for information about specific ability requirements.
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>numRequirements=GetTrainerServiceNumAbilityReq(index)</example>
        internal static string[] GetTrainerServiceNumAbilityReq(int index)
        {
            return Run("GetTrainerServiceNumAbilityReq({0})", index); //numRequirements
        }

        /// <summary>
        /// Returns the name of the skill line associated with a trainer service. For trade skill trainers, skill line is the name of the trade skill (e.g. Tailoring, First Aid). For other trainers, skill line is the name of the group header under which the skill appears (e.g. Riding, Frost, Protection, Holy, Defense, Dual Wield).
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>skillLine=GetTrainerServiceSkillLine(index)</example>
        internal static string[] GetTrainerServiceSkillLine(int index)
        {
            return Run("GetTrainerServiceSkillLine({0})", index); //skillLine
        }

        /// <summary>
        /// Returns information about the skill requirement for a trainer service. Often used for trade skill recipes: e.g. Netherweave Bag requires Tailoring (315).
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>skill,rank,hasReq=GetTrainerServiceSkillReq(index)</example>
        internal static string[] GetTrainerServiceSkillReq(int index)
        {
            return Run("GetTrainerServiceSkillReq({0})", index); //skill,rank,hasReq
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="index">The index of the trainer service (number)</param>
        /// <example>increaseText=GetTrainerServiceStepIncrease(index)</example>
        internal static string[] GetTrainerServiceStepIncrease(int index)
        {
            return Run("GetTrainerServiceStepIncrease({0})", index); //increaseText
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GetTrainerServiceStepReq()</example>
        internal static string[] GetTrainerServiceStepReq()
        {
            return Run("GetTrainerServiceStepReq()");
        }

        /// <summary>
        /// Returns whether the trainer service listing is filtered by a service status
        /// </summary>
        /// <param name="type">A trainer service status (string) available - Services the player can useunavailable - Services the player cannot currently useused - Services the player has already used</param>
        /// <example>isEnabled=GetTrainerServiceTypeFilter("type")</example>
        internal static string[] GetTrainerServiceTypeFilter(string type)
        {
            return Run("GetTrainerServiceTypeFilter(\"{0}\")", type); //isEnabled
        }

        /// <summary>
        /// Returns whether the trainer service listing is filtered by a skill line. The default UI does not provide control for skill line filters, but they can nonetheless be used to alter the contents of the trainer service listing.
        /// </summary>
        /// <param name="index">Index of a skill line filter (in the list returned by GetTrainerSkillLines()) (number)</param>
        /// <example>isEnabled=GetTrainerSkillLineFilter(index)</example>
        internal static string[] GetTrainerSkillLineFilter(int index)
        {
            return Run("GetTrainerSkillLineFilter({0})", index); //isEnabled
        }

        /// <summary>
        /// Returns the list of service group names available at a trainer. Skill lines as used here correspond to the group headers in the trainer service listing. Not used for trade skill trainers.
        /// </summary>
        /// <example>...=GetTrainerSkillLines()</example>
        internal static string[] GetTrainerSkillLines()
        {
            return Run("GetTrainerSkillLines()"); //...
        }

        /// <summary>
        /// Returns the health modifier for the player's pet
        /// </summary>
        /// <param name="unit">A unit to query; only valid for pet (string, unitID)</param>
        /// <example>modifier=GetUnitHealthModifier("unit")</example>
        internal static string[] GetUnitHealthModifier(string unit)
        {
            return Run("GetUnitHealthModifier(\"{0}\")", unit); //modifier
        }

        /// <summary>
        /// Returns the increase in health regeneration rate provided by Spirit
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>regen=GetUnitHealthRegenRateFromSpirit("unit")</example>
        internal static string[] GetUnitHealthRegenRateFromSpirit(string unit)
        {
            return Run("GetUnitHealthRegenRateFromSpirit(\"{0}\")", unit); //regen
        }

        /// <summary>
        /// Returns the increase in mana regeneration rate provided by Spirit
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>regen=GetUnitManaRegenRateFromSpirit("unit")</example>
        internal static string[] GetUnitManaRegenRateFromSpirit(string unit)
        {
            return Run("GetUnitManaRegenRateFromSpirit(\"{0}\")", unit); //regen
        }

        /// <summary>
        /// Returns the maximum health modifier for the player's pet
        /// </summary>
        /// <param name="unit">A unit to query; only valid for pet (string, unitID)</param>
        /// <example>modifier=GetUnitMaxHealthModifier("unit")</example>
        internal static string[] GetUnitMaxHealthModifier(string unit)
        {
            return Run("GetUnitMaxHealthModifier(\"{0}\")", unit); //modifier
        }

        /// <summary>
        /// Returns a string summarizing a unit's name and server
        /// </summary>
        /// <param name="unit">Unit to query (string, unitID)</param>
        /// <param name="showServerName">True to include the server name in the return value if the unit is not from the same server as the player; false to only include a short label in such circumstances (boolean)</param>
        /// <example>nameString=GetUnitName("unit",showServerName)</example>
        internal static string[] GetUnitName(string unit, string showServerName)
        {
            return Run("GetUnitName(\"{0}\",{1})", unit, showServerName); //nameString
        }

        /// <summary>
        /// Returns the player's current pitch (slope or angle of movement). Only valid for the unitID "player". The slope returned here reflects only the direction of movement for swimming or flying, not the current orientation of the player model or camera. (When on solid ground, GetUnitPitch indicates what the angle of flight would be were the player to start flying.)The returned value is in radians, with positive values indicating upward slope, negative values indicating downward slope, and 0 indicating perfectly level flight (or swimming).
        /// </summary>
        /// <param name="unit">Unit to query; only valid for player (string, unitID)</param>
        /// <example>pitch=GetUnitPitch("unit")</example>
        internal static string[] GetUnitPitch(string unit)
        {
            return Run("GetUnitPitch(\"{0}\")", unit); //pitch
        }

        /// <summary>
        /// Returns the mana modifier for the player's pet
        /// </summary>
        /// <param name="unit">A unit to query; only valid for pet (string, unitID)</param>
        /// <example>modifier=GetUnitPowerModifier("unit")</example>
        internal static string[] GetUnitPowerModifier(string unit)
        {
            return Run("GetUnitPowerModifier(\"{0}\")", unit); //modifier
        }

        /// <summary>
        /// Returns a unit's current speed. Valid for all observable units. Values returned indicate the current movement speed in yards per second. (It's not relative to facing or ground position; i.e. you won't see a smaller value when flying up at an angle or a negative value when backing up.) Does not indicate falling speed or the speed of boats, zeppelins, and some forms of quest-related transportation, but does indicate current speed on taxi flights and when moving due to combat effects such as Disengage, Death Grip, or various knockback abilities.Examples: Normal running: 7; Walking: 2.5; Running backwards: 4.5; Epic flying mount: 26.6
        /// </summary>
        /// <param name="unit">Unit to query (unitid)</param>
        /// <example>speed=GetUnitSpeed(unit)</example>
        internal static string[] GetUnitSpeed(string unit)
        {
            return Run("GetUnitSpeed({0})", unit); //speed
        }

        /// <summary>
        /// Returns the number of unused talent points
        /// </summary>
        /// <param name="inspect">true to return information for the currently inspected unit; false to return information for the player (boolean)</param>
        /// <param name="pet">true to return information for the player's pet; false to return information for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>points=GetUnspentTalentPoints(inspect,pet,talentGroup)</example>
        internal static string[] GetUnspentTalentPoints(string inspect, string pet, int talentGroup)
        {
            return Run("GetUnspentTalentPoints({0},{1},{2})", inspect, pet, talentGroup); //points
        }

        /// <summary>
        /// Returns information about graphics capabilities of the current system
        /// </summary>
        /// <example>hasAnisotropic,hasPixelShaders,hasVertexShaders,hasTrilinear,hasTripleBufering,maxAnisotropy,hasHardwareCursor=GetVideoCaps()</example>
        internal static string[] GetVideoCaps()
        {
            return Run("GetVideoCaps()"); //hasAnisotropic,hasPixelShaders,hasVertexShaders,hasTrilinear,hasTripleBufering,maxAnisotropy,hasHardwareCursor
        }

        /// <summary>
        /// Returns an identifier for the active voice session
        /// </summary>
        /// <example>id=GetVoiceCurrentSessionID()</example>
        internal static string[] GetVoiceCurrentSessionID()
        {
            return Run("GetVoiceCurrentSessionID()"); //id
        }

        /// <summary>
        /// Returns information about a voice session
        /// </summary>
        /// <param name="session">Index of a voice session (between 1 and GetNumVoiceSessions()) (number)</param>
        /// <example>name,active=GetVoiceSessionInfo(session)</example>
        internal static string[] GetVoiceSessionInfo(int session)
        {
            return Run("GetVoiceSessionInfo({0})", session); //name,active
        }

        /// <summary>
        /// Returns information about a member of a voice channel
        /// </summary>
        /// <param name="session">Index of a voice session (between 1 and GetNumVoiceSessions()) (number)</param>
        /// <param name="index">Index of a member in the voice session (between 1 and GetNumVoiceSessionMembersBySessionID(session)) (number)</param>
        /// <example>name,voiceActive,sessionActive,muted,squelched=GetVoiceSessionMemberInfoBySessionID(session,index)</example>
        internal static string[] GetVoiceSessionMemberInfoBySessionID(int session, int index)
        {
            return Run("GetVoiceSessionMemberInfoBySessionID({0},{1})", session, index); //name,voiceActive,{0}Active,muted,squelched
        }

        /// <summary>
        /// Returns whether a character has voice chat enabled
        /// </summary>
        /// <param name="unit">The unitid to query (unitid)</param>
        /// <param name="name">The name of the player to query (string)</param>
        /// <param name="channel">Channel to query for voice status. (string)</param>
        /// <example>status=GetVoiceStatus(unit,"channel")orGetVoiceStatus("name","channel")</example>
        internal static string[] GetVoiceStatus(string unit, string name, string channel)
        {
            return Run("GetVoiceStatus({0},\"{2}\")orGetVoiceStatus(\"{1}\",\"{2}\")", unit, name, channel); //status
        }

        /// <summary>
        /// Returns information about the "watched" faction (displayed on the XP bar in the default UI)
        /// </summary>
        /// <example>name,standingID,barMin,barMax,barValue=GetWatchedFactionInfo()</example>
        internal static string[] GetWatchedFactionInfo()
        {
            return Run("GetWatchedFactionInfo()"); //name,standingID,barMin,barMax,barValue
        }

        /// <summary>
        /// Returns the current value of the water detail option
        /// </summary>
        /// <example>value=GetWaterDetail()</example>
        internal static string[] GetWaterDetail()
        {
            return Run("GetWaterDetail()"); //value
        }

        /// <summary>
        /// Returns information about temporary enchantments on the player's weapons. Does not return information about permanent enchantments added via Enchanting, Runeforging, etc; refers instead to temporary buffs such as wizard oils, sharpening stones, rogue poisons, and shaman weapon enhancements.
        /// </summary>
        /// <example>hasMainHandEnchant,mainHandExpiration,mainHandCharges,hasOffHandEnchant,offHandExpiration,offHandCharges=GetWeaponEnchantInfo()</example>
        internal static string[] GetWeaponEnchantInfo()
        {
            return Run("GetWeaponEnchantInfo()"); //hasMainHandEnchant,mainHandExpiration,mainHandCharges,hasOffHandEnchant,offHandExpiration,offHandCharges
        }

        /// <summary>
        /// Returns information about a character in the Who system query results
        /// </summary>
        /// <param name="index">Index of an entry in the Who system query results (between 1 and GetNumWhoResults()) (number)</param>
        /// <example>name,guild,level,race,class,zone,filename=GetWhoInfo(index)</example>
        internal static string[] GetWhoInfo(int index)
        {
            return Run("GetWhoInfo({0})", index); //name,guild,level,race,class,zone,filename
        }

        /// <summary>
        /// Returns the amount of time remaining until the next PvP event in the Wintergrasp zone. Only accurate while the player is in Northrend; returns nil if the player has not been in Northrend this session, or the last known value if the player has been in Northrend this session and is currently elsewhere. Also returns nil if the Battle for Wintergrasp is in progress.
        /// </summary>
        /// <example>seconds=GetWintergraspWaitTime()</example>
        internal static string[] GetWintergraspWaitTime()
        {
            return Run("GetWintergraspWaitTime()"); //seconds
        }

        /// <summary>
        /// Returns information on the players queue for a world PvP zone
        /// </summary>
        /// <param name="index">Index of the queue to get data for (between 1 and MAX_WORLD_PVP_QUEUES) (number)</param>
        /// <example>status,mapName,queueID=GetWorldPVPQueueStatus(index)</example>
        internal static string[] GetWorldPVPQueueStatus(int index)
        {
            return Run("GetWorldPVPQueueStatus({0})", index); //status,mapName,queueID
        }

        /// <summary>
        /// Returns information about a world state UI element. World State UI elements include PvP, instance, and quest objective information (displayed at the top center of the screen in the default UI) as well as more specific information for "control point" style PvP objectives. Examples: the Horde/Alliance score in Arathi Basin, the tower status and capture progress bars in Hellfire Peninsula, the progress text in the Black Morass and Violet Hold instances, and the event status text for quests The Light of Dawn and The Battle For The Undercity.
        /// </summary>
        /// <param name="index">Index of a world state UI element (between 1 and GetNumWorldStateUI()) (number)</param>
        /// <example>uiType,state,text,icon,dynamicIcon,tooltip,dynamicTooltip,extendedUI,extendedUIState1,extendedUIState2,extendedUIState3=GetWorldStateUIInfo(index)</example>
        internal static string[] GetWorldStateUIInfo(int index)
        {
            return Run("GetWorldStateUIInfo({0})", index); //uiType,state,text,icon,dynamicIcon,tooltip,dynamicTooltip,extendedUI,extendedUIState1,extendedUIState2,extendedUIState3
        }

        /// <summary>
        /// Returns the amount of rested bonus experience available. This value increments as the player spends time resting and depletes as the player earns experience from kills while rested.
        /// </summary>
        /// <example>exhaustionXP=GetXPExhaustion()</example>
        internal static string[] GetXPExhaustion()
        {
            return Run("GetXPExhaustion()"); //exhaustionXP
        }

        /// <summary>
        /// Returns PVP information about the current area. Information returned may apply to the current subzone, not the entire zone.
        /// </summary>
        /// <example>pvpType,isSubZonePVP,factionName=GetZonePVPInfo()</example>
        internal static string[] GetZonePVPInfo()
        {
            return Run("GetZonePVPInfo()"); //pvpType,isSubZonePVP,factionName
        }

        /// <summary>
        /// Returns the name of the zone in which the player is located
        /// </summary>
        /// <example>zone=GetZoneText()</example>
        internal static string GetZoneText()
        {
            return Run("GetZoneText()")[0]; //zone
        }

        /// <summary>
        /// Awards a loot item to a group member. Has no effect if the player is not the loot master or if no loot or candidate matching the given parameters exists.
        /// </summary>
        /// <param name="slot">Index of a loot slot (between 1 and GetNumLootItems()) (number)</param>
        /// <param name="index">Index of a loot candidate (see GetMasterLootCandidate()) (number)</param>
        /// <example>GiveMasterLoot(slot,index)</example>
        internal static string[] GiveMasterLoot(int slot, int index)
        {
            return Run("GiveMasterLoot({0},{1})", slot, index);
        }

        /// <summary>
        /// Returns whether a socket is eligible for the glyph currently awaiting a target. Only valid during glyph application: when the player has activated the glyph item but before she has chosen the glyph slot to put it in (i.e. the glowing hand cursor is showing).
        /// </summary>
        /// <param name="socket">Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex)</param>
        /// <example>match=GlyphMatchesSocket(socket)</example>
        internal static string[] GlyphMatchesSocket(string socket)
        {
            return Run("GlyphMatchesSocket({0})", socket); //match
        }

        /// <summary>
        /// Returns an iterator function for finding pattern matches in a string. Alias for the standard library function string.gmatch.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <param name="pattern">A regular expression pattern (string, pattern)</param>
        /// <example>iterator=gmatch("s","pattern")</example>
        internal static string[] gmatch(string s, string pattern)
        {
            return Run("gmatch(\"{0}\",\"{1}\")", s, pattern); //iterator
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>GMRequestPlayerInfo()</example>
        internal static string[] GMRequestPlayerInfo()
        {
            return Run("GMRequestPlayerInfo()");
        }

        /// <summary>
        /// Requests further GM interaction on a ticket to which a GM has already responded
        /// </summary>
        /// <example>GMResponseNeedMoreHelp()</example>
        internal static string[] GMResponseNeedMoreHelp()
        {
            return Run("GMResponseNeedMoreHelp()");
        }

        /// <summary>
        /// Notifies the server that the player's GM ticket issue has been resolved
        /// </summary>
        /// <example>GMResponseResolve()</example>
        internal static string[] GMResponseResolve()
        {
            return Run("GMResponseResolve()");
        }

        /// <summary>
        /// Returns text of multiple-choice question answers in a GM survey
        /// </summary>
        /// <param name="questionIndex">Index of a survey question (between 1 and MAX_SURVEY_QUESTIONS) (number)</param>
        /// <param name="answerIndex">Index of one of the question's answers (between 1 and MAX_SURVEY_ANSWERS) (number)</param>
        /// <example>answerText=GMSurveyAnswer(questionIndex,answerIndex)</example>
        internal static string[] GMSurveyAnswer(int questionIndex, int answerIndex)
        {
            return Run("GMSurveyAnswer({0},{1})", questionIndex, answerIndex); //answerText
        }

        /// <summary>
        /// Submits an answer to a GM survey question
        /// </summary>
        /// <param name="question">The index of the question being answered (number)</param>
        /// <param name="rank">The rank selected (number)</param>
        /// <param name="comment">A comment for the given question (string)</param>
        /// <example>GMSurveyAnswerSubmit(question,rank,"comment")</example>
        internal static string[] GMSurveyAnswerSubmit(int question, int rank, string comment)
        {
            return Run("GMSurveyAnswerSubmit({0},{1},\"{2}\")", question, rank, comment);
        }

        /// <summary>
        /// Submits a comment to the current GM survey
        /// </summary>
        /// <param name="comment">The comment made on the GM Survey (string)</param>
        /// <example>GMSurveyCommentSubmit("comment")</example>
        internal static string[] GMSurveyCommentSubmit(string comment)
        {
            return Run("GMSurveyCommentSubmit(\"{0}\")", comment);
        }

        /// <summary>
        /// Returns the number of possible answers for a GM Survey question. Deprecated; default UI uses the constant MAX_SURVEY_ANSWERS instead.
        /// </summary>
        /// <param name="questionIndex">Index of a survey question (between 1 and MAX_SURVEY_QUESTIONS) (number)</param>
        /// <example>numAnswers=GMSurveyNumAnswers(questionIndex)</example>
        internal static string[] GMSurveyNumAnswers(int questionIndex)
        {
            return Run("GMSurveyNumAnswers({0})", questionIndex); //numAnswers
        }

        /// <summary>
        /// Returns the text of a specific question from a GM survey
        /// </summary>
        /// <param name="index">The index of a GM survey question (number)</param>
        /// <example>surveyQuestion=GMSurveyQuestion(index)</example>
        internal static string[] GMSurveyQuestion(int index)
        {
            return Run("GMSurveyQuestion({0})", index); //surveyQuestion
        }

        /// <summary>
        /// Submits the current GM survey
        /// </summary>
        /// <example>GMSurveySubmit()</example>
        internal static string[] GMSurveySubmit()
        {
            return Run("GMSurveySubmit()");
        }

        /// <summary>
        /// Grants a level to the player's Recruit-a-Friend partner. Does not immediately cause the partner character to level up: that player is given a chance to accept or decline the offered level.
        /// </summary>
        /// <param name="unit">Unit to gift a level (string, unitID)</param>
        /// <example>GrantLevel("unit")</example>
        internal static string[] GrantLevel(string unit)
        {
            return Run("GrantLevel(\"{0}\")", unit);
        }

        /// <summary>
        /// Returns a string in which occurrences of a pattern are replaced. Alias for the standard library function string.gsub.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <param name="pattern">A regular expression pattern (string, pattern)</param>
        /// <param name="rep">String with which to replace occurrences of pattern; may contain specifiers for numbered captures in the pattern (string)</param>
        /// <param name="repTable">Table containing replacement strings; replacements are looked up using captured substrings as keys, or the entire match if pattern specifies no captures (table)</param>
        /// <param name="repFunc">Function to supply replacement strings; called with captured substrings (or the entire match if pattern specifies no captures) as arguments (function)</param>
        /// <param name="maxReplaced">Maximum number of replacements to be made (number)</param>
        /// <example>newString,numMatched=gsub("s","pattern","rep"[,maxReplaced])orgsub("s","pattern",repTable[,maxReplaced])orgsub("s","pattern",repFunc[,maxReplaced])</example>
        internal static string[] gsub(string s, string pattern, string rep, string repTable, string repFunc, int maxReplaced)
        {
            return Run("g{0}ub(\"{0}\",\"{1}\",\"{2}\"[,{5}])org{0}ub(\"{0}\",\"{1}\",{2}Table[,{5}])org{0}ub(\"{0}\",\"{1}\",{2}Func[,{5}])", s, pattern, rep, repTable, repFunc, maxReplaced); //newString,numMatched
        }

        /// <summary>
        /// Adds a new rank to the player's guild. The newly added rank becomes the lowest rank in the guild.
        /// </summary>
        /// <param name="name">Name of the new rank (string)</param>
        /// <example>GuildControlAddRank("name")</example>
        internal static string[] GuildControlAddRank(string name)
        {
            return Run("GuildControlAddRank(\"{0}\")", name);
        }

        /// <summary>
        /// Deletes a guild rank
        /// </summary>
        /// <param name="name">Name of the rank to delete (string)</param>
        /// <example>GuildControlDelRank("name")</example>
        internal static string[] GuildControlDelRank(string name)
        {
            return Run("GuildControlDelRank(\"{0}\")", name);
        }

        /// <summary>
        /// Returns the number of ranks in the guild
        /// </summary>
        /// <example>numRanks=GuildControlGetNumRanks()</example>
        internal static string[] GuildControlGetNumRanks()
        {
            return Run("GuildControlGetNumRanks()"); //numRanks
        }

        /// <summary>
        /// Returns the list of privileges for the guild rank being edited. The name of a privilege for an index in this list can be found in the global variable "GUILDCONTROL_OPTION"..index.
        /// </summary>
        /// <example>...=GuildControlGetRankFlags()</example>
        internal static string[] GuildControlGetRankFlags()
        {
            return Run("GuildControlGetRankFlags()"); //...
        }

        /// <summary>
        /// Returns the name of a guild rank
        /// </summary>
        /// <param name="rank">Index of a rank to edit (between 1 and GuildControlGetNumRanks()) (number)</param>
        /// <example>rankName=GuildControlGetRankName(rank)</example>
        internal static string[] GuildControlGetRankName(int rank)
        {
            return Run("GuildControlGetRankName({0})", rank); //{0}Name
        }

        /// <summary>
        /// Saves changes to the guild rank being edited
        /// </summary>
        /// <param name="name">New name for the guild rank (string)</param>
        /// <example>GuildControlSaveRank("name")</example>
        internal static string[] GuildControlSaveRank(string name)
        {
            return Run("GuildControlSaveRank(\"{0}\")", name);
        }

        /// <summary>
        /// Chooses a guild rank to edit
        /// </summary>
        /// <param name="rank">Index of a rank to edit (between 1 and GuildControlGetNumRanks()) (number)</param>
        /// <example>GuildControlSetRank(rank)</example>
        internal static string[] GuildControlSetRank(int rank)
        {
            return Run("GuildControlSetRank({0})", rank);
        }

        /// <summary>
        /// Enables or disables a privilege for the guild rank being edited. Changes are not saved until a call is made to GuildControlSaveRank(). 
        /// </summary>
        /// <param name="index">Index of a privilege to change (number) 1 - Guildchat listen2 - Guildchat speak3 - Officerchat listen4 - Officerchat speak5 - Promote6 - Demote7 - Invite Member8 - Remove Member9 - Set MOTD10 - Edit public static Notes11 - View Officer Note12 - Edit Officer Note13 - Modify Guild Info15 - Use guild funds for repairs16 - Withdraw gold from the guild bank17 - Create Guild Event</param>
        /// <param name="enabled">True to allow the privilege; false to deny (boolean)</param>
        /// <example>GuildControlSetRankFlag(index,enabled)</example>
        internal static string[] GuildControlSetRankFlag(int index, string enabled)
        {
            return Run("GuildControlSetRankFlag({0},{1})", index, enabled);
        }

        /// <summary>
        /// Reduces a guild member's rank by one. The player can only demote members whose rank is below the player's own, and only if the player has permission to demote (i.e. if CanGuildDemote() returns 1).
        /// </summary>
        /// <param name="name">Name of a guild member to demote (string)</param>
        /// <example>GuildDemote("name")</example>
        internal static string[] GuildDemote(string name)
        {
            return Run("GuildDemote(\"{0}\")", name);
        }

        /// <summary>
        /// Disbands the player's guild. Only has effect if the player is the guild leader
        /// </summary>
        /// <example>GuildDisband()</example>
        internal static string[] GuildDisband()
        {
            return Run("GuildDisband()");
        }

        /// <summary>
        /// Requests guild information from the server. Fires two CHAT_MSG_SYSTEM events, one containing the name of the guild, followed by one containing the date the guild was created and how many players and accounts belong to the guild.
        /// </summary>
        /// <example>GuildInfo()</example>
        internal static string[] GuildInfo()
        {
            return Run("GuildInfo()");
        }

        /// <summary>
        /// Invites a character to join the player's guild
        /// </summary>
        /// <param name="name">Name of a character to invite (string)</param>
        /// <example>GuildInvite("name")</example>
        internal static string[] GuildInvite(string name)
        {
            return Run("GuildInvite(\"{0}\")", name);
        }

        /// <summary>
        /// Leaves the player's current guild
        /// </summary>
        /// <example>GuildLeave()</example>
        internal static string[] GuildLeave()
        {
            return Run("GuildLeave()");
        }

        /// <summary>
        /// Increases a guild member's rank by one. The player can only promote members up to the rank immediately below the player's own, and only if the player has permission to promote (i.e. if CanGuildPromote() returns 1).
        /// </summary>
        /// <param name="name">Name of a guild member to promote (string)</param>
        /// <example>GuildPromote("name")</example>
        internal static string[] GuildPromote(string name)
        {
            return Run("GuildPromote(\"{0}\")", name);
        }

        /// <summary>
        /// Requests guild roster information from the server. Information is not returned immediately; the GUILD_ROSTER_UPDATE event fires when data is available for retrieval via GetGuildRosterInfo() and related functions. Requests are throttled to reduce server load; the server will only respond to a new request approximately 10 seconds after a previous request.
        /// </summary>
        /// <example>GuildRoster()</example>
        internal static string[] GuildRoster()
        {
            return Run("GuildRoster()");
        }

        /// <summary>
        /// Sets the officer note for a guild member
        /// </summary>
        /// <param name="index">Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number)</param>
        /// <param name="note">Note text to set for the guild member (up to 31 characters) (string)</param>
        /// <example>GuildRosterSetOfficerNote(index,"note")</example>
        internal static string[] GuildRosterSetOfficerNote(int index, string note)
        {
            return Run("GuildRosterSetOfficerNote({0},\"{1}\")", index, note);
        }

        /// <summary>
        /// Sets the public static note for a guild member
        /// </summary>
        /// <param name="index">Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number)</param>
        /// <param name="note">Note text to set for the guild member (up to 31 characters) (string)</param>
        /// <example>GuildRosterSetPublicNote(index,"note")</example>
        internal static string[] GuildRosterSetPublicNote(int index, string note)
        {
            return Run("GuildRosterSetPublicNote({0},\"{1}\")", index, note);
        }

        /// <summary>
        /// Promotes a member to guild leader. Only works if the player is the guild leader and the named character is in the guild and currently online.
        /// </summary>
        /// <param name="name">Name of a guild member to promote to leader (string)</param>
        /// <example>GuildSetLeader("name")</example>
        internal static string[] GuildSetLeader(string name)
        {
            return Run("GuildSetLeader(\"{0}\")", name);
        }

        /// <summary>
        /// Sets the guild Message of the Day. Guild members see the message of the day upon login and whenever it is changed (and cannot disable its display in the default UI), so keeping the message concise is recommended.
        /// </summary>
        /// <param name="message">New text for the message of the day (up to 128 characters; embedded newlines allowed) (string)</param>
        /// <example>GuildSetMOTD("message")</example>
        internal static string[] GuildSetMOTD(string message)
        {
            return Run("GuildSetMOTD(\"{0}\")", message);
        }

        /// <summary>
        /// Removes a character from the player's guild
        /// </summary>
        /// <param name="name">Name of a guild member to remove (string)</param>
        /// <example>GuildUninvite("name")</example>
        internal static string[] GuildUninvite(string name)
        {
            return Run("GuildUninvite(\"{0}\")", name);
        }

        /// <summary>
        /// Returns whether an action slot contains an action
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>hasAction=HasAction(slot)</example>
        internal static string[] HasAction(string slot)
        {
            return Run("HasAction({0})", slot); //hasAction
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>HasDebugZoneMap()</example>
        internal static string[] HasDebugZoneMap()
        {
            return Run("HasDebugZoneMap()");
        }

        /// <summary>
        /// Returns whether the player has a completed petition. Used by the default UI to show and hide the buttons for turning in an Arena charter.
        /// </summary>
        /// <example>hasPetition=HasFilledPetition()</example>
        internal static string[] HasFilledPetition()
        {
            return Run("HasFilledPetition()"); //hasPetition
        }

        /// <summary>
        /// Returns whether the player character can be controlled
        /// </summary>
        /// <example>hasControl=HasFullControl()</example>
        internal static string[] HasFullControl()
        {
            return Run("HasFullControl()"); //hasControl
        }

        /// <summary>
        /// Returns whether PvP honor and arena data for the currently inspected unit has been downloaded from the server. See RequestInspectHonorData() to request PvP data from the server.
        /// </summary>
        /// <example>hasData=HasInspectHonorData()</example>
        internal static string[] HasInspectHonorData()
        {
            return Run("HasInspectHonorData()"); //hasData
        }

        /// <summary>
        /// Returns whether the player has any keys stored in the Keyring container. Used in the default UI to show or hide the UI for the Keyring container
        /// </summary>
        /// <example>hasKey=HasKey()</example>
        internal static string[] HasKey()
        {
            return Run("HasKey()"); //hasKey
        }

        /// <summary>
        /// Returns whether the player has received new mail since last visiting a mailbox
        /// </summary>
        /// <example>hasMail=HasNewMail()</example>
        internal static string[] HasNewMail()
        {
            return Run("HasNewMail()"); //hasMail
        }

        /// <summary>
        /// Returns whether the player's current pet has a spellbook
        /// </summary>
        /// <example>hasPetSpells,petType=HasPetSpells()</example>
        internal static string[] HasPetSpells()
        {
            return Run("HasPetSpells()"); //hasPetSpells,petType
        }

        /// <summary>
        /// Returns whether the pet UI should be displayed for the player's pet. Special quest-related pets, vehicles, and possessed units all count as pets but do not use the pet UI or associated functions.
        /// </summary>
        /// <example>hasPetUI,isHunterPet=HasPetUI()</example>
        internal static string[] HasPetUI()
        {
            return Run("HasPetUI()"); //hasPetUI,isHunterPet
        }

        /// <summary>
        /// Returns whether the player can instantly resurrect in place. Only returns valid information while the player is dead and has not yet released his or her spirit to the graveyard.
        /// </summary>
        /// <example>text=HasSoulstone()</example>
        internal static string[] HasSoulstone()
        {
            return Run("HasSoulstone()"); //text
        }

        /// <summary>
        /// Returns whether the player has a wand equipped
        /// </summary>
        /// <example>isEquipped=HasWandEquipped()</example>
        internal static string[] HasWandEquipped()
        {
            return Run("HasWandEquipped()"); //isEquipped
        }

        /// <summary>
        /// Instantly exits the current world PvP zone, returning to the player's Hearthstone location. Resets the player's Hearthstone cooldown, and also returns the player to life if dead. Only usable if the player is in a world PvP combat zone (i.e. Wintergrasp).
        /// </summary>
        /// <example>HearthAndResurrectFromArea()</example>
        internal static string[] HearthAndResurrectFromArea()
        {
            return Run("HearthAndResurrectFromArea()");
        }

        /// <summary>
        /// Returns the cursor to normal mode after use of ShowRepairCursor()
        /// </summary>
        /// <example>HideRepairCursor()</example>
        internal static string[] HideRepairCursor()
        {
            return Run("HideRepairCursor()");
        }

        /// <summary>
        /// Add a function to be called after execution of a secure function. Allows one to "post-hook" a secure function without tainting the original.The original function will still be called, but the function supplied will be called after the original, with the same arguments. Return values from the supplied function are discarded. Note that there is no API to remove a hook from a function: any hooks applied will remain in place until the UI is reloaded.Only allows hooking of functions named by a global variable; to hook a script handler on a Frame object, see Frame:HookScript().
        /// </summary>
        /// <param name="table">A table object that contains the function to be hooked (table)</param>
        /// <param name="function">The name of the function to be hooked (string)</param>
        /// <param name="hookfunc">The function to be called each time the original function is called (function)</param>
        /// <example>hooksecurefunc([table,]"function",hookfunc)</example>
        internal static string[] hooksecurefunc(string table, string function, string hookfunc)
        {
            return Run("hooksecurefunc([{0},]\"{1}\",{2})", table, function, hookfunc);
        }

        /// <summary>
        /// Returns whether a message in the player's inbox can be deleted
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>canDelete=InboxItemCanDelete(mailID)</example>
        internal static string[] InboxItemCanDelete(int mailID)
        {
            return Run("InboxItemCanDelete({0})", mailID); //canDelete
        }

        /// <summary>
        /// Returns whether an in-game cinematic is playing. Applies to in-game-engine cinematics (such as when logging into a new character for the first time), not prerecorded movies.
        /// </summary>
        /// <example>inCinematic=InCinematic()</example>
        internal static string[] InCinematic()
        {
            return Run("InCinematic()"); //inCinematic
        }

        /// <summary>
        /// Returns whether the user interface is protected due to combat. Non-Blizzard code is allowed to perform certain UI actions (such as changing secure template attributes or moving/showing/hiding secure frames) only if the player is not in combat; this function can be used to determine whether such actions are currently available.
        /// </summary>
        /// <example>inLockdown=InCombatLockdown()</example>
        internal static string[] InCombatLockdown()
        {
            return Run("InCombatLockdown()"); //inLockdown
        }

        /// <summary>
        /// Offers to trade with a given unit. The trade process does not begin immediately; once the server has determined both clients can trade, the TRADE_SHOW event fires.
        /// </summary>
        /// <param name="unit">A unit with which to trade (string, unitID)</param>
        /// <param name="name">The name of a unit with which to trade; only valid for nearby units in the player's party/raid (string)</param>
        /// <example>InitiateTrade("unit")orInitiateTrade("name")</example>
        internal static string[] InitiateTrade(string unit, string name)
        {
            return Run("InitiateTrade(\"{0}\")orInitiateTrade(\"{1}\")", unit, name);
        }

        /// <summary>
        /// Initializes the frame used to display the character location "ping" on the World Map
        /// </summary>
        /// <example>InitWorldMapPing()</example>
        internal static string[] InitWorldMapPing()
        {
            return Run("InitWorldMapPing()");
        }

        /// <summary>
        /// Returns whether the item repair cursor mode is currently active. Repair mode is entered by calling ShowRepairCursor() and exited by calling HideRepairCursor(); while in repair mode, calling PickupContainerItem() or PickupInventoryItem() will attempt to repair the item (and deduct the cost of such from the player's savings) instead of putting it on the cursor.
        /// </summary>
        /// <example>inRepair=InRepairMode()</example>
        internal static string[] InRepairMode()
        {
            return Run("InRepairMode()"); //inRepair
        }

        /// <summary>
        /// Interacts with (as with right-clicking on) a unit
        /// </summary>
        /// <param name="unit">The unit to interact with (unitid)</param>
        /// <example>InteractUnit(unit)</example>
        internal static string[] InteractUnit(string unit)
        {
            return Run("InteractUnit(\"{0}\")", unit);
        }

        /// <summary>
        /// Opens the Interface Options window and displays a given panel within it
        /// </summary>
        /// <param name="panelName">The registered name of an options panel (string)</param>
        /// <param name="panel">A Frame object already registered as an options panel (table)</param>
        /// <example>InterfaceOptionsFrame_OpenToCategory("panelName")orInterfaceOptionsFrame_OpenToCategory(panel)</example>
        internal static string[] InterfaceOptionsFrame_OpenToCategory(string panelName, string panel)
        {
            return Run("InterfaceOptionsFrame_OpenToCategory(\"{0}\")orInterfaceOptionsFrame_OpenToCategory({1})", panelName, panel);
        }

        /// <summary>
        /// Registers a panel to be displayed in the Interface Options window. The following members and methods are used by the Interface Options frame to display and organize panels:panel.name - string (required) - The name of the AddOn or group of configuration options. This is the text that will display in the AddOn options list.panel.parent - string (optional) - Name of the parent of the AddOn or group of configuration options. This identifies "panel" as the child of another category. If the parent category doesn't exist, "panel" will be displayed as a regular category.panel.okay - function (optional) - This method will run when the player clicks "okay" in the Interface Options. panel.cancel - function (optional) - This method will run when the player clicks "cancel" in the Interface Options. Use this to revert their changes.panel.default - function (optional) - This method will run when the player clicks "defaults".  Use this to revert their changes to your defaults.panel.refresh - function (optional) - This method will run when the Interface Options frame calls its OnShow function and after defaults have been applied via the panel.default method described above. Use this to refresh your panel's UI in case settings were changed without player interaction.
        /// </summary>
        /// <param name="panel">A Frame object (table)</param>
        /// <example>InterfaceOptions_AddCategory(panel)</example>
        internal static string[] InterfaceOptions_AddCategory(string panel)
        {
            return Run("InterfaceOptions_AddCategory({0})", panel);
        }

        /// <summary>
        /// Invites a character to the player's party or raid
        /// </summary>
        /// <param name="name">Name of a character to invite (string)</param>
        /// <example>InviteUnit("name")</example>
        internal static string[] InviteUnit(string name)
        {
            return Run("InviteUnit(\"{0}\")", name);
        }

        /// <summary>
        /// Returns an iterator function for integer keys in a table. Return values are such that the construction  for k,v in ipairs(t) do
        ///    -- body
        ///  end
        /// will iterate over the pairs 1,t[1], 2,t[2], etc, up to the first integer key absent from the table.
        /// </summary>
        /// <param name="t">A table (table)</param>
        /// <example>iterator,t,index=ipairs(t)</example>
        internal static string[] ipairs(string t)
        {
            return Run("ipairs({0})", t); //i{0}era{0}or,{0},index
        }

        /// <summary>
        /// Returns whether the player's target is in range of an action
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>inRange=IsActionInRange(slot)</example>
        internal static string[] IsActionInRange(string slot)
        {
            return Run("IsActionInRange({0})", slot); //inRange
        }

        /// <summary>
        /// Returns whether the player is currently in an arena match
        /// </summary>
        /// <example>isArena,isRegistered=IsActiveBattlefieldArena()</example>
        internal static string[] IsActiveBattlefieldArena()
        {
            return Run("IsActiveBattlefieldArena()"); //isArena,isRegistered
        }

        /// <summary>
        /// Returns whether a quest which can be turned in to the current Quest NPC is trivial at the player's level. Only returns valid information after a QUEST_GREETING event. Used in the default UI to display "(low level)" when listing the quest.Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest which can be turned in to the current Quest NPC (between 1 and GetNumActiveQuests()) (number)</param>
        /// <example>trivial=IsActiveQuestTrivial(index)</example>
        internal static string[] IsActiveQuestTrivial(int index)
        {
            return Run("IsActiveQuestTrivial({0})", index); //trivial
        }

        /// <summary>
        /// Returns whether an addon is currently loaded
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>loaded=IsAddOnLoaded("name")orIsAddOnLoaded(index)</example>
        internal static string[] IsAddOnLoaded(string name, int index)
        {
            return Run("IsAddOnLoaded(\"{0}\")orIsAddOnLoaded({1})", name, index); //loaded
        }

        /// <summary>
        /// Returns whether an addon can be loaded without restarting the UI
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>isLod=IsAddOnLoadOnDemand("name")orIsAddOnLoadOnDemand(index)</example>
        internal static string[] IsAddOnLoadOnDemand(string name, int index)
        {
            return Run("IsAddOnLoadOnDemand(\"{0}\")orIsAddOnLoadOnDemand({1})", name, index); //isLod
        }

        /// <summary>
        /// Returns whether an Alt key on the keyboard is held down.
        /// </summary>
        /// <example>isDown=IsAltKeyDown()</example>
        internal static string[] IsAltKeyDown()
        {
            return Run("IsAltKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the player is the captain of an arena team. Also returns 1 if the player is not on a team of the given arenaTeamID.
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <example>isCaptain=IsArenaTeamCaptain(team)</example>
        internal static string[] IsArenaTeamCaptain(string team)
        {
            return Run("IsArenaTeamCaptain({0})", team); //isCaptain
        }

        /// <summary>
        /// Returns whether the player is interacting with a Stable Master NPC. The Pet Stable UI/API can be active without an NPC if the player is using the Call Stabled Pet ability. New stable slots can only be purchased while talking to an NPC -- the default UI uses this function to determine whether to show UI elements related to purchasing slots.
        /// </summary>
        /// <example>isAtNPC=IsAtStableMaster()</example>
        internal static string[] IsAtStableMaster()
        {
            return Run("IsAtStableMaster()"); //isAtNPC
        }

        /// <summary>
        /// Returns whether an action is the standard melee Attack action. Used in the default UI to flash the action button while auto-attack is active. Does not apply to other repeating actions such as Auto Shot (for hunters) and Shoot (for wand users); for those, see IsAutoRepeatAction.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>isAttack=IsAttackAction(slot)</example>
        internal static string[] IsAttackAction(string slot)
        {
            return Run("IsAttackAction({0})", slot); //isAttack
        }

        /// <summary>
        /// Returns whether a spell is the standard melee Attack spell
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isAttack=IsAttackSpell(index,"bookType")orIsAttackSpell("name")</example>
        internal static string[] IsAttackSpell(string index, string bookType, string name)
        {
            return Run("IsAttackSpell({0},\"{1}\")orIsAttackSpell(\"{2}\")", index, bookType, name); //isAttack
        }

        /// <summary>
        /// Returns whether a sort criterion is applied in reverse order. No longer used in the default UI; see GetAuctionSort() instead.
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="sort">A sort criterion (string)</param>
        /// <example>isReversed,isSorted=IsAuctionSortReversed("list","sort")</example>
        internal static string[] IsAuctionSortReversed(string list, string sort)
        {
            return Run("IsAuctionSortReversed(\"{0}\",\"{1}\")", list, sort); //isReversed,isSorted
        }

        /// <summary>
        /// Returns whether an action is an automatically repeating action. Used in the default UI to flash the action button while the action is repeating. Applies to  actions such as Auto Shot (for hunters) and Shoot (for wand and other ranged weapon users) but not to the standard melee Attack action; for it, see IsAttackAction.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>isRepeating=IsAutoRepeatAction(slot)</example>
        internal static string[] IsAutoRepeatAction(string slot)
        {
            return Run("IsAutoRepeatAction({0})", slot); //isRepeating
        }

        /// <summary>
        /// Returns whether a spell is an automatically repeating spell
        /// </summary>
        /// <param name="spellName">The name of the spell to query (string)</param>
        /// <example>isAutoRepeat=IsAutoRepeatSpell("spellName")</example>
        internal static string[] IsAutoRepeatSpell(string spellName)
        {
            return Run("IsAutoRepeatSpell(\"{0}\")", spellName); //isAutoRepeat
        }

        /// <summary>
        /// Returns whether a quest available from the current Quest NPC is trivial at the player's level. Only returns valid information after a QUEST_GREETING event. Used in the default UI to display "(low level)" when listing the quest.Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number)</param>
        /// <example>trivial=IsAvailableQuestTrivial(index)</example>
        internal static string[] IsAvailableQuestTrivial(int index)
        {
            return Run("IsAvailableQuestTrivial({0})", index); //trivial
        }

        /// <summary>
        /// Returns whether the player is interacting with an entity that allows queueing for arena matches. The Battlefield queueing APIs are used for joining arena matches or skirmishes as well as for battlegrounds; this function is used in the default UI to change the contents of the queue dialog based on whether arena or battleground queue options should be presented.
        /// </summary>
        /// <example>isArena=IsBattlefieldArena()</example>
        internal static string[] IsBattlefieldArena()
        {
            return Run("IsBattlefieldArena()"); //isArena
        }

        /// <summary>
        /// Returns whether using an action consumes an item. Applies both to consumable items (such as food and potions) and to spells which use a reagent (e.g. Prayer of Fortitude, Divine Intervention, Water Walking, Portal: Dalaran).
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>isConsumable=IsConsumableAction(slot)</example>
        internal static string[] IsConsumableAction(string slot)
        {
            return Run("IsConsumableAction({0})", slot); //isConsumable
        }

        /// <summary>
        /// Returns whether an item is consumable. Indicates whether the item is destroyed upon use, not necessarily whether it belongs to the "Consumable" type/class.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>consumable=IsConsumableItem(itemID)orIsConsumableItem("itemName")orIsConsumableItem("itemLink")</example>
        internal static string[] IsConsumableItem(int itemID, string itemName, string itemLink)
        {
            return Run("IsConsumableItem({0})orIsConsumableItem(\"{1}\")orIsConsumableItem(\"{2}\")", itemID, itemName, itemLink); //consumable
        }

        /// <summary>
        /// Returns whether casting a spell consumes a reagent item
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isConsumable=IsConsumableSpell(index,"bookType")orIsConsumableSpell("name")</example>
        internal static string[] IsConsumableSpell(string index, string bookType, string name)
        {
            return Run("IsConsumableSpell({0},\"{1}\")orIsConsumableSpell(\"{2}\")", index, bookType, name); //isConsumable
        }

        /// <summary>
        /// Returns whether a Control key on the keyboard is held down
        /// </summary>
        /// <example>isDown=IsControlKeyDown()</example>
        internal static string[] IsControlKeyDown()
        {
            return Run("IsControlKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether an action is currently being used
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>isCurrent=IsCurrentAction(slot)</example>
        internal static string[] IsCurrentAction(string slot)
        {
            return Run("IsCurrentAction({0})", slot); //isCurrent
        }

        /// <summary>
        /// Returns whether an item is being used
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>isItem=IsCurrentItem(itemID)orIsCurrentItem("itemName")orIsCurrentItem("itemLink")</example>
        internal static string[] IsCurrentItem(int itemID, string itemName, string itemLink)
        {
            return Run("IsCurrentItem({0})orIsCurrentItem(\"{1}\")orIsCurrentItem(\"{2}\")", itemID, itemName, itemLink); //isItem
        }

        /// <summary>
        /// Returns whether the player has failed the selected quest in the quest log
        /// </summary>
        /// <example>isFailed=IsCurrentQuestFailed()</example>
        internal static string[] IsCurrentQuestFailed()
        {
            return Run("IsCurrentQuestFailed()"); //isFailed
        }

        /// <summary>
        /// Returns whether a spell is currently being used
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isCurrent=IsCurrentSpell(index,"bookType")orIsCurrentSpell("name")</example>
        internal static string[] IsCurrentSpell(string index, string bookType, string name)
        {
            return Run("IsCurrentSpell({0},\"{1}\")orIsCurrentSpell(\"{2}\")", index, bookType, name); //isCurrent
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>IsDebugBuild()</example>
        internal static string[] IsDebugBuild()
        {
            return Run("IsDebugBuild()");
        }

        /// <summary>
        /// Returns whether the current hardware supports desaturated textures
        /// </summary>
        /// <example>isSupported=IsDesaturateSupported()</example>
        internal static string[] IsDesaturateSupported()
        {
            return Run("IsDesaturateSupported()"); //isSupported
        }

        /// <summary>
        /// Returns whether the player is a moderator of the selected channel in the channel list display
        /// </summary>
        /// <example>isModerator=IsDisplayChannelModerator()</example>
        internal static string[] IsDisplayChannelModerator()
        {
            return Run("IsDisplayChannelModerator()"); //isModerator
        }

        /// <summary>
        /// Returns whether the player is the owner of the selected channel in the channel list display
        /// </summary>
        /// <example>isOwner=IsDisplayChannelOwner()</example>
        internal static string[] IsDisplayChannelOwner()
        {
            return Run("IsDisplayChannelOwner()"); //isOwner
        }

        /// <summary>
        /// Returns whether an item's appearance can be previewed using the Dressing Room feature
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>isDressable=IsDressableItem(itemID)orIsDressableItem("itemName")orIsDressableItem("itemLink")</example>
        internal static string[] IsDressableItem(int itemID, string itemName, string itemLink)
        {
            return Run("IsDressableItem({0})orIsDressableItem(\"{1}\")orIsDressableItem(\"{2}\")", itemID, itemName, itemLink); //isDressable
        }

        /// <summary>
        /// Returns whether an item can be equipped. Indicates whether an item is capable of being equipped on a character, not necessarily whether the player character is able to wear it.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>isEquippable=IsEquippableItem(itemID)orIsEquippableItem("itemName")orIsEquippableItem("itemLink")</example>
        internal static string[] IsEquippableItem(int itemID, string itemName, string itemLink)
        {
            return Run("IsEquippableItem({0})orIsEquippableItem(\"{1}\")orIsEquippableItem(\"{2}\")", itemID, itemName, itemLink); //isEquippable
        }

        /// <summary>
        /// Returns whether an action contains an equipped item. Applies to actions involving equippable items (not to consumables or other items with "Use:" effects) and indicates the effect of performing the action: if an action's item is not equipped, using the action will equip it; if the item is equipped and has a "Use:" effect, using the action will activate said effect.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>isEquipped=IsEquippedAction(slot)</example>
        internal static string[] IsEquippedAction(string slot)
        {
            return Run("IsEquippedAction({0})", slot); //isEquipped
        }

        /// <summary>
        /// Returns whether an item is currently equipped
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>isEquipped=IsEquippedItem(itemID) or IsEquippedItem("itemName") or IsEquippedItem("itemLink")</example>
        internal static string[] IsEquippedItem(int itemID = -1, string itemName = null, string itemLink = null)
        {
            return Run("IsEquippedItem({0})", itemID == -1 ? "\"" + (itemName ?? itemLink) + "\"" : itemID.ToString()); //isEquipped
        }

        /// <summary>
        /// Returns whether any items of a given type are currently equipped. Possible arguments include the localized names of item classes (as returned from GetAuctionItemClasses; e.g. "Weapon", "Armor"), subclasses (as returned from GetAuctionItemSubClasses; e.g. "One-handed axes", "Shields", "Cloth"), and the global tokens or localized names for equip locations (as returned from GetAuctionInvTypes; e.g. "INVTYPE_WEAPONMAINHAND", "Off Hand").
        /// </summary>
        /// <param name="type">Name of an item class, subclass, or equip location (string)</param>
        /// <example>isEquipped=IsEquippedItemType("type")</example>
        internal static string[] IsEquippedItemType(string type)
        {
            return Run("IsEquippedItemType(\"{0}\")", type); //isEquipped
        }

        /// <summary>
        /// Returns whether a faction is flagged as "inactive". "Inactive" factions behave no differently; the distinction only exists to allow players to hide factions they don't care about from the main display. Factions thus marked are automatically moved to an "Inactive" group at the end of the faction list.
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>isInactive=IsFactionInactive(index)</example>
        internal static string[] IsFactionInactive(int index)
        {
            return Run("IsFactionInactive({0})", index); //isInactive
        }

        /// <summary>
        /// Returns whether the player is currently falling
        /// </summary>
        /// <example>falling=IsFalling()</example>
        internal static string[] IsFalling()
        {
            return Run("IsFalling()"); //falling
        }

        /// <summary>
        /// Returns whether the currently displayed loot came from fishing. Used in the default UI to play a fishing sound effect and change the appearance of the loot window.
        /// </summary>
        /// <example>isFishing=IsFishingLoot()</example>
        internal static string[] IsFishingLoot()
        {
            return Run("IsFishingLoot()"); //isFishing
        }

        /// <summary>
        /// Returns whether flight is allowed on the continent where the player is currently located. Returns 1 for some areas in which flight is disabled -- notably Dalaran (with the exception of the Krasus' Landing subzone) and Wintergrasp.
        /// </summary>
        /// <example>isFlyable=IsFlyableArea()</example>
        internal static bool IsFlyableArea()
        {
            return From1Nil(Run("IsFlyableArea()")[0]); //isFlyable
        }

        /// <summary>
        /// Returns whether the player is currently flying
        /// </summary>
        /// <example>isFlying=IsFlying()</example>
        internal static bool IsFlying()
        {
            return From1Nil(Run("IsFlying()")[0]); //isFlying
        }

        /// <summary>
        /// Returns whether or player is leader of his or her guild
        /// </summary>
        /// <example>isLeader=IsGuildLeader()</example>
        internal static string[] IsGuildLeader()
        {
            return Run("IsGuildLeader()"); //isLeader
        }

        /// <summary>
        /// Returns whether an item can be used against hostile units. Harmful items include grenades and various quest items ("Use this to zap 30 murlocs!").
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>isHarmful=IsHarmfulItem(itemID)orIsHarmfulItem("itemName")orIsHarmfulItem("itemLink")</example>
        internal static string[] IsHarmfulItem(int itemID, string itemName, string itemLink)
        {
            return Run("IsHarmfulItem({0})orIsHarmfulItem(\"{1}\")orIsHarmfulItem(\"{2}\")", itemID, itemName, itemLink); //isHarmful
        }

        /// <summary>
        /// Returns whether a spell can be used against hostile units
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isHarmful=IsHarmfulSpell(index,"bookType")orIsHarmfulSpell("name")</example>
        internal static string[] IsHarmfulSpell(string index, string bookType, string name)
        {
            return Run("IsHarmfulSpell({0},\"{1}\")orIsHarmfulSpell(\"{2}\")", index, bookType, name); //isHarmful
        }

        /// <summary>
        /// Returns whether an item can be used on the player or friendly units. Helpful items include potions, scrolls, food and drink.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>isHarmful=IsHelpfulItem(itemID)orIsHelpfulItem("itemName")orIsHelpfulItem("itemLink")</example>
        internal static string[] IsHelpfulItem(int itemID, string itemName, string itemLink)
        {
            return Run("IsHelpfulItem({0})orIsHelpfulItem(\"{1}\")orIsHelpfulItem(\"{2}\")", itemID, itemName, itemLink); //isHarmful
        }

        /// <summary>
        /// Returns whether an item can be used on the player or friendly units
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isHarmful=IsHelpfulSpell(index,"bookType")orIsHelpfulSpell("name")</example>
        internal static string[] IsHelpfulSpell(string index, string bookType, string name)
        {
            return Run("IsHelpfulSpell({0},\"{1}\")orIsHelpfulSpell(\"{2}\")", index, bookType, name); //isHarmful
        }

        /// <summary>
        /// Returns whether a unit is on the player's ignore list
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query (string)</param>
        /// <example>isIgnored=IsIgnored("unit")orIsIgnored("name")</example>
        internal static string[] IsIgnored(string unit, string name)
        {
            return Run("IsIgnored(\"{0}\")orIsIgnored(\"{1}\")", unit, name); //isIgnored
        }

        /// <summary>
        /// Returns whether a unit can be heard due to ignored/muted status
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isIgnoredOrMuted=IsIgnoredOrMuted("unit")</example>
        internal static string[] IsIgnoredOrMuted(string unit)
        {
            return Run("IsIgnoredOrMuted(\"{0}\")", unit); //isIgnoredOrMuted
        }

        /// <summary>
        /// Returns whether the player is on an arena team
        /// </summary>
        /// <example>isInTeam=IsInArenaTeam()</example>
        internal static string[] IsInArenaTeam()
        {
            return Run("IsInArenaTeam()"); //isInTeam
        }

        /// <summary>
        /// Returns whether the player is currently indoors
        /// </summary>
        /// <example>inside=IsIndoors()</example>
        internal static bool IsIndoors()
        {
            return From1Nil(Run("IsIndoors()")[0]); //inside
        }

        /// <summary>
        /// Returns whether the player is in a guild
        /// </summary>
        /// <example>inGuild=IsInGuild()</example>
        internal static string[] IsInGuild()
        {
            return Run("IsInGuild()"); //inGuild
        }

        /// <summary>
        /// Returns whether the player is in an instance (and its type if applicable)
        /// </summary>
        /// <example>isInstance,instanceType=IsInInstance()</example>
        internal static string[] IsInInstance()
        {
            return Run("IsInInstance()"); //isInstance,instanceType
        }

        /// <summary>
        /// Returns whether an inventory slot is locked. Items become locked while being moved, split, or placed into other UI elements (such as the mail, trade, and auction windows); the item is unlocked once such an action is completed.
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>isLocked=IsInventoryItemLocked(slot)</example>
        internal static string[] IsInventoryItemLocked(string slot)
        {
            return Run("IsInventoryItemLocked({0})", slot); //isLocked
        }

        /// <summary>
        /// Returns whether the player is in range to use an item on a unit
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <param name="unit">A unit on which to use the item (string, unitID)</param>
        /// <example>inRange=IsItemInRange(itemID,"unit")orIsItemInRange("itemName","unit")orIsItemInRange("itemLink","unit")</example>
        internal static string[] IsItemInRange(int itemID, string itemName, string itemLink, string unit)
        {
            return Run("IsItemInRange({0},\"{3}\")orIsItemInRange(\"{1}\",\"{3}\")orIsItemInRange(\"{2}\",\"{3}\")", itemID, itemName, itemLink, unit); //inRange
        }

        /// <summary>
        /// Returns whether the left Alt key is currently held down. (Note: The Mac Wow client does not distingish between left and right modifier keys, so both Alt keys are reported as Left Alt.)
        /// </summary>
        /// <example>isDown=IsLeftAltKeyDown()</example>
        internal static string[] IsLeftAltKeyDown()
        {
            return Run("IsLeftAltKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the left Control key is held down. (Note: The Mac Wow client does not distingish between left and right modifier keys, so both Control keys are reported as Left Control.)
        /// </summary>
        /// <example>isDown=IsLeftControlKeyDown()</example>
        internal static string[] IsLeftControlKeyDown()
        {
            return Run("IsLeftControlKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the left Shift key on the keyboard is held down. (Note: The Mac Wow client does not distingish between left and right modifier keys, so both Shift keys are reported as Left Shift.)
        /// </summary>
        /// <example>isDown=IsLeftShiftKeyDown()</example>
        internal static string[] IsLeftShiftKeyDown()
        {
            return Run("IsLeftShiftKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the player is using the Linux game client. Does not indicate whether the player is running a Windows clint on Linux with virtualization software. Blizzard has not released an official Wow client for Linux, but this function is included just in case that situation changes.
        /// </summary>
        /// <example>isLinux=IsLinuxClient()</example>
        internal static string[] IsLinuxClient()
        {
            return Run("IsLinuxClient()"); //isLinux
        }

        /// <summary>
        /// Returns whether the login process has completed. The PLAYER_LOGIN event provides similar information; this function presents an alternative that can be used across UI reloads.
        /// </summary>
        /// <example>loggedIn=IsLoggedIn()</example>
        internal static string[] IsLoggedIn()
        {
            return Run("IsLoggedIn()"); //loggedIn
        }

        /// <summary>
        /// Returns whether the player is using the Mac OS X game client
        /// </summary>
        /// <example>isMac=IsMacClient()</example>
        internal static string[] IsMacClient()
        {
            return Run("IsMacClient()"); //isMac
        }

        /// <summary>
        /// Determines if the modifiers specified in the click-type had been held down while the button click occurred.. If called from a click handler (OnMouseDown, OnMouseUp, OnClick, OnDoubleClick, PreClick, or PostClick), checks mouse buttons included in the binding; otherwise checks modifiers only (see example).
        /// </summary>
        /// <param name="type">Token identifying a modified click action (string)</param>
        /// <example>modifiedClick=IsModifiedClick("type")</example>
        internal static string[] IsModifiedClick(string type)
        {
            return Run("IsModifiedClick(\"{0}\")", type); //modifiedClick
        }

        /// <summary>
        /// Returns whether a modifier key is held down. Modifier keys include shift, control or alt on either side of the keyboard. Wow does not recognize platform-specific modifier keys (such as fn, meta, Windows, or Command).
        /// </summary>
        /// <example>isDown=IsModifierKeyDown()</example>
        internal static string[] IsModifierKeyDown()
        {
            return Run("IsModifierKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the player is mounted
        /// </summary>
        /// <example>mounted=IsMounted()</example>
        internal static string[] IsMounted()
        {
            return Run("IsMounted()"); //mounted
        }

        /// <summary>
        /// Returns whether a given mouse button is held down. If no button is specified, returns 1 if any mouse button is held down.
        /// </summary>
        /// <param name=button>Number or name of a mouse button (number,string) 1 or LeftButton - Primary mouse button2 or RightButton - Secondary mouse button3 or MiddleButton - Third mouse button (or clickable scroll control)4 or Button4 - Fourth mouse button5 or Button5 - Fifth mouse button</param>
        /// <example>isDown=IsMouseButtonDown([button])</example>
        internal static string[] IsMouseButtonDown(string button)
        {
            return Run("IsMouseButtonDown([{0}])", button); //isDown
        }

        /// <summary>
        /// Returns whether mouselook mode is active
        /// </summary>
        /// <example>isLooking=IsMouselooking()</example>
        internal static string[] IsMouselooking()
        {
            return Run("IsMouselooking()"); //isLooking
        }

        /// <summary>
        /// Returns whether a character has been muted by the player
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query (string)</param>
        /// <example>muted=IsMuted("unit")orIsMuted("name")</example>
        internal static string[] IsMuted(string unit, string name)
        {
            return Run("IsMuted(\"{0}\")orIsMuted(\"{1}\")", unit, name); //muted
        }

        /// <summary>
        /// Returns whether the player is currently outdoors. "Outdoors" as defined by this function corresponds to the ability to use a mount in that specific location, not necessarily whether there is a roof above the player character's head. For example, returns 1 in Ironforge, Undercity, and the Caverns of Time, but nil in the nominally outdoor areas of instances such as Stratholme, Drak'tharon Keep, and Hellfire Ramparts. (Note that even in "outdoor" areas, standing on top of certain objects may interfere with the player's ability to mount up.)
        /// </summary>
        /// <example>isOutdoors=IsOutdoors()</example>
        internal static string[] IsOutdoors()
        {
            return Run("IsOutdoors()"); //isOutdoors
        }

        /// <summary>
        /// Returns whether the player is currently outside the bounds of the world. Used in the default UI (in conjunction with IsFalling()) to allow the player to release to a graveyard if the character has encountered a bug and fallen underneath the world geometry.
        /// </summary>
        /// <example>outOfBounds=IsOutOfBounds()</example>
        internal static string[] IsOutOfBounds()
        {
            return Run("IsOutOfBounds()"); //outOfBounds
        }

        /// <summary>
        /// Returns whether the player is the party leader
        /// </summary>
        /// <example>isLeader=IsPartyLeader()</example>
        internal static string[] IsPartyLeader()
        {
            return Run("IsPartyLeader()"); //isLeader
        }

        /// <summary>
        /// Returns whether a spell is passive (cannot be cast)
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isPassive=IsPassiveSpell(index,"bookType")orIsPassiveSpell("name")</example>
        internal static string[] IsPassiveSpell(string index, string bookType, string name)
        {
            return Run("IsPassiveSpell({0},\"{1}\")orIsPassiveSpell(\"{2}\")", index, bookType, name); //isPassive
        }

        /// <summary>
        /// Returns whether the pet's attack action is currently active
        /// </summary>
        /// <example>isActive=IsPetAttackActive()</example>
        internal static string[] IsPetAttackActive()
        {
            return Run("IsPetAttackActive()"); //isActive
        }

        /// <summary>
        /// Returns whether the current hardware supports high resolution player textures
        /// </summary>
        /// <example>isAvailable=IsPlayerResolutionAvailable()</example>
        internal static string[] IsPlayerResolutionAvailable()
        {
            return Run("IsPlayerResolutionAvailable()"); //isAvailable
        }

        /// <summary>
        /// Returns whether a special action bar should be shown while the player possesses another unit. Used in the default UI to switch between using the ShapeshiftBarFrame or PossessBarFrame to show actions belonging to the possessed unit.
        /// </summary>
        /// <example>isVisible=IsPossessBarVisible()</example>
        internal static string[] IsPossessBarVisible()
        {
            return Run("IsPossessBarVisible()"); //isVisible
        }

        /// <summary>
        /// Returns whether the player's PvP flag will expire after a period of time. If in a zone that flags the player for PvP, or if the player has manually enabled PvP, the flag will not expire. Once not in such a zone, or once the player has manually disabled PvP, or if the player has been flagged by attacking an enemy unit, the timer starts running and the player's PvP flag will expire after some time.
        /// </summary>
        /// <example>isRunning=IsPVPTimerRunning()</example>
        internal static string[] IsPVPTimerRunning()
        {
            return Run("IsPVPTimerRunning()"); //isRunning
        }

        /// <summary>
        /// Returns whether the player can complete the quest presented by a questgiver
        /// </summary>
        /// <example>isCompletable=IsQuestCompletable()</example>
        internal static string[] IsQuestCompletable()
        {
            return Run("IsQuestCompletable()"); //isCompletable
        }

        /// <summary>
        /// Returns whether the player's target is in range for using an item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)
        /// </summary>
        /// <param name="questIndex">Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>inRange=IsQuestLogSpecialItemInRange(questIndex)</example>
        internal static string[] IsQuestLogSpecialItemInRange(int questIndex)
        {
            return Run("IsQuestLogSpecialItemInRange({0})", questIndex); //inRange
        }

        /// <summary>
        /// Returns whether a quest from the quest log is listed in the objectives tracker
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>isWatched=IsQuestWatched(questIndex)</example>
        internal static string[] IsQuestWatched(int questIndex)
        {
            return Run("IsQuestWatched({0})", questIndex); //isWatched
        }

        /// <summary>
        /// Returns whether the player is the raid leader
        /// </summary>
        /// <example>isLeader=IsRaidLeader()</example>
        internal static string[] IsRaidLeader()
        {
            return Run("IsRaidLeader()"); //isLeader
        }

        /// <summary>
        /// Returns whether the player is a raid assistant
        /// </summary>
        /// <example>isRaidOfficer=IsRaidOfficer()</example>
        internal static string[] IsRaidOfficer()
        {
            return Run("IsRaidOfficer()"); //isRaidOfficer
        }

        /// <summary>
        /// Returns whether the player is the leader of a non-battleground party. When the player is in a party/raid and joins a battleground or arena, the normal party/raid functions refer to the battleground's party/raid, but the game still keeps track of the player's place in a non-battleground party/raid.
        /// </summary>
        /// <example>isLeader=IsRealPartyLeader()</example>
        internal static string[] IsRealPartyLeader()
        {
            return Run("IsRealPartyLeader()"); //isLeader
        }

        /// <summary>
        /// Returns whether the player is the leader of a non-battleground raid. When the player is in a party/raid and joins a battleground or arena, the normal party/raid functions refer to the battleground's party/raid, but the game still keeps track of the player's place in a non-battleground party/raid.
        /// </summary>
        /// <example>isLeader=IsRealRaidLeader()</example>
        internal static string[] IsRealRaidLeader()
        {
            return Run("IsRealRaidLeader()"); //isLeader
        }

        /// <summary>
        /// Returns whether a unit's account is linked to the player's via the Recruit-a-Friend program
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isLinked=IsReferAFriendLinked("unit")</example>
        internal static string[] IsReferAFriendLinked(string unit)
        {
            return Run("IsReferAFriendLinked(\"{0}\")", unit); //isLinked
        }

        /// <summary>
        /// Returns whether the player is currently resting. Rest state is provided in Inns and major cities and allows the player to log out immediately (instead of after a brief delay) and accrue bonus XP to be awarded for kills.
        /// </summary>
        /// <example>resting=IsResting()</example>
        internal static string[] IsResting()
        {
            return Run("IsResting()"); //resting
        }

        /// <summary>
        /// Returns whether the right Alt key is currently held down. (Note: The Mac Wow client does not distingish between left and right modifier keys, so both Alt keys are reported as Left Alt.)
        /// </summary>
        /// <example>isDown=IsRightAltKeyDown()</example>
        internal static string[] IsRightAltKeyDown()
        {
            return Run("IsRightAltKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the right Control key on the keyboard is held down. (Note: The Mac Wow client does not distingish between left and right modifier keys, so both Control keys are reported as Left Control.)
        /// </summary>
        /// <example>isDown=IsRightControlKeyDown()</example>
        internal static string[] IsRightControlKeyDown()
        {
            return Run("IsRightControlKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the right shift key on the keyboard is held down. (Note: The Mac Wow client does not distingish between left and right modifier keys, so both Shift keys are reported as Left Shift.)
        /// </summary>
        /// <example>isDown=IsRightShiftKeyDown()</example>
        internal static string[] IsRightShiftKeyDown()
        {
            return Run("IsRightShiftKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether the current execution path is secure. Meaningless when called from outside of the secure environment: always returns nil in such situations.
        /// </summary>
        /// <example>secure=issecure()</example>
        internal static string[] issecure()
        {
            return Run("issecure()"); //secure
        }

        /// <summary>
        /// Returns whether a variable is secure (and if not, which addon tainted it)
        /// </summary>
        /// <param name="table">A table to be used when checking table elements (table)</param>
        /// <param name="variable">The name of a variable to check.  In order to check the status of a table element, you should specify the table, and then the key of the element (string)</param>
        /// <example>issecure,taint=issecurevariable([table,]"variable")</example>
        internal static string[] issecurevariable(string table, string variable)
        {
            return Run("issecure{1}([{0},]\"{1}\")", table, variable); //issecure,taint
        }

        /// <summary>
        /// Returns whether a spell is currently selected in the spellbook. Applies when "casting" a spell that opens a trade skill.
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isSelected=IsSelectedSpell(index,"bookType")orIsSelectedSpell("name")</example>
        internal static string[] IsSelectedSpell(string index, string bookType, string name)
        {
            return Run("IsSelectedSpell({0},\"{1}\")orIsSelectedSpell(\"{2}\")", index, bookType, name); //isSelected
        }

        /// <summary>
        /// Returns whether a Shift key on the keyboard is held down
        /// </summary>
        /// <example>isDown=IsShiftKeyDown()</example>
        internal static string[] IsShiftKeyDown()
        {
            return Run("IsShiftKeyDown()"); //isDown
        }

        /// <summary>
        /// Returns whether a character is silenced on a chat channel
        /// </summary>
        /// <param name="name">Name of a character (string)</param>
        /// <param name="channel">Name of a chat channel (string)</param>
        /// <example>isSilenced=IsSilenced("name","channel")</example>
        internal static string[] IsSilenced(string name, string channel)
        {
            return Run("IsSilenced(\"{0}\",\"{1}\")", name, channel); //isSilenced
        }

        /// <summary>
        /// Returns whether the player is in range to cast a spell on a unit
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <param name="unit">A unit to target with the spell (string, unitID)</param>
        /// <example>inRange=IsSpellInRange(index,"bookType","unit")orIsSpellInRange("name","unit")</example>
        internal static string[] IsSpellInRange(string index, string bookType, string name, string unit)
        {
            return Run("IsSpellInRange({0},\"{1}\",\"{3}\")orIsSpellInRange(\"{2}\",\"{3}\")", index, bookType, name, unit); //inRange
        }

        /// <summary>
        /// Returns whether the player (or pet) knows a spell
        /// </summary>
        /// <param name="spellID">Numeric ID of a spell (number, spellID)</param>
        /// <param name="isPet">True to check only spells known to the player's pet; false or omitted to check only spells known to the player (boolean)</param>
        /// <example>isKnown=IsSpellKnown(spellID[,isPet])</example>
        internal static string[] IsSpellKnown(string spellID, string isPet)
        {
            return Run("IsSpellKnown({0}[,{1}])", spellID, isPet); //isKnown
        }

        /// <summary>
        /// Returns whether an action uses stackable items. Applies to consumable items such as potions, wizard oils, food and drink; not used for spells which consume reagents (for those, see IsConsumableAction).
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>isStackable=IsStackableAction(slot)</example>
        internal static string[] IsStackableAction(string slot)
        {
            return Run("IsStackableAction({0})", slot); //isStackable
        }

        /// <summary>
        /// Returns whether the player is currently stealthed
        /// </summary>
        /// <example>stealthed=IsStealthed()</example>
        internal static string[] IsStealthed()
        {
            return Run("IsStealthed()"); //stealthed
        }

        /// <summary>
        /// Returns whether the current system supports stereoscopic 3D display
        /// </summary>
        /// <example>isAvailable=IsStereoVideoAvailable()</example>
        internal static string[] IsStereoVideoAvailable()
        {
            return Run("IsStereoVideoAvailable()"); //isAvailable
        }

        /// <summary>
        /// Returns whether the current area has PvP (or other) objectives to be displayed. Used in the default UI when the "Display World PVP Objectives\ setting is set to \Dynamic\, in which case objective information is only shown when the player is near an objective. Examples include the towers in Eastern Plaguelands and Hellfire Peninsula as well as non-PvP objectives such as in the Old Hillsbrad instance, the Death Knight starter quests, and the Battle for Undercity quest event.
        /// </summary>
        /// <example>isPVPPOI=IsSubZonePVPPOI()</example>
        internal static string[] IsSubZonePVPPOI()
        {
            return Run("IsSubZonePVPPOI()"); //isPVPPOI
        }

        /// <summary>
        /// Returns whether the player is currently swimming. "Swimming" as defined by this function corresponds to the ability to use swimming abilities (such as druid Aquatic Form) or inability to use land-restricted abilities (such as eating or summoning a flying mount), not necessarily to whether the player is in water.
        /// </summary>
        /// <example>isSwimming=IsSwimming()</example>
        internal static bool IsSwimming()
        {
            return From1Nil(Run("IsSwimming()")[0]); //isSwimming
        }

        /// <summary>
        /// Returns whether the default Aggro Warning UI should currently be shown. This function (and the threatWarning CVar that affects its behavior) has no effect on other threat APIs; it merely indicates whether Blizzard's threat warning UI should be displayed.
        /// </summary>
        /// <example>enabled=IsThreatWarningEnabled()</example>
        internal static string[] IsThreatWarningEnabled()
        {
            return Run("IsThreatWarningEnabled()"); //enabled
        }

        /// <summary>
        /// Returns whether the player has earned the ability to display a title
        /// </summary>
        /// <param name="titleIndex">Index of a title available to the player (between 1 and GetNumTitles()) (integer)</param>
        /// <example>isKnown=IsTitleKnown(titleIndex)</example>
        internal static string[] IsTitleKnown(string titleIndex)
        {
            return Run("IsTitleKnown({0})", titleIndex); //isKnown
        }

        /// <summary>
        /// Returns whether an achievement is flagged for display in the objectives tracker UI
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>isTracked=IsTrackedAchievement(id)</example>
        internal static string[] IsTrackedAchievement(int id)
        {
            return Run("IsTrackedAchievement({0})", id); //isTracked
        }

        /// <summary>
        /// Returns whether the TradeSkill UI is showing another player's skill
        /// </summary>
        /// <example>isLinked,name=IsTradeSkillLinked()</example>
        internal static string[] IsTradeSkillLinked()
        {
            return Run("IsTradeSkillLinked()"); //isLinked,name
        }

        /// <summary>
        /// Returns whether the player is interacting with a trade skill trainer (as opposed to a class trainer)
        /// </summary>
        /// <example>isTradeskill=IsTradeskillTrainer()</example>
        internal static string[] IsTradeskillTrainer()
        {
            return Run("IsTradeskillTrainer()"); //isTradeskill
        }

        /// <summary>
        /// Returns whether a trainer service is a trade skill level
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>isSkillStep=IsTrainerServiceSkillStep(index)</example>
        internal static string[] IsTrainerServiceSkillStep(int index)
        {
            return Run("IsTrainerServiceSkillStep({0})", index); //isSkillStep
        }

        /// <summary>
        /// Returns whether a unit is on one of the quests in the player's quest log
        /// </summary>
        /// <param name="index">Index of a quest in the player's quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>state=IsUnitOnQuest(index,"unit")orIsUnitOnQuest(index,"name")</example>
        internal static string[] IsUnitOnQuest(int index, string unit, string name)
        {
            return Run("IsUnitOnQuest({0},\"{1}\")orIsUnitOnQuest({0},\"{2}\")", index, unit, name); //state
        }

        /// <summary>
        /// Returns whether an action is usable
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>isUsable,notEnoughMana=IsUsableAction(slot)</example>
        internal static string[] IsUsableAction(string slot)
        {
            return Run("IsUsableAction({0})", slot); //isUsable,notEnoughMana
        }

        /// <summary>
        /// Returns whether an item can currently be used. Does not account for item cooldowns (see GetItemCooldown() -- returns 1 if other conditions allow for using the item (e.g. if the item can only be used while outdoors).
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's link (string)</param>
        /// <example>isUsable,notEnoughMana=IsUsableItem(itemID)orIsUsableItem("itemName")orIsUsableItem("itemLink")</example>
        internal static string[] IsUsableItem(int itemID, string itemName, string itemLink)
        {
            return Run("IsUsableItem({0})orIsUsableItem(\"{1}\")orIsUsableItem(\"{2}\")", itemID, itemName, itemLink); //isUsable,notEnoughMana
        }

        /// <summary>
        /// Returns whether or not a given spell is usable or cannot be used due to lack of mana. Does not account for spell cooldowns (see GetSpellCooldown() -- returns 1 if other conditions allow for casting the spell (e.g. if the spell can only be cast while outdoors).
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>isUsable,notEnoughMana=IsUsableSpell(index,"bookType")orIsUsableSpell("name")</example>
        internal static dynamic IsUsableSpell(string name = null, int ID = -1)
        {
            var strs = Run("IsUsableSpell({0})", !string.IsNullOrEmpty(name) ? string.Format("\"{0}\"", name) : ID.ToString()); //isUsable,notEnoughMana
            return new
            {
                isUsable = From1Nil(strs[0]),
                notEnoughPower = From1Nil(strs[1])
            };
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>IsUsingVehicleControls()</example>
        internal static string[] IsUsingVehicleControls()
        {
            return Run("IsUsingVehicleControls()");
        }

        /// <summary>
        /// Returns whether the player is controlling a vehicle weapon with adjustable aim angle
        /// </summary>
        /// <example>hasAngleControl=IsVehicleAimAngleAdjustable()</example>
        internal static string[] IsVehicleAimAngleAdjustable()
        {
            return Run("IsVehicleAimAngleAdjustable()"); //hasAngleControl
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>IsVehicleAimPowerAdjustable()</example>
        internal static string[] IsVehicleAimPowerAdjustable()
        {
            return Run("IsVehicleAimPowerAdjustable()");
        }

        /// <summary>
        /// Returns whether the player is allowed to enable the voice chat feature
        /// </summary>
        /// <example>isAllowed=IsVoiceChatAllowed()</example>
        internal static string[] IsVoiceChatAllowed()
        {
            return Run("IsVoiceChatAllowed()"); //isAllowed
        }

        /// <summary>
        /// Returns whether voice chat is supported by the realm server
        /// </summary>
        /// <example>IsVoiceChatAllowedByServer()</example>
        internal static string[] IsVoiceChatAllowedByServer()
        {
            return Run("IsVoiceChatAllowedByServer()");
        }

        /// <summary>
        /// Returns whether the voice chat system is enabled
        /// </summary>
        /// <example>isEnabled=IsVoiceChatEnabled()</example>
        internal static string[] IsVoiceChatEnabled()
        {
            return Run("IsVoiceChatEnabled()"); //isEnabled
        }

        /// <summary>
        /// Returns whether the player is using the Windows game client
        /// </summary>
        /// <example>isWindows=IsWindowsClient()</example>
        internal static string[] IsWindowsClient()
        {
            return Run("IsWindowsClient()"); //isWindows
        }

        /// <summary>
        /// Returns whether experience gain has been disabled for the player
        /// </summary>
        /// <example>isDisabled=IsXPUserDisabled()</example>
        internal static string[] IsXPUserDisabled()
        {
            return Run("IsXPUserDisabled()"); //isDisabled
        }

        /// <summary>
        /// Returns whether an item has a range limitation for its use. For example, Mistletoe can only be used on another character within a given range of the player, but a Hearthstone has no target and thus no range restriction. Returns nil for items which have a range restriction but are area-targeted and not unit-targeted (e.g. grenades).
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>hasRange=ItemHasRange(itemID)orItemHasRange("itemName")orItemHasRange("itemLink")</example>
        internal static string[] ItemHasRange(int itemID, string itemName, string itemLink)
        {
            return Run("ItemHasRange({0})orItemHasRange(\"{1}\")orItemHasRange(\"{2}\")", itemID, itemName, itemLink); //hasRange
        }

        /// <summary>
        /// Returns the original author of the currently viewed text item. Used for mail messages sent by other players; when the player makes a permanent copy of a letter and reads it from inventory, the default UI uses this function to display a signature (e.g. "From, Leeroy") at the end of the message text.
        /// </summary>
        /// <example>creator=ItemTextGetCreator()</example>
        internal static string[] ItemTextGetCreator()
        {
            return Run("ItemTextGetCreator()"); //creator
        }

        /// <summary>
        /// Returns the name of the currently viewed text item. Used for readable world objects (plaques, books on tables, etc) and readable inventory items (looted books/parchments/scrolls/etc, saved copies of mail messages). For saved mail messages the name returned is always "Plain Letter" (or localized equivalent); the message subject is lost when saving a copy.
        /// </summary>
        /// <example>text=ItemTextGetItem()</example>
        internal static string[] ItemTextGetItem()
        {
            return Run("ItemTextGetItem()"); //text
        }

        /// <summary>
        /// Returns display style information for the currently viewed text item. The value returned can be used to look up background textures and text colors for display:Background textures displayed in the default UI can be found by prepending "Interface\\ItemTextFrame\\ItemText-" and appending "-TopLeft", "-TopRight", "-BotLeft", "-BotRight" to the material string (e.g. "Interface\\ItemTextFrame\\ItemText-Stone-TopLeft").Colors for body and title text can be found by calling GetMaterialTextColors(material) (a Lua function implemented in the Blizzard UI).In cases where this function returns nil, the default UI uses the colors and textures for "Parchment".
        /// </summary>
        /// <example>material=ItemTextGetMaterial()</example>
        internal static string[] ItemTextGetMaterial()
        {
            return Run("ItemTextGetMaterial()"); //material
        }

        /// <summary>
        /// Returns the current page number in the currently viewed text item
        /// </summary>
        /// <example>page=ItemTextGetPage()</example>
        internal static string[] ItemTextGetPage()
        {
            return Run("ItemTextGetPage()"); //page
        }

        /// <summary>
        /// Returns the text of the currently viewed text item. Used for readable world objects (plaques, books on tables, etc) and readable inventory items (looted books/parchments/scrolls/etc, saved copies of mail messages). Returns valid data only between the ITEM_TEXT_BEGIN and ITEM_TEXT_CLOSED events, with the ITEM_TEXT_READY event indicating when new text is available (as when changing pages).
        /// </summary>
        /// <example>text=ItemTextGetText()</example>
        internal static string[] ItemTextGetText()
        {
            return Run("ItemTextGetText()"); //text
        }

        /// <summary>
        /// Returns whether the currently viewed text item has additional pages
        /// </summary>
        /// <example>next=ItemTextHasNextPage()</example>
        internal static string[] ItemTextHasNextPage()
        {
            return Run("ItemTextHasNextPage()"); //next
        }

        /// <summary>
        /// Moves to the next page in the currently viewed text item. The ITEM_TEXT_READY event fires when text for the next page becomes available. Does nothing if already viewing the last page of text.
        /// </summary>
        /// <example>ItemTextNextPage()</example>
        internal static string[] ItemTextNextPage()
        {
            return Run("ItemTextNextPage()");
        }

        /// <summary>
        /// Moves to the previous page in the currently viewed text item. The ITEM_TEXT_READY event fires when text for the previous page becomes available. Does nothing if already viewing the first page of text.
        /// </summary>
        /// <example>ItemTextPrevPage()</example>
        internal static string[] ItemTextPrevPage()
        {
            return Run("ItemTextPrevPage()");
        }

        /// <summary>
        /// Joins the queue for a battleground instance
        /// </summary>
        /// <param name="index">Index in the battleground queue listing (1 for the first available instance, or between 2 and GetNumBattlefields() for other instances)  (number)</param>
        /// <param name="asGroup">True to enter the player's entire party/raid in the queue; false to enter the player only (boolean)</param>
        /// <example>JoinBattlefield(index,asGroup)</example>
        internal static string[] JoinBattlefield(int index, string asGroup)
        {
            return Run("JoinBattlefield({0},{1})", index, asGroup);
        }

        /// <summary>
        /// . Replaced by JoinPermanentChannel().
        /// </summary>
        /// <param name="name">Channel name to join (string)</param>
        /// <param name="password">Optional password required to join (string)</param>
        /// <param name="id">ChatFrame id to display the channel in (number)</param>
        /// <example>zoneChannel,channelName=JoinChannelByName("name","password",id)</example>
        internal static string[] JoinChannelByName(string name, string password, int id)
        {
            return Run("JoinChannelByName(\"{0}\",\"{1}\",{2})", name, password, id); //zoneChannel,channelName
        }

        /// <summary>
        /// Joins a channel, saving associated chat window settings
        /// </summary>
        /// <param name="name">Name of the channel to join (string)</param>
        /// <param name="password">Password to use when joining (string)</param>
        /// <param name="chatFrameIndex">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) in which to subscribe to the channel (number)</param>
        /// <param name="enableVoice">True to enable voice in the channel; otherwise false (boolean)</param>
        /// <example>zoneChannel,channelName=JoinPermanentChannel("name"[,"password"[,chatFrameIndex[,enableVoice]]])</example>
        internal static string[] JoinPermanentChannel(string name, string password, int chatFrameIndex, string enableVoice)
        {
            return Run("JoinPermanentChannel(\"{0}\"[,\"{1}\"[,{2}[,{3}]]])", name, password, chatFrameIndex, enableVoice); //zoneChannel,channelName
        }

        /// <summary>
        /// Joins a channel, but does not save associated chat window settings
        /// </summary>
        /// <param name="channel">Name of a channel to join (string)</param>
        /// <example>JoinTemporaryChannel("channel")</example>
        internal static string[] JoinTemporaryChannel(string channel)
        {
            return Run("JoinTemporaryChannel(\"{0}\")", channel);
        }

        /// <summary>
        /// Causes the player character to jump (or begins ascent if swimming or flying). Used by the JUMP binding, which also controls ascent when swimming or flying.
        /// </summary>
        /// <example>JumpOrAscendStart()</example>
        internal static string[] JumpOrAscendStart()
        {
            return Run("JumpOrAscendStart()");
        }

        /// <summary>
        /// Requests a specific knowledge base article from the server
        /// </summary>
        /// <param name="articleId">The unique articleId to request (number)</param>
        /// <param name="searchType">The search type of the request (number) 1 - Default "top issues" search2 - Search for specific text</param>
        /// <example>KBArticle_BeginLoading(articleId,searchType)</example>
        internal static string[] KBArticle_BeginLoading(int articleId, int searchType)
        {
            return Run("KBArticle_BeginLoading({0},{1})", articleId, searchType);
        }

        /// <summary>
        /// Returns information about the last requested knowledge base article. Only available once the KNOWLEDGE_BASE_ARTICLE_LOAD_SUCCESS event has fired following an article request.
        /// </summary>
        /// <example>id,subject,subjectAlt,text,keywords,languageId,isHot=KBArticle_GetData()</example>
        internal static string[] KBArticle_GetData()
        {
            return Run("KBArticle_GetData()"); //id,subject,subjectAlt,text,keywords,languageId,isHot
        }

        /// <summary>
        /// Returns whether the requested knowledge base article has been loaded. The KNOWLEDGE_BASE_ARTICLE_LOAD_SUCCESS also indicates that the requested article is available; this function presents an alternative that can be used across UI reloads or login/logout.
        /// </summary>
        /// <example>isLoaded=KBArticle_IsLoaded()</example>
        internal static string[] KBArticle_IsLoaded()
        {
            return Run("KBArticle_IsLoaded()"); //isLoaded
        }

        /// <summary>
        /// Queries the knowledge base server for articles
        /// </summary>
        /// <param name="searchText">The search string to use.  The empty string will search for all articles in the given category (string)</param>
        /// <param name="categoryIndex">The category index (number)</param>
        /// <param name="subcategoryIndex">The subcategory index (number)</param>
        /// <param name="numArticles">The number of articles to be returned for each page (number)</param>
        /// <param name="page">The page of the total results that should be displayed. (number)</param>
        /// <example>KBQuery_BeginLoading("searchText",categoryIndex,subcategoryIndex,numArticles,page)</example>
        internal static string[] KBQuery_BeginLoading(string searchText, int categoryIndex, int subcategoryIndex, int numArticles, int page)
        {
            return Run("KBQuery_BeginLoading(\"{0}\",{1},sub{1},{3},{4})", searchText, categoryIndex, subcategoryIndex, numArticles, page);
        }

        /// <summary>
        /// Returns the number of articles on the current knowledge base search result page
        /// </summary>
        /// <example>articleHeaderCount=KBQuery_GetArticleHeaderCount()</example>
        internal static string[] KBQuery_GetArticleHeaderCount()
        {
            return Run("KBQuery_GetArticleHeaderCount()"); //articleHeaderCount
        }

        /// <summary>
        /// Returns information about an article returned in a knowledge base query
        /// </summary>
        /// <param name="index">The index of the article to query (number)</param>
        /// <example>articleId,title,isHotIssue,isRecentlyUpdated=KBQuery_GetArticleHeaderData(index)</example>
        internal static string[] KBQuery_GetArticleHeaderData(int index)
        {
            return Run("KBQuery_GetArticleHeaderData({0})", index); //articleId,title,isHotIssue,isRecentlyUpdated
        }

        /// <summary>
        /// Returns the total number of articles returned for the given query
        /// </summary>
        /// <example>totalArticleHeaderCount=KBQuery_GetTotalArticleCount()</example>
        internal static string[] KBQuery_GetTotalArticleCount()
        {
            return Run("KBQuery_GetTotalArticleCount()"); //totalArticleHeaderCount
        }

        /// <summary>
        /// Returns whether results of a knowledge base query have been loaded. The KNOWLEDGE_BASE_QUERY_LOAD_SUCCESS also indicates that the requested results are available; this function presents an alternative that can be used across UI reloads or login/logout.
        /// </summary>
        /// <example>isLoaded=KBQuery_IsLoaded()</example>
        internal static string[] KBQuery_IsLoaded()
        {
            return Run("KBQuery_IsLoaded()"); //isLoaded
        }

        /// <summary>
        /// Loads a maximum number of "Top Issues" from a given page
        /// </summary>
        /// <param name="numArticles">The number of articles displayed per page.  This is typically the constant KBASE_NUM_ARTICLES_PER_PAGE (number)</param>
        /// <param name="currentPage">The page to display (number)</param>
        /// <example>KBSetup_BeginLoading(numArticles,currentPage)</example>
        internal static string[] KBSetup_BeginLoading(int numArticles, int currentPage)
        {
            return Run("KBSetup_BeginLoading({0},{1})", numArticles, currentPage);
        }

        /// <summary>
        /// Returns the number of "Top Issues" articles on the current page
        /// </summary>
        /// <example>articleHeaderCount=KBSetup_GetArticleHeaderCount()</example>
        internal static string[] KBSetup_GetArticleHeaderCount()
        {
            return Run("KBSetup_GetArticleHeaderCount()"); //articleHeaderCount
        }

        /// <summary>
        /// Returns header information about a "Top Issue" article
        /// </summary>
        /// <param name="index">The index of the article to query (number)</param>
        /// <example>articleId,title,isHotIssue,isRecentlyUpdated=KBSetup_GetArticleHeaderData(index)</example>
        internal static string[] KBSetup_GetArticleHeaderData(int index)
        {
            return Run("KBSetup_GetArticleHeaderData({0})", index); //articleId,title,isHotIssue,isRecentlyUpdated
        }

        /// <summary>
        /// Returns the number of available knowledge base categories
        /// </summary>
        /// <example>numCategories=KBSetup_GetCategoryCount()</example>
        internal static string[] KBSetup_GetCategoryCount()
        {
            return Run("KBSetup_GetCategoryCount()"); //numCategories
        }

        /// <summary>
        /// Returns information about a knowledge base category
        /// </summary>
        /// <param name="index">The index of the category (number)</param>
        /// <example>categoryId,name=KBSetup_GetCategoryData(index)</example>
        internal static string[] KBSetup_GetCategoryData(int index)
        {
            return Run("KBSetup_GetCategoryData({0})", index); //categoryId,name
        }

        /// <summary>
        /// Returns the number of available knowledge base languages
        /// </summary>
        /// <example>numLanguages=KBSetup_GetLanguageCount()</example>
        internal static string[] KBSetup_GetLanguageCount()
        {
            return Run("KBSetup_GetLanguageCount()"); //numLanguages
        }

        /// <summary>
        /// Returns information about a given knowledge base language
        /// </summary>
        /// <param name="index">Index of a language to query (between 1 and KBSetup_GetLanguageCount() (number)</param>
        /// <example>languageId,name=KBSetup_GetLanguageData(index)</example>
        internal static string[] KBSetup_GetLanguageData(int index)
        {
            return Run("KBSetup_GetLanguageData({0})", index); //languageId,name
        }

        /// <summary>
        /// Returns the number of available subcategories for a given category
        /// </summary>
        /// <param name="index">The index of the category (number)</param>
        /// <example>numSubCategories=KBSetup_GetSubCategoryCount(index)</example>
        internal static string[] KBSetup_GetSubCategoryCount(int index)
        {
            return Run("KBSetup_GetSubCategoryCount({0})", index); //numSubCategories
        }

        /// <summary>
        /// Returns information a knowledge base subcategory
        /// </summary>
        /// <param name="index">The index of the category (number)</param>
        /// <param name="subindex">The index of the subcategory (number)</param>
        /// <example>categoryId,name=KBSetup_GetSubCategoryData(index,subindex)</example>
        internal static string[] KBSetup_GetSubCategoryData(int index, int subindex)
        {
            return Run("KBSetup_GetSubCategoryData({0},sub{0})", index, subindex); //categoryId,name
        }

        /// <summary>
        /// Returns the number of "Top Issues" articles
        /// </summary>
        /// <example>numArticles=KBSetup_GetTotalArticleCount()</example>
        internal static string[] KBSetup_GetTotalArticleCount()
        {
            return Run("KBSetup_GetTotalArticleCount()"); //numArticles
        }

        /// <summary>
        /// Returns whether the knowledge base default query has completed successfully. The KNOWLEDGE_BASE_SETUP_LOAD_SUCCESS also indicates that the knowledge base setup is complete; this function presents an alternative that can be used across UI reloads or login/logout.
        /// </summary>
        /// <example>isLoaded=KBSetup_IsLoaded()</example>
        internal static string[] KBSetup_IsLoaded()
        {
            return Run("KBSetup_IsLoaded()"); //isLoaded
        }

        /// <summary>
        /// Returns the currently knowledge base MOTD
        /// </summary>
        /// <example>text=KBSystem_GetMOTD()</example>
        internal static string[] KBSystem_GetMOTD()
        {
            return Run("KBSystem_GetMOTD()"); //text
        }

        /// <summary>
        /// Returns the text of the knowledge base server system notice
        /// </summary>
        /// <example>text=KBSystem_GetServerNotice()</example>
        internal static string[] KBSystem_GetServerNotice()
        {
            return Run("KBSystem_GetServerNotice()"); //text
        }

        /// <summary>
        /// Returns the knowledge base server system status message
        /// </summary>
        /// <example>statusMessage=KBSystem_GetServerStatus()</example>
        internal static string[] KBSystem_GetServerStatus()
        {
            return Run("KBSystem_GetServerStatus()"); //statusMessage
        }

        /// <summary>
        /// Returns the inventoryID corresponding to a slot in the keyring
        /// </summary>
        /// <param name="slot">Index of a key slot within the keyring (number, containerSlotID)</param>
        /// <example>slot=KeyRingButtonIDToInvSlotID(slot)</example>
        internal static string[] KeyRingButtonIDToInvSlotID(string slot)
        {
            return Run("KeyRingButtonIDToInvSlotID({0})", slot); //{0}
        }

        /// <summary>
        /// Returns the number generated by a normalized fraction and base-2 exponent. Alias for the standard library function math.ldexp.
        /// </summary>
        /// <param name="m">A number (number)</param>
        /// <param name="e">A number (number)</param>
        /// <example>x=ldexp(m,e)</example>
        internal static string[] ldexp(int m, int e)
        {
            return Run("ld{1}xp({0},{1})", m, e); //x
        }

        /// <summary>
        /// Commits changes made in the Talent UI's preview mode
        /// </summary>
        /// <param name="isPet">true to edit talents for the player's pet, false to edit talents for the player (boolean)</param>
        /// <example>LearnPreviewTalents(isPet)</example>
        internal static string[] LearnPreviewTalents(string isPet)
        {
            return Run("LearnPreviewTalents({0})", isPet);
        }

        /// <summary>
        /// Learns a talent, spending one talent point
        /// </summary>
        /// <param name="tabIndex">Index of a talent tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="talentIndex">Index of a talent option (between 1 and GetNumTalents()) (number)</param>
        /// <param name="isPet">True to edit talents for the player's pet, false to edit talents for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>LearnTalent(tabIndex,talentIndex,isPet,talentGroup)</example>
        internal static string[] LearnTalent(int tabIndex, int talentIndex, string isPet, int talentGroup)
        {
            return Run("LearnTalent({0},{1},{2},{3})", tabIndex, talentIndex, isPet, talentGroup);
        }

        /// <summary>
        /// Immediately exits the current battleground instance. Returns the player to the location from which he or she joined the battleground and applies the Deserter debuff.
        /// </summary>
        /// <example>LeaveBattlefield()</example>
        internal static string[] LeaveBattlefield()
        {
            return Run("LeaveBattlefield()");
        }

        /// <summary>
        /// Leaves a chat channel
        /// </summary>
        /// <param name="name">Name of a chat channel to leave (string)</param>
        /// <example>LeaveChannelByName("name")</example>
        internal static string[] LeaveChannelByName(string name)
        {
            return Run("LeaveChannelByName(\"{0}\")", name);
        }

        /// <summary>
        /// Exits the current party or raid. If there are only two characters in the party or raid, causes the party or raid to be disbanded.
        /// </summary>
        /// <example>LeaveParty()</example>
        internal static string[] LeaveParty()
        {
            return Run("LeaveParty()");
        }

        /// <summary>
        /// Teleports the player to or from their current LFG dungeon
        /// </summary>
        /// <param name="portOut">A boolean flag that indicates if the player is trying to teleport out of the dungeon, or not. (boolean)</param>
        /// <example>LFGTeleport(portOut)</example>
        internal static string[] LFGTeleport(string portOut)
        {
            return Run("LFGTeleport({0})", portOut);
        }

        /// <summary>
        /// Requests the list of participants in a chat channel. Fires the CHAT_MSG_CHANNEL_LIST event listing the names of all characters in the channel.
        /// </summary>
        /// <param name="channel">Name of a channel (string)</param>
        /// <param name="channelIndex">Index of a channel (number)</param>
        /// <example>ListChannelByName("channel")orListChannelByName(channelIndex)</example>
        internal static string[] ListChannelByName(string channel, int channelIndex)
        {
            return Run("ListChannelByName(\"{0}\")orListChannelByName({0}Index)", channel, channelIndex);
        }

        /// <summary>
        /// Requests a list of channels joined by the player. Fires the CHAT_MSG_CHANNEL_LIST event listing the names and indices of all channels joined by the player.
        /// </summary>
        /// <example>ListChannels()</example>
        internal static string[] ListChannels()
        {
            return Run("ListChannels()");
        }

        /// <summary>
        /// Loads a LoadOnDemand-capable addon. If the given addon has dependencies which are also LoadOnDemand-capable, those addons will be loaded as well. This function will not load disabled addons.
        /// </summary>
        /// <param name="name">Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string)</param>
        /// <param name="index">Index of an addon in the addon list (between 1 and GetNumAddOns()) (number)</param>
        /// <example>loaded,reason=LoadAddOn("name")orLoadAddOn(index)</example>
        internal static string[] LoadAddOn(string name, int index)
        {
            return Run("LoadAddOn(\"{0}\")orLoadAddOn({1})", name, index); //loaded,reason
        }

        /// <summary>
        /// Loads a set of key bindings. The UPDATE_BINDINGS event fires when the new bindings have taken effect.
        /// </summary>
        /// <param name="set">A set of key bindings to load (number) 0 - Default key bindings1 - Account-wide key bindings2 - Character-specific key bindings</param>
        /// <example>LoadBindings(set)</example>
        internal static string[] LoadBindings(int set)
        {
            return Run("LoadBindings({0})", set);
        }

        /// <summary>
        /// Loads and compiles Lua source code
        /// </summary>
        /// <param name="s">A string containing Lua code (string)</param>
        /// <param name="chunkname">Name for the loaded chunk; used in error messages and debug information (string)</param>
        /// <example>chunk,error=loadstring("s"[,"chunkname"])</example>
        internal static string[] loadstring(string s, string chunkname)
        {
            return Run("load{0}tring(\"{0}\"[,\"{1}\"])", s, chunkname); //chunk,error
        }

        /// <summary>
        /// Returns the natural logarithm of a number. Alias for the standard library function math.log.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>naturalLog=log(x)</example>
        internal static string[] log(int x)
        {
            return Run("log({0})", x); //naturalLog
        }

        /// <summary>
        /// Returns the base-10 logarithm of a number. Alias for the standard library function math.log10.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>base10log=log10(x)</example>
        internal static string[] log10(int x)
        {
            return Run("log10({0})", x); //base10log
        }

        /// <summary>
        /// Enables or disables saving chat text to a file. Text received via the chat system (but not necessarily all text displayed in chat windows) will be saved to the file Logs/WowChatLog.txt (path is relative to the folder containing the World of Warcraft client); the file is not actually updated until the player logs out.Chat text in the log file follows a similar format to its display in-game, but with added timestamps.
        /// </summary>
        /// <param name="toggle">True to enable chat logging; false or omitted to disable (boolean)</param>
        /// <example>isLogging=LoggingChat(toggle)</example>
        internal static string[] LoggingChat(string toggle)
        {
            return Run("LoggingChat({0})", toggle); //isLogging
        }

        /// <summary>
        /// Enables or disables saving combat log data to a file. Combat log data will be saved to the file Logs/WowCombatLog.txt (path is relative to the folder containing the World of Warcraft client); the file is not actually updated until the player logs out.
        /// </summary>
        /// <param name="toggle">True to enable combat logging; false or omitted to disable (boolean)</param>
        /// <example>isLogging=LoggingCombat(toggle)</example>
        internal static string[] LoggingCombat(string toggle)
        {
            return Run("LoggingCombat({0})", toggle); //isLogging
        }

        /// <summary>
        /// Attempts to log out and return to the character selection screen. Results vary based on current conditions:If the player is in combat or under other temporary restrictions (e.g. falling), fires the UI_ERROR_MESSAGE event with a message indicating the player cannot log out at the moment.If the player is not in an inn, major city, or other "rest" area (i.e. IsResting() returns nil), fires the PLAYER_CAMPING event, causing the default UI to show a countdown, logging the player out after a period of time if not canceled.If the player is in a "rest" area, logs out immediately.
        /// </summary>
        /// <example>Logout()</example>
        internal static string[] Logout()
        {
            return Run("Logout()");
        }

        /// <summary>
        /// Attempts to pick up an item available as loot. If the item in the loot slot binds on pickup, the LOOT_BIND_CONFIRM event fires, indicating that ConfirmLootSlot(slot) must be called in order to actually loot the item. Please note: if you call this while processing a LOOT_OPENED event and it is the last item to be looted from the corpse, can cause LOOT_CLOSED to fire and be processed before your LOOT_OPENED event handler completes.
        /// </summary>
        /// <param name="slot">Index of a loot slot (between 1 and GetNumLootItems()) (number)</param>
        /// <example>LootSlot(slot)</example>
        internal static string[] LootSlot(int slot)
        {
            return Run("LootSlot({0})", slot);
        }

        /// <summary>
        /// Returns whether a loot slot contains money
        /// </summary>
        /// <param name="slot">Index of a loot slot (between 1 and GetNumLootItems()) (number)</param>
        /// <example>isCoin=LootSlotIsCoin(slot)</example>
        internal static string[] LootSlotIsCoin(int slot)
        {
            return Run("LootSlotIsCoin({0})", slot); //isCoin
        }

        /// <summary>
        /// Returns whether a loot slot contains an item
        /// </summary>
        /// <param name="slot">Index of a loot slot (between 1 and GetNumLootItems()) (number)</param>
        /// <example>isItem=LootSlotIsItem(slot)</example>
        internal static string[] LootSlotIsItem(int slot)
        {
            return Run("LootSlotIsItem({0})", slot); //isItem
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>MakeMinigameMove()</example>
        internal static string[] MakeMinigameMove()
        {
            return Run("MakeMinigameMove()");
        }

        /// <summary>
        /// Returns the greatest of a list of numbers. Alias for the standard library function math.max.
        /// </summary>
        /// <param name="...">A list of numbers (list)</param>
        /// <example>maximum=max(...)</example>
        internal static string[] max(string ellips)
        {
            return Run("max({0})", ellips); //maximum
        }

        /// <summary>
        /// Returns the least of a list of numbers. Alias for the standard library function math.min.
        /// </summary>
        /// <param name="...">A list of numbers (list)</param>
        /// <example>maximum=min(...)</example>
        internal static string[] min(string ellips)
        {
            return Run("min({0})", ellips); //maximum
        }

        /// <summary>
        /// Returns the remainder from division of two numbers. Alias for the standard library function math.fmod.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <param name="y">A number (number)</param>
        /// <example>remainder=mod(x,y)</example>
        internal static string[] mod(int x, int y)
        {
            return Run("mod({0},{1})", x, y); //remainder
        }

        /// <summary>
        /// Enables mouselook mode, in which cursor movement rotates the camera
        /// </summary>
        /// <example>MouselookStart()</example>
        internal static string[] MouselookStart()
        {
            return Run("MouselookStart()");
        }

        /// <summary>
        /// Disables mouselook mode
        /// </summary>
        /// <example>MouselookStop()</example>
        internal static string[] MouselookStop()
        {
            return Run("MouselookStop()");
        }

        /// <summary>
        /// Begins moving the player character forward while steering via mouse movement. After calling this function, the player character begins moving forward while cursor movement rotates (or steers) the character, altering yaw (facing) and/or pitch (vertical movement angle) as well as camera position.Equivalent to calling both CameraOrSelectOrMoveStart and TurnOrActionStart without calling the respective Stop functions; i.e. holding both left and right mouse buttons down. Used by the MOVEANDSTEER binding, which can be customized to allow alternate access to this action if the player's system does not allow pressing multiple mouse buttons at once.
        /// </summary>
        /// <example>MoveAndSteerStart()</example>
        internal static string[] MoveAndSteerStart()
        {
            return Run("MoveAndSteerStart(0)");
        }

        /// <summary>
        /// Ends movement initiated by MoveAndSteerStart. After calling this function, forward movement and character steering stops and normal cursor movement resumes.Used by the MOVEANDSTEER binding.
        /// </summary>
        /// <example>MoveAndSteerStop()</example>
        internal static string[] MoveAndSteerStop()
        {
            return Run("MoveAndSteerStop(0)");
        }

        /// <summary>
        /// Begins moving the player character backward. Used by the MOVEBACKWARD binding.
        /// </summary>
        /// <example>MoveBackwardStart()</example>
        internal static string[] MoveBackwardStart()
        {
            return Run("MoveBackwardStart(0)");
        }

        /// <summary>
        /// Ends movement initiated by MoveBackwardStart
        /// </summary>
        /// <example>MoveBackwardStop()</example>
        internal static string[] MoveBackwardStop()
        {
            return Run("MoveBackwardStop(0)");
        }

        /// <summary>
        /// Begins moving the player character forward. Used by the MOVEFORWARD binding.
        /// </summary>
        /// <example>MoveForwardStart()</example>
        internal static string[] MoveForwardStart()
        {
            return Run("MoveForwardStart(0)");
        }

        /// <summary>
        /// Ends movement initiated by MoveForwardStart
        /// </summary>
        /// <example>MoveForwardStop()</example>
        internal static string[] MoveForwardStop()
        {
            return Run("MoveForwardStop(0)");
        }

        /// <summary>
        /// Begins orbiting the camera downward (to look upward)
        /// </summary>
        /// <example>MoveViewDownStart()</example>
        internal static string[] MoveViewDownStart()
        {
            return Run("MoveViewDownStart()");
        }

        /// <summary>
        /// Ends camera movement initiated by MoveViewDownStart
        /// </summary>
        /// <example>MoveViewDownStop()</example>
        internal static string[] MoveViewDownStop()
        {
            return Run("MoveViewDownStop()");
        }

        /// <summary>
        /// Begins zooming the camera inward (towards/through the player character)
        /// </summary>
        /// <example>MoveViewInStart()</example>
        internal static string[] MoveViewInStart()
        {
            return Run("MoveViewInStart()");
        }

        /// <summary>
        /// Ends camera movement initiated by MoveViewInStart
        /// </summary>
        /// <example>MoveViewInStop()</example>
        internal static string[] MoveViewInStop()
        {
            return Run("MoveViewInStop()");
        }

        /// <summary>
        /// Begins orbiting the camera around the player character to the left. "Left" here is relative to the player's facing; i.e. the camera orbits clockwise if looking down. Moving the camera to the left causes it to look towards the character's right. 
        /// </summary>
        /// <example>MoveViewLeftStart()</example>
        internal static string[] MoveViewLeftStart()
        {
            return Run("MoveViewLeftStart()");
        }

        /// <summary>
        /// Ends camera movement initiated by MoveViewLeftStart
        /// </summary>
        /// <example>MoveViewLeftStop()</example>
        internal static string[] MoveViewLeftStop()
        {
            return Run("MoveViewLeftStop()");
        }

        /// <summary>
        /// Begins zooming the camera outward (away from the player character)
        /// </summary>
        /// <example>MoveViewOutStart()</example>
        internal static string[] MoveViewOutStart()
        {
            return Run("MoveViewOutStart()");
        }

        /// <summary>
        /// Ends camera movement initiated by MoveViewOutStart
        /// </summary>
        /// <example>MoveViewOutStop()</example>
        internal static string[] MoveViewOutStop()
        {
            return Run("MoveViewOutStop()");
        }

        /// <summary>
        /// Begins orbiting the camera around the player character to the right. "Right" here is relative to the player's facing; i.e. the camera orbits counter--clockwise if looking down. Moving the camera to the right causes it to look towards the character's left. 
        /// </summary>
        /// <example>MoveViewRightStart()</example>
        internal static string[] MoveViewRightStart()
        {
            return Run("MoveViewRightStart()");
        }

        /// <summary>
        /// Ends camera movement initiated by MoveViewRightStart
        /// </summary>
        /// <example>MoveViewRightStop()</example>
        internal static string[] MoveViewRightStop()
        {
            return Run("MoveViewRightStop()");
        }

        /// <summary>
        /// Begins orbiting the camera upward (to look down)
        /// </summary>
        /// <example>MoveViewUpStart()</example>
        internal static string[] MoveViewUpStart()
        {
            return Run("MoveViewUpStart()");
        }

        /// <summary>
        /// Ends camera movement initiated by MoveViewUpStart
        /// </summary>
        /// <example>MoveViewUpStop()</example>
        internal static string[] MoveViewUpStop()
        {
            return Run("MoveViewUpStop()");
        }

        /// <summary>
        /// Cancels video recording and compression. If a recording is in progress, recording is stopped and the results discarded. If compression is in progress, compression is stopped and the uncompressed portion of the movie is deleted.
        /// </summary>
        /// <example>MovieRecording_Cancel()</example>
        internal static string[] MovieRecording_Cancel()
        {
            return Run("MovieRecording_Cancel()");
        }

        /// <summary>
        /// Returns the data rate required for a given set of video recording parameters. The value returned is a prediction of the rate at which data will be written to the hard drive while recording -- if the hardware cannot support this data rate, game performance may suffer and recording may stop.
        /// </summary>
        /// <param name="width">Width of the output video (in pixels) (number)</param>
        /// <param name="framerate">Number of video frames to be recorded per second (number)</param>
        /// <param name="sound">1 if game audio is to be captured with video; otherwise 0 (number)</param>
        /// <example>dataRate=MovieRecording_DataRate(width,framerate,sound)</example>
        internal static string[] MovieRecording_DataRate(int width, int framerate, int sound)
        {
            return Run("MovieRecording_DataRate({0},{1},{2})", width, framerate, sound); //dataRate
        }

        /// <summary>
        /// Deletes an uncompressed movie
        /// </summary>
        /// <param name="filename">Path to an uncompressed movie (as provided in the MOVIE_UNCOMPRESSED_MOVIE event) (string)</param>
        /// <example>MovieRecording_DeleteMovie("filename")</example>
        internal static string[] MovieRecording_DeleteMovie(string filename)
        {
            return Run("MovieRecording_DeleteMovie(\"{0}\")", filename);
        }

        /// <summary>
        /// Returns the aspect ratio of the game display. Used in the default UI to calculate dimensions for scaling captured video to predetermined widths.For example, if the aspect ratio is 0.75 (as on a 1600x1200 screen), a movie scaled to 640 pixels wide will be 480 pixels tall; but if the aspect ratio is 0.625 (as on a 1440x900 screen), a movie scaled to 640 pixels wide will be 400 pixels tall.
        /// </summary>
        /// <example>ratio=MovieRecording_GetAspectRatio()</example>
        internal static string[] MovieRecording_GetAspectRatio()
        {
            return Run("MovieRecording_GetAspectRatio()"); //ratio
        }

        /// <summary>
        /// Returns a path to the movie currently being recorded or compressed. If no movie is being recorded or compressed, returns either the empty string ("") or the path of the last movie recorded/compressed.
        /// </summary>
        /// <example>path=MovieRecording_GetMovieFullPath()</example>
        internal static string[] MovieRecording_GetMovieFullPath()
        {
            return Run("MovieRecording_GetMovieFullPath()"); //path
        }

        /// <summary>
        /// Returns information about movie compression progress
        /// </summary>
        /// <example>recovering,progress=MovieRecording_GetProgress()</example>
        internal static string[] MovieRecording_GetProgress()
        {
            return Run("MovieRecording_GetProgress()"); //recovering,progress
        }

        /// <summary>
        /// Returns the amount of time since video recording was last started. Used in the default UI to show the length of the recording in progress when mousing over the recording indicator on the minimap.May return a nonsensical value if no video has been recorded since logging in.
        /// </summary>
        /// <example>time=MovieRecording_GetTime()</example>
        internal static string[] MovieRecording_GetTime()
        {
            return Run("MovieRecording_GetTime()"); //time
        }

        /// <summary>
        /// Returns the current width of the game display. Used in the default UI to allow the current screen resolution (or an integral factor thereof) to be selected as the video recording resolution.
        /// </summary>
        /// <example>width=MovieRecording_GetViewportWidth()</example>
        internal static string[] MovieRecording_GetViewportWidth()
        {
            return Run("MovieRecording_GetViewportWidth()"); //width
        }

        /// <summary>
        /// Returns whether a video codec is supported on the current system
        /// </summary>
        /// <param name="codecID">Four-byte identifier of a QuickTime codec (number) 1635148593 - H.264 - supported natively by Apple devices like the iPod, iPhone and AppleTV; best ratio quality/size but slowest to compress1768124260 - Apple Intermediate Codec - fastest to compress, but exclusive to Mac OS X1835692129 - Motion JPEG - faster to compress than H.264 but it will generate a bigger file1836070006 - MPEG-4 - supported by many digital cameras and iMovie</param>
        /// <example>isSupported=MovieRecording_IsCodecSupported(codecID)</example>
        internal static string[] MovieRecording_IsCodecSupported(int codecID)
        {
            return Run("MovieRecording_IsCodecSupported({0})", codecID); //isSupported
        }

        /// <summary>
        /// Returns whether a movie file is currently being compressed
        /// </summary>
        /// <example>isCompressing=MovieRecording_IsCompressing()</example>
        internal static string[] MovieRecording_IsCompressing()
        {
            return Run("MovieRecording_IsCompressing()"); //isCompressing
        }

        /// <summary>
        /// Returns whether the current system supports recording the mouse cursor in movies
        /// </summary>
        /// <example>isSupported=MovieRecording_IsCursorRecordingSupported()</example>
        internal static string[] MovieRecording_IsCursorRecordingSupported()
        {
            return Run("MovieRecording_IsCursorRecordingSupported()"); //isSupported
        }

        /// <summary>
        /// Returns whether movie recording is currently in progress
        /// </summary>
        /// <example>isRecording=MovieRecording_IsRecording()</example>
        internal static string[] MovieRecording_IsRecording()
        {
            return Run("MovieRecording_IsRecording()"); //isRecording
        }

        /// <summary>
        /// Returns whether movie recording is supported on the current system
        /// </summary>
        /// <example>isSupported=MovieRecording_IsSupported()</example>
        internal static string[] MovieRecording_IsSupported()
        {
            return Run("MovieRecording_IsSupported()"); //isSupported
        }

        /// <summary>
        /// Returns the maximum length of recorded video for a given set of video recording parameters. The value returned reflects both the data rate associated with the given parameters and the amount of space remaining on the hard drive.
        /// </summary>
        /// <param name="width">Width of the output video (in pixels) (number)</param>
        /// <param name="framerate">Number of video frames to be recorded per second (number)</param>
        /// <param name="sound">1 if game audio is to be captured with video; otherwise 0 (number)</param>
        /// <example>time=MovieRecording_MaxLength(width,framerate,sound)</example>
        internal static string[] MovieRecording_MaxLength(int width, int framerate, int sound)
        {
            return Run("MovieRecording_MaxLength({0},{1},{2})", width, framerate, sound); //time
        }

        /// <summary>
        /// Queues an uncompressed movie for compression. If there are no items currently in the queue the movie will begin compressing immediately.
        /// </summary>
        /// <param name="filename">Path to an uncompressed movie (as provided in the MOVIE_UNCOMPRESSED_MOVIE event) (string)</param>
        /// <example>MovieRecording_QueueMovieToCompress("filename")</example>
        internal static string[] MovieRecording_QueueMovieToCompress(string filename)
        {
            return Run("MovieRecording_QueueMovieToCompress(\"{0}\")", filename);
        }

        /// <summary>
        /// Enables or disables a search for uncompressed movies. After calling this function with true, a MOVIE_UNCOMPRESSED_MOVIE fires for the first uncompressed movie found (causing the default UI to prompt the user to choose whether to compress, ignore, or delete the movie). Calling this function with false ignores the movie, causing the search to continue (firing a MOVIE_UNCOMPRESSED_MOVIE event for the next uncompressed movie found, and so forth).
        /// </summary>
        /// <param name="enable">True to begin searching for uncompressed movies, false to ignore a movie for compression (boolean)</param>
        /// <example>MovieRecording_SearchUncompressedMovie(enable)</example>
        internal static string[] MovieRecording_SearchUncompressedMovie(string enable)
        {
            return Run("MovieRecording_SearchUncompressedMovie({0})", enable);
        }

        /// <summary>
        /// Begins or ends video recording. Used by the MOVIE_RECORDING_STARTSTOP key binding.
        /// </summary>
        /// <example>MovieRecording_Toggle()</example>
        internal static string[] MovieRecording_Toggle()
        {
            return Run("MovieRecording_Toggle()");
        }

        /// <summary>
        /// Enables or disables inclusion of UI elements in a video recording. Equivalent to the MovieRecordingGUI CVar, but provided as a convenience for the MOVIE_RECORDING_GUI so UI recording can be turned on or off while a movie is recording.
        /// </summary>
        /// <example>MovieRecording_ToggleGUI()</example>
        internal static string[] MovieRecording_ToggleGUI()
        {
            return Run("MovieRecording_ToggleGUI()");
        }

        /// <summary>
        /// Causes iTunes to return to the previous track played. Used by the iTunes Remote key bindings only available on the Mac OS X Wow client. Only has effect while the iTunes application is open.
        /// </summary>
        /// <example>MusicPlayer_BackTrack()</example>
        internal static string[] MusicPlayer_BackTrack()
        {
            return Run("MusicPlayer_BackTrack()");
        }

        /// <summary>
        /// Causes iTunes to play the next track in sequence. Used by the iTunes Remote key bindings only available on the Mac OS X Wow client. Only has effect while the iTunes application is open.
        /// </summary>
        /// <example>MusicPlayer_NextTrack()</example>
        internal static string[] MusicPlayer_NextTrack()
        {
            return Run("MusicPlayer_NextTrack()");
        }

        /// <summary>
        /// Causes iTunes to start or pause playback. Used by the iTunes Remote key bindings only available on the Mac OS X Wow client. Only has effect while the iTunes application is open.
        /// </summary>
        /// <example>MusicPlayer_PlayPause()</example>
        internal static string[] MusicPlayer_PlayPause()
        {
            return Run("MusicPlayer_PlayPause()");
        }

        /// <summary>
        /// Causes iTunes to lower its playback volume. Affects the iTunes volume setting only, not the overall system volume or any of Wow's volume settings.Used by the iTunes Remote key bindings only available on the Mac OS X Wow client. Only has effect while the iTunes application is open.
        /// </summary>
        /// <example>MusicPlayer_VolumeDown()</example>
        internal static string[] MusicPlayer_VolumeDown()
        {
            return Run("MusicPlayer_VolumeDown()");
        }

        /// <summary>
        /// Causes iTunes to raise its playback volume. Affects the iTunes volume setting only, not the overall system volume or any of Wow's volume settings.Used by the iTunes Remote key bindings only available on the Mac OS X Wow client. Only has effect while the iTunes application is open.
        /// </summary>
        /// <example>MusicPlayer_VolumeUp()</example>
        internal static string[] MusicPlayer_VolumeUp()
        {
            return Run("MusicPlayer_VolumeUp()");
        }

        /// <summary>
        /// Opens a new GM support ticket. The default UI sets the needResponse flag to true for "Talk to a GM" and "Stuck" tickets, and false for "Report an issue" tickets.
        /// </summary>
        /// <param name=text>The text to be sent in the ticket (string)</param>
        /// <param name="needResponse">true if the issue requires personal response from a GM; otherwise false (boolean)</param>
        /// <example>NewGMTicket(text,needResponse)</example>
        internal static string[] NewGMTicket(string text, string needResponse)
        {
            return Run("NewGMTicket(\"{0}\",{1})", text, needResponse);
        }

        /// <summary>
        /// Creates a zero-length userdata with an optional metatable.. newproxy is a experimental, undocumented and unsupported function in the Lua base library. It can be used to create a zero-length userdata, with a optional proxy.This function allows you to bypass the table type restriction on setmetatable, and thus create just a metatable. One of the main benefits from doing this is that you don't have to take the full overhead of creating a dummy table, and it's the only object that honors the metamethod __len.
        /// </summary>
        /// <param name="boolean">Controls if the returned userdata should have a metatable or not. (boolean)</param>
        /// <param name="userdata">Needs to be a proxy. The metatable will be shared between the proxies. (userdata)</param>
        /// <example>userdata=newproxy(boolean)ornewproxy(userdata)</example>
        internal static string[] newproxy(string boolean, string userdata)
        {
            return Run("newproxy({0})ornewproxy({1})", boolean, userdata); //{1}
        }

        /// <summary>
        /// Returns the next key/value pair in a table
        /// </summary>
        /// <param name="t">A table (table)</param>
        /// <param name="key">A key in the table (value)</param>
        /// <example>nextKey,nextValue=next(t[,key])</example>
        internal static string[] next(string t, string key)
        {
            return Run("nex{0}({0}[,{1}])", t, key); //nex{0}Key,nex{0}Value
        }

        /// <summary>
        /// Moves the camera to the next predefined setting. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().
        /// </summary>
        /// <example>NextView()</example>
        internal static string[] NextView()
        {
            return Run("NextView()");
        }

        /// <summary>
        /// Returns whether the player has exceeded the allowed play time limit. When in this state, the player is unable to gain loot or XP or complete quests and cannot use trade skills; returning to normal requires logging out of the game for a period of time (see GetBillingTimeRested).Only used in locales where the length of play sessions is restricted (e.g. mainland China).
        /// </summary>
        /// <example>hasNoTime=NoPlayTime()</example>
        internal static string[] NoPlayTime()
        {
            return Run("NoPlayTime()"); //hasNoTime
        }

        /// <summary>
        /// Marks a unit for inspection and requests talent data from the server. Information about the inspected item's equipment can be retrieved immediately using Inventory APIs (e.g. GetInventoryItemLink("target",1)). Talent data is not available immediately; the INSPECT_TALENT_READY event fires once the inspected unit's talent information can be retrieved using Talent APIs (e.g. GetTalentInfo(1,1,true)).
        /// </summary>
        /// <param name="unit">A unit to inspect (string, unitID)</param>
        /// <example>NotifyInspect("unit")</example>
        internal static string[] NotifyInspect(string unit)
        {
            return Run("NotifyInspect(\"{0}\")", unit);
        }

        /// <summary>
        /// Causes the default UI to display an error message indicating that actions are disallowed while the player is dead. Fires a UI_ERROR_MESSAGE event containing a localized message identified by the global variable ERR_PLAYER_DEAD.
        /// </summary>
        /// <example>NotWhileDeadError()</example>
        internal static string[] NotWhileDeadError()
        {
            return Run("NotWhileDeadError()");
        }

        /// <summary>
        /// Returns the number of flight points on the taxi map. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <example>numNodes=NumTaxiNodes()</example>
        internal static int NumTaxiNodes()
        {
            return Convert.ToInt32(Run("NumTaxiNodes()")[0]); //numNodes
        }

        /// <summary>
        /// Requests an arena or guild charter signature from the targeted unit
        /// </summary>
        /// <example>OfferPetition()</example>
        internal static string[] OfferPetition()
        {
            return Run("OfferPetition()");
        }

        /// <summary>
        /// Returns whether the player has an equipped weapon in the off hand slot
        /// </summary>
        /// <example>hasWeapon=OffhandHasWeapon()</example>
        internal static string[] OffhandHasWeapon()
        {
            return Run("OffhandHasWeapon()"); //hasWeapon
        }

        /// <summary>
        /// Queries the server for calendar status information. May cause one or more CALENDAR_UPDATE_* events to fire depending on the contents of the player's calendar. In the default UI, called when the calendar is shown.
        /// </summary>
        /// <example>OpenCalendar()</example>
        internal static string[] OpenCalendar()
        {
            return Run("OpenCalendar()");
        }

        /// <summary>
        /// Displays the introductory cinematic for the player's race. Only has effect if the player has never gained any experience.
        /// </summary>
        /// <example>OpeningCinematic()</example>
        internal static string[] OpeningCinematic()
        {
            return Run("OpeningCinematic()");
        }

        /// <summary>
        /// . Was used in early betas of World of Warcraft before trainer NPCs existed. Only remaining use is equivalent to CloseTrainer().
        /// </summary>
        /// <example>OpenTrainer()</example>
        internal static string[] OpenTrainer()
        {
            return Run("OpenTrainer()");
        }

        /// <summary>
        /// Returns an iterator function for a table. Return values are such that the construction  for k,v in pairs(t)
        ///    -- body
        ///  end
        /// will iterate over all key/value pairs in the table.
        /// </summary>
        /// <param name="t">A table (table)</param>
        /// <example>iterator,t,index=pairs(t)</example>
        internal static string[] pairs(string t)
        {
            return Run("pairs({0})", t); //i{0}era{0}or,{0},index
        }

        /// <summary>
        /// Returns whether the player is near the allowed play time limit. When in this state, the player receives half the normal amount of money and XP from kills and quests and cannot use trade skills; returning to normal requires logging out of the game for a period of time (see GetBillingTimeRested).Only used in locales where the length of play sessions is restricted (e.g. mainland China).
        /// </summary>
        /// <example>partialPlayTime=PartialPlayTime()</example>
        internal static string[] PartialPlayTime()
        {
            return Run("PartialPlayTime()"); //partialPlayTime
        }

        /// <summary>
        /// Executes a function in protected mode. When running a function in protected mode, any errors do not propagate beyond the function (i.e. they do not stop all execution and call the default error handler).
        /// </summary>
        /// <param name="f">A function (function)</param>
        /// <param name="...">Arguments to be passed to the function (list)</param>
        /// <example>status,...=pcall(f,...)</example>
        internal static string[] pcall(string f, string ellips)
        {
            return Run("pcall({0},{1})", f, ellips); //status,{1}
        }

        /// <summary>
        /// Releases the player's pet. For Hunter pets, this function sends the pet away, never to return (in the default UI, it's called when accepting the "Are you sure you want to permanently abandon your pet?" dialog). For other pets, this function is equivalent to PetDismiss().
        /// </summary>
        /// <example>PetAbandon()</example>
        internal static string[] PetAbandon()
        {
            return Run("PetAbandon()");
        }

        /// <summary>
        /// Enables aggressive mode for the player's pet. In this mode, the pet automatically attacks any nearby hostile targets.
        /// </summary>
        /// <example>PetAggressiveMode()</example>
        internal static string[] PetAggressiveMode()
        {
            return Run("PetAggressiveMode()");
        }

        /// <summary>
        /// Instructs the pet to attack. The pet will attack the player's current target if no unit is specified.
        /// </summary>
        /// <param name="unit">A unit to attack (string, unitID), or the name of a unit to attack (string)</param>
        /// <example>PetAttack(["unit"])</example>
        internal static string[] PetAttack(string unit = null)
        {
            return Run("PetAttack({0})", unit != null ? '"' + unit + '"' : string.Empty);
        }

        /// <summary>
        /// Returns whether the player's pet can be abandoned. Only Hunter pets can be permanently abandoned.
        /// </summary>
        /// <example>canAbandon=PetCanBeAbandoned()</example>
        internal static string[] PetCanBeAbandoned()
        {
            return Run("PetCanBeAbandoned()"); //canAbandon
        }

        /// <summary>
        /// Returns whether a Dismiss Pet command should be available for the player's pet. Returns 1 for hunter pets even though they use the Dismiss Pet (cast) spell instead of a Dismiss Pet (instant) command; the value of PetCanBeAbandoned() overrides this in causing the default UI to hide the command. Currently unused, but may be used in the future for other pets.
        /// </summary>
        /// <example>canDismiss=PetCanBeDismissed()</example>
        internal static string[] PetCanBeDismissed()
        {
            return Run("PetCanBeDismissed()"); //canDismiss
        }

        /// <summary>
        /// Returns whether the player's pet can be renamed. Only hunter pets can be renamed, and only once (barring use of a Certificate of Ownership).
        /// </summary>
        /// <example>canRename=PetCanBeRenamed()</example>
        internal static string[] PetCanBeRenamed()
        {
            return Run("PetCanBeRenamed()"); //canRename
        }

        /// <summary>
        /// Enables defensive mode for the player's pet. In this mode, the pet automatically attacks only units which attack it or the player or units the player is attacking.
        /// </summary>
        /// <example>PetDefensiveMode()</example>
        internal static string[] PetDefensiveMode()
        {
            return Run("PetDefensiveMode()");
        }

        /// <summary>
        /// Dismisses the currently controlled pet. Used for dismissing Warlock pets, Mind Control targets, etc. Has no effect for Hunter pets, which can only be dismissed using the Dismiss Pet spell.
        /// </summary>
        /// <example>PetDismiss()</example>
        internal static string[] PetDismiss()
        {
            return Run("PetDismiss()");
        }

        /// <summary>
        /// Instructs the pet to follow the player. If the pet is currently attacking a target, the pet will stop attacking.
        /// </summary>
        /// <example>PetFollow()</example>
        internal static string[] PetFollow()
        {
            return Run("PetFollow()");
        }

        /// <summary>
        /// Returns whether the player's current pet has an action bar
        /// </summary>
        /// <example>hasActionBar=PetHasActionBar()</example>
        internal static string[] PetHasActionBar()
        {
            return Run("PetHasActionBar()"); //hasActionBar
        }

        /// <summary>
        /// Enables passive mode for the player's pet. In this mode, the pet will not automatically attack any target.
        /// </summary>
        /// <example>PetPassiveMode()</example>
        internal static string[] PetPassiveMode()
        {
            return Run("PetPassiveMode()");
        }

        /// <summary>
        /// Renames the currently controlled pet. Only Hunter pets can be renamed, and a given pet can only be renamed once (barring use of a Certificate of Ownership).
        /// </summary>
        /// <param name="name">New name for the pet (nominative form on Russian clients) (string)</param>
        /// <param name="genitive">Genitive form of the pet's new name; applies only on Russian clients (string)</param>
        /// <param name="dative">Dative form of the pet's new name; applies only on Russian clients (string)</param>
        /// <param name="accusative">Accusative form of the pet's new name; applies only on Russian clients (string)</param>
        /// <param name="instrumental">Instrumental form of the pet's new name; applies only on Russian clients (string)</param>
        /// <param name="prepositional">Prepositional form of the pet's new name; applies only on Russian clients (string)</param>
        /// <example>PetRename("name"[,"genitive"[,"dative"[,"accusative"[,"instrumental"[,"prepositional"]]]]])</example>
        internal static string[] PetRename(string name, string genitive, string dative, string accusative, string instrumental, string prepositional)
        {
            return Run("PetRe{0}(\"{0}\"[,\"{1}\"[,\"{2}\"[,\"{3}\"[,\"{4}\"[,\"{5}\"]]]]])", name, genitive, dative, accusative, instrumental, prepositional);
        }

        /// <summary>
        /// Instructs the pet to stop attacking
        /// </summary>
        /// <example>PetStopAttack()</example>
        internal static string[] PetStopAttack()
        {
            return Run("PetStopAttack()");
        }

        /// <summary>
        /// Instructs the pet to stay at its current location. If the pet is currently attacking a target, the pet will stop attacking.
        /// </summary>
        /// <example>PetWait()</example>
        internal static string[] PetWait()
        {
            return Run("PetWait()");
        }

        /// <summary>
        /// Puts the contents of an action bar slot onto the cursor or the cursor contents into an action bar slot. After an action is picked up via this function, it can only be placed into other action bar slots (with PlaceAction() or by calling PickupAction() again), even if the action is an item which could otherwise be placed elsewhere. Unlike many other "pickup" cursor functions, this function removes the picked-up action from the source slot -- an action slot can be emptied by calling this function followed by ClearCursor().If the action slot is empty and the cursor already holds an action, a spell, a companion (mount or non-combat pet), a macro, an equipment set, or an item (with a "Use:" effect), it is put into the action slot. If both the cursor and the slot hold an action (or any of the above data types), the contents of the cursor and the slot are exchanged.
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <example>PickupAction(slot)</example>
        internal static string[] PickupAction(string slot)
        {
            return Run("PickupAction({0})", slot);
        }

        /// <summary>
        /// Puts an equipped container onto the cursor
        /// </summary>
        /// <param name="slot">An inventory slot containing a bag (see  GetInventorySlotInfo(), ContainerIDToInventoryID()) (number, inventoryID)</param>
        /// <example>PickupBagFromSlot(slot)</example>
        internal static string[] PickupBagFromSlot(string slot)
        {
            return Run("PickupBagFromSlot({0})", slot);
        }

        /// <summary>
        /// Puts a non-combat pet or mount onto the cursor
        /// </summary>
        /// <param name="type">Type of companion (string) CRITTER - A non-combat petMOUNT - A mount</param>
        /// <param name="index">Index of a companion (between 1 and GetNumCompanions(type)) (number)</param>
        /// <example>PickupCompanion("type",index)</example>
        internal static string[] PickupCompanion(string type, int index)
        {
            return Run("PickupCompanion(\"{0}\",{1})", type, index);
        }

        /// <summary>
        /// Picks up an item from or puts an item into a slot in one of the player's bags or other containers. If the cursor is empty and the referenced container slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the container slot are exchanged.An item picked up from a container is not removed from its slot (until put elsewhere); when an item is picked up, the slot becomes locked, preventing other changes to its contents until the disposition (movement, trade, mailing, auctioning, destruction, etc) of the picked-up item is resolved.
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>PickupContainerItem(container,slot)</example>
        internal static string[] PickupContainerItem(int container, int slot)
        {
            return Run("PickupContainerItem({0},{1})", container, slot);
        }

        /// <summary>
        /// Puts an equipment set (specified by index) on the cursor. Can be used to place an equipment set in an action bar slot.
        /// </summary>
        /// <param name="index">Index of an equipment set (between 1 and GetNumEquipmentSets()) (number)</param>
        /// <example>PickupEquipmentSet(index)</example>
        internal static string[] PickupEquipmentSet(int index)
        {
            return Run("PickupEquipmentSet({0})", index);
        }

        /// <summary>
        /// Puts an equipment set on the cursor. Can be used to place an equipment set in an action bar slot.
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <example>PickupEquipmentSetByName("name")</example>
        internal static string[] PickupEquipmentSetByName(string name)
        {
            return Run("PickupEquipmentSetByName(\"{0}\")", name);
        }

        /// <summary>
        /// Picks up an item from or puts an item into the guild bank. If the cursor is empty and the referenced guild bank slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the guild bank slot are exchanged.
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (number)</param>
        /// <param name="slot">Index of an item slot in the guild bank tab (number)</param>
        /// <example>PickupGuildBankItem(tab,slot)</example>
        internal static string[] PickupGuildBankItem(int tab, int slot)
        {
            return Run("PickupGuildBankItem({0},{1})", tab, slot);
        }

        /// <summary>
        /// Puts money from the guild bank onto the cursor. Money is not actually withdrawn from the guild bank; in the default UI, when the cursor "puts" the money into one of the player's bags, it calls WithdrawGuildBankMoney().
        /// </summary>
        /// <param name="amount">Amount of money to pick up (in copper) (number)</param>
        /// <example>PickupGuildBankMoney(amount)</example>
        internal static string[] PickupGuildBankMoney(int amount)
        {
            return Run("PickupGuildBankMoney({0})", amount);
        }

        /// <summary>
        /// Picks up an item from or puts an item into an equipment slot. If the cursor is empty and the referenced inventory slot contains an item, that item is put onto the cursor. If the cursor contains an item (which can be equipped in the slot) and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the inventory slot are exchanged.An item picked up from an inventory slot is not removed from the slot (until put elsewhere); when an item is picked up, the slot becomes locked, preventing other changes to its contents until the disposition (movement, trade, destruction, etc) of the picked-up item is resolved.
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>PickupInventoryItem(slot)</example>
        internal static string[] PickupInventoryItem(string slot)
        {
            return Run("PickupInventoryItem({0})", slot);
        }

        /// <summary>
        /// Puts an arbitrary item onto the cursor. Puts an item onto the cursor regardless of its location (equipped, bags, bank or not even in the player's possession); can be used to put an item into an action slot (see PlaceAction()) even if the player does not currently hold the item. Since the item is not picked up from a specific location, this function cannot be used to move an item to another bag, trade it to another player, attach it to a mail message, destroyed, etc.
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>PickupItem(itemID)orPickupItem("itemName")orPickupItem("itemLink")</example>
        internal static string[] PickupItem(int itemID, string itemName, string itemLink)
        {
            return Run("PickupItem({0})orPickupItem(\"{1}\")orPickupItem(\"{2}\")", itemID, itemName, itemLink);
        }

        /// <summary>
        /// Puts a macro onto the cursor
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>PickupMacro(index)orPickupMacro("name")</example>
        internal static string[] PickupMacro(string index, string name)
        {
            return Run("PickupMacro({0})orPickupMacro(\"{1}\")", index, name);
        }

        /// <summary>
        /// Puts an item available for purchase from a vendor onto the cursor
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <example>PickupMerchantItem(index)</example>
        internal static string[] PickupMerchantItem(int index)
        {
            return Run("PickupMerchantItem({0})", index);
        }

        /// <summary>
        /// Puts the contents of a pet action slot onto the cursor or the cursor contents into a pet action slot. Only pet actions and spells from the "pet" portion of the spellbook can be placed into pet action slots.If the cursor is empty and the referenced pet action slot contains an action, that action is put onto the cursor (but remains in the slot). If the cursor contains a pet action or pet spell and the slot is empty, the action/spell is placed into the slot. If both the cursor and the slot contain pet actions, the contents of the cursor and the pet action slot are exchanged.
        /// </summary>
        /// <param name="index">Index of a pet action (between 1 and NUM_PET_ACTION_SLOTS) (number)</param>
        /// <example>PickupPetAction(index)</example>
        internal static string[] PickupPetAction(int index)
        {
            return Run("PickupPetAction({0})", index);
        }

        /// <summary>
        /// Puts an amount of the player's money onto the cursor. Money is not immediately deducted from the player's total savings (though it appears such on the default UI's money displays, which generally show GetMoney()-GetCursorMoney()).
        /// </summary>
        /// <param name="amount">Amount of money to put on the cursor (in copper) (number)</param>
        /// <example>PickupPlayerMoney(amount)</example>
        internal static string[] PickupPlayerMoney(int amount)
        {
            return Run("PickupPlayerMoney({0})", amount);
        }

        /// <summary>
        /// Puts a spell from the player's or pet's spellbook onto the cursor
        /// </summary>
        /// <param name="id">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <example>PickupSpell(id,"bookType")</example>
        internal static string[] PickupSpell(string id, string bookType)
        {
            return Run("PickupSpell({0},\"{1}\")", id, bookType);
        }

        /// <summary>
        /// Puts a pet from the stables onto the cursor. Use with ClickStablePet to move pets between stabled and active status.
        /// </summary>
        /// <param name="index">Index of a stable slot (number) 0 - Active pet1 to NUM_PET_STABLE_SLOTS - A stable slot</param>
        /// <example>PickupStablePet(index)</example>
        internal static string[] PickupStablePet(int index)
        {
            return Run("PickupStablePet({0})", index);
        }

        /// <summary>
        /// Puts money offered by the player for trade onto the cursor. Money put onto the cursor is subtracted from the amount offered for trade (see GetPlayerTradeMoney()).
        /// </summary>
        /// <param name="amount">Amount of money to take from the trade window (in copper) (number)</param>
        /// <example>PickupTradeMoney(amount)</example>
        internal static string[] PickupTradeMoney(int amount)
        {
            return Run("PickupTradeMoney({0})", amount);
        }

        /// <summary>
        /// Begins adjusting the player character's angle of vertical movement downward. Affects only the angle or slope of movement for swimming or flying; has no immediately visible effect if the player is not moving, but alters the trajectory followed as soon as the player begins moving. Continuously adjusts pitch until the minimum angle is reached or PitchDownStop() is called.Used by the PITCHDOWN binding.
        /// </summary>
        /// <example>PitchDownStart()</example>
        internal static string[] PitchDownStart()
        {
            return Run("PitchDownStart()");
        }

        /// <summary>
        /// Ends movement initiated by PitchDownStart
        /// </summary>
        /// <example>PitchDownStop()</example>
        internal static string[] PitchDownStop()
        {
            return Run("PitchDownStop()");
        }

        /// <summary>
        /// Begins adjusting the player character's angle of vertical movement upward. Affects only the angle or slope of movement for swimming or flying; has no immediately visible effect if the player is not moving, but alters the trajectory followed as soon as the player begins moving. Continuously adjusts pitch until the maximum angle is reached or PitchUpStop() is called.Used by the PITCHUP binding.
        /// </summary>
        /// <example>PitchUpStart()</example>
        internal static string[] PitchUpStart()
        {
            return Run("PitchUpStart()");
        }

        /// <summary>
        /// Ends movement initiated by PitchUpStart
        /// </summary>
        /// <example>PitchUpStop()</example>
        internal static string[] PitchUpStop()
        {
            return Run("PitchUpStop()");
        }

        /// <summary>
        /// Puts the contents of the cursor into an action bar slot. If the action slot is empty and the cursor already holds an action, a spell, a companion (mount or non-combat pet), a macro, an equipment set, or an item (with a "Use:" effect), it is put into the action slot. If both the cursor and the slot hold an action (or any of the above data types), the contents of the cursor and the slot are exchanged.Does nothing if the cursor is empty.
        /// </summary>
        /// <param name="slot">Destination action bar slot (number, actionID)</param>
        /// <example>PlaceAction(slot)</example>
        internal static string[] PlaceAction(string slot)
        {
            return Run("PlaceAction({0})", slot);
        }

        /// <summary>
        /// Places a bid on (or buys out) an auction item. Attempting to bid an amount equal to or greater than the auction's buyout price will buy out the auction (spending only the exact buyout price) instead of placing a bid.
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="index">Index of an auction in the listing (number)</param>
        /// <param name="bid">Amount to bid (in copper) (number)</param>
        /// <example>PlaceAuctionBid("list",index,bid)</example>
        internal static string[] PlaceAuctionBid(string list, int index, int bid)
        {
            return Run("PlaceAuctionBid(\"{0}\",{1},{2})", list, index, bid);
        }

        /// <summary>
        /// Applies the glyph currently awaiting a target to a socket. Only valid during glyph application: when the player has activated the glyph item but before she has chosen the glyph slot to put it in (i.e. the glowing hand cursor is showing).This function does not ask for confirmation before overwriting an existing glyph. However, calling this function only begins the "spellcast" that applies the glyph, so canceling glyph application is still possible.
        /// </summary>
        /// <param name="socket">Which glyph socket to apply the glyph to (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex)</param>
        /// <example>PlaceGlyphInSocket(socket)</example>
        internal static string[] PlaceGlyphInSocket(string socket)
        {
            return Run("PlaceGlyphInSocket({0})", socket);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>PlayDance()</example>
        internal static string[] PlayDance()
        {
            return Run("PlayDance()");
        }

        /// <summary>
        /// Returns whether the player can accept a summons
        /// </summary>
        /// <example>amount=PlayerCanTeleport()</example>
        internal static string[] PlayerCanTeleport()
        {
            return Run("PlayerCanTeleport()"); //amount
        }

        /// <summary>
        /// Returns whether a battleground participant is inactive (and eligible for reporting as AFK)
        /// </summary>
        /// <param name="name">Name of a friendly player unit in the current battleground (string)</param>
        /// <param name="unit">A friendly player unit in the current battleground (string, unitID)</param>
        /// <example>isInactive=PlayerIsPVPInactive("name")orPlayerIsPVPInactive("unit")</example>
        internal static string[] PlayerIsPVPInactive(string name, string unit)
        {
            return Run("PlayerIsPVPInactive(\"{0}\")orPlayerIsPVPInactive(\"{1}\")", name, unit); //isInactive
        }

        /// <summary>
        /// Plays an audio file as background music. Any other background music that is currently playing will be faded out as the new music begins; if the Sound_ZoneMusicNoDelay is set, music will loop continuously until StopMusic() is called.Wow supports WAV, MP3 and Ogg audio formats.
        /// </summary>
        /// <param name="musicfile">Path to a music file (string)</param>
        /// <example>PlayMusic("musicfile")</example>
        internal static string[] PlayMusic(string musicfile)
        {
            return Run("PlayMusic(\"{0}\")", musicfile);
        }

        /// <summary>
        /// Plays one of Wow's built-in sound effects. Only supports sounds found in the Sound\Interface directory within Wow's MPQ files; to play other built-in sounds or sounds in an addon directory, use PlaySoundFile().
        /// </summary>
        /// <param name="sound">Name of a built-in sound effect (string)</param>
        /// <example>PlaySound("sound")</example>
        internal static string[] PlaySound(string sound)
        {
            return Run("PlaySound(\"{0}\")", sound);
        }

        /// <summary>
        /// Plays an audio file at a given path. For a shorter way to specify one of Wow's built-in UI sound effects, see PlaySound().Wow supports WAV, MP3 and Ogg audio formats.
        /// </summary>
        /// <param name="soundFile">A path to the sound file to be played (string)</param>
        /// <example>PlaySoundFile("soundFile")</example>
        internal static string[] PlaySoundFile(string soundFile)
        {
            return Run("PlaySoundFile(\"{0}\")", soundFile);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>PositionMiniWorldMapArrowFrame()</example>
        internal static string[] PositionMiniWorldMapArrowFrame()
        {
            return Run("PositionMiniWorldMapArrowFrame()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="point">The anchor point on the WorldMapArrowFrame (string)</param>
        /// <param name="frame">The frame that WorldMapArrowFrame should be anchored relative to (string)</param>
        /// <param name="relativePoint">The anchor point on the relative frame (string)</param>
        /// <param name="offsetX">The horizontal offset from the given anchor position, in pixels (number)</param>
        /// <param name="offsetY">The vertical offset from the given anchor position, in pixels (number)</param>
        /// <example>PositionWorldMapArrowFrame("point","frame"[,"relativePoint"[,offsetX[,offsetY]]])</example>
        internal static string[] PositionWorldMapArrowFrame(string point, string frame, string relativePoint, int offsetX, int offsetY)
        {
            return Run("PositionWorldMapArrowFrame(\"{0}\",\"{1}\"[,\"{2}\"[,{3}[,{4}]]])", point, frame, relativePoint, offsetX, offsetY);
        }

        /// <summary>
        /// Moves the camera to the previous predefined setting. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().
        /// </summary>
        /// <example>PrevView()</example>
        internal static string[] PrevView()
        {
            return Run("PrevView()");
        }

        /// <summary>
        /// Possibly changes the WorldMap based on a mouse click. May change the map zone or zoom based on the click location: e.g. if the world map shows Dragonblight and one clicks in the area labeled "Wintergrasp" on the map, the current map zone changes to show Wintergrasp.
        /// </summary>
        /// <param name="clickX">Horizontal position of the click relative to the current world map (0 = left edge, 1 = right edge) (number)</param>
        /// <param name="clickY">Vertical position of the click relative to the current world map (0 = top, 1 = bottom) (number)</param>
        /// <example>ProcessMapClick(clickX,clickY)</example>
        internal static string[] ProcessMapClick(int clickX, int clickY)
        {
            return Run("ProcessMapClick({0},{1})", clickX, clickY);
        }

        /// <summary>
        /// Promotes a raid member to raid assistant
        /// </summary>
        /// <param name="unit">A unit in the raid (string, unitID)</param>
        /// <param name="name">Name of a unit in the raid (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>
        /// <example>PromoteToAssistant("unit")orPromoteToAssistant("name"[,exactMatch])</example>
        internal static string[] PromoteToAssistant(string unit, string name, string exactMatch)
        {
            return Run("PromoteToAssistant(\"{0}\")orPromoteToAssistant(\"{1}\"[,{2}])", unit, name, exactMatch);
        }

        /// <summary>
        /// Promotes a player to party/raid leader
        /// </summary>
        /// <param name="unit">A unit in the party or raid (string, unitID)</param>
        /// <param name="name">Name of a party member (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>
        /// <example>PromoteToLeader("unit")orPromoteToLeader("name"[,exactMatch])</example>
        internal static string[] PromoteToLeader(string unit, string name, string exactMatch)
        {
            return Run("PromoteToLeader(\"{0}\")orPromoteToLeader(\"{1}\"[,{2}])", unit, name, exactMatch);
        }

        /// <summary>
        /// Purchases the next available bank slot. Only available while interacting with a banker NPC (i.e. between the BANKFRAME_OPENED and BANKFRAME_CLOSED events).
        /// </summary>
        /// <example>PurchaseSlot()</example>
        internal static string[] PurchaseSlot()
        {
            return Run("PurchaseSlot()");
        }

        /// <summary>
        /// Puts the item on the cursor into the player's backpack. The item will be placed in the lowest numbered slot (containerSlotID) in the player's backpack.Causes an error message (UI_ERROR_MESSAGE) if the backpack is full.
        /// </summary>
        /// <example>hadItem=PutItemInBackpack()</example>
        internal static string[] PutItemInBackpack()
        {
            return Run("PutItemInBackpack()"); //hadItem
        }

        /// <summary>
        /// Puts the item on the cursor into one of the player's bags or other containers. The item will be placed in the lowest numbered slot (containerSlotID) in the container.Causes an error message (UI_ERROR_MESSAGE) if the container is full. Cannot be used to place an item into the player's backpack; see PutItemInBackpack().
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <example>hadItem=PutItemInBag(container)</example>
        internal static string[] PutItemInBag(string container)
        {
            return Run("PutItemInBag({0})", container); //hadItem
        }

        /// <summary>
        /// Requests data from the server for the list of auctions meeting given search criteria. If any search criterion is omitted or nil, the search will include all possible values for that criterion.Search queries are throttled, preventing abuse of the server by clients sending too many queries in short succession. Normal queries can be sent once every few seconds; mass queries return all results in the auction house instead of one "page" at a time, and can only be sent once every several minutes.Query results are not returned immediately: the AUCTION_ITEM_LIST_UPDATE event fires once data is available; listing information can then be retrieved using GetAuctionItemInfo() or other Auction APIs.
        /// </summary>
        /// <param name="name">Full or partial item name to limit search results; will match any item whose name contains this string (string)</param>
        /// <param name="minLevel">Maximum required character level of items to limit search results (number)</param>
        /// <param name="maxLevel">Maximum required character level of items to limit search results (number)</param>
        /// <param name="invTypeIndex">Index of an item inventory type to limit search results (note that GetAuctionInvTypes(classIndex, subClassIndex) returns a list of token, display pairs for each inventory type; thus, to convert a token index from that list for use here, divide by 2 and round up) (number)</param>
        /// <param name="classIndex">Index of an item class to limit search results (in the list returned by GetAuctionItemClasses()) (number)</param>
        /// <param name="subClassIndex">Index of an item subclass to limit search results (in the list returned by GetAuctionItemSubClasses(classIndex)) (number)</param>
        /// <param name="page">Which "page" of search results to list, if more than NUM_AUCTION_ITEMS_PER_PAGE (50) auctions are available; nil to query the first (or only) page (number)</param>
        /// <param name="isUsable">True to limit search results to only items which can be used or equipped by the player character; otherwise false (boolean)</param>
        /// <param name="minQuality">Minimum quality (rarity) level of items to limit search results (itemQuality)</param>
        /// <param name="getAll">True to perform a mass query (returning all listings at once); false to perform a normal query (returning a large number of listings in "pages" of NUM_AUCTION_ITEMS_PER_PAGE [50] at a time) (boolean)</param>
        /// <example>QueryAuctionItems(["name"[,minLevel[,maxLevel[,invTypeIndex[,classIndex[,subClassIndex[,page[,isUsable[,minQuality[,getAll]]]]]]]]]])</example>
        internal static string[] QueryAuctionItems(string name, int minLevel, int maxLevel, int invTypeIndex, int classIndex, int subClassIndex, int page, string isUsable, string minQuality, string getAll)
        {
            return Run("QueryAuctionItems([\"{0}\"[,{1}[,{2}[,{3}[,{4}[,{5}[,{6}[,{7}[,{8}[,{9}]]]]]]]]]])", name, minLevel, maxLevel, invTypeIndex, classIndex, subClassIndex, page, isUsable, minQuality, getAll);
        }

        /// <summary>
        /// Requests the item transaction log for a guild bank tab from the server. Fires the GUILDBANKLOG_UPDATE event when transaction log information becomes available.
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>QueryGuildBankLog(tab)</example>
        internal static string[] QueryGuildBankLog(int tab)
        {
            return Run("QueryGuildBankLog({0})", tab);
        }

        /// <summary>
        /// Requests information about the contents of a guild bank tab from the server. Fires the GUILDBANKBAGSLOTS_CHANGED event when information about the tab's contents becomes available.
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>QueryGuildBankTab(tab)</example>
        internal static string[] QueryGuildBankTab(int tab)
        {
            return Run("QueryGuildBankTab({0})", tab);
        }

        /// <summary>
        /// Requests guild bank tab info text from the server. The text is not returned immediately; the GUILDBANK_UPDATE_TEXT event fires when text is available for retrieval by the GetGuildBankText() function.
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>QueryGuildBankText(tab)</example>
        internal static string[] QueryGuildBankText(int tab)
        {
            return Run("QueryGuildBankText({0})", tab);
        }

        /// <summary>
        /// Requests guild event log information from the server. Fires the GUILD_EVENT_LOG_UPDATE event when event log information becomes available.
        /// </summary>
        /// <example>QueryGuildEventLog()</example>
        internal static string[] QueryGuildEventLog()
        {
            return Run("QueryGuildEventLog()");
        }

        /// <summary>
        /// Queries the server for the player's completed quest information. This function is throttled by the server and can currently only be called every 15 minutes.  This function will return immediately, and the QUEST_QUERY_COMPLETE will fire when the information is available from the server.  At that point, it can be obtained using the GetQuestsCompleted function.
        /// </summary>
        /// <example>QueryQuestsCompleted()</example>
        internal static string[] QueryQuestsCompleted()
        {
            return Run("QueryQuestsCompleted()");
        }

        /// <summary>
        /// Causes the default UI to display an error message indicating that the player must choose a reward to complete the quest presented by a questgiver. Fires a UI_ERROR_MESSAGE event containing a localized message identified by the global variable ERR_QUEST_MUST_CHOOSE. Choose wisely.
        /// </summary>
        /// <example>QuestChooseRewardError()</example>
        internal static string[] QuestChooseRewardError()
        {
            return Run("QuestChooseRewardError()");
        }

        /// <summary>
        /// Returns whether accepting the offered quest will flag the player for PvP. Only valid when the questgiver UI is showing the accept/decline stage of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events); otherwise may return nil or a value from the most recently displayed quest.
        /// </summary>
        /// <example>questFlag=QuestFlagsPVP()</example>
        internal static string[] QuestFlagsPVP()
        {
            return Run("QuestFlagsPVP()"); //questFlag
        }

        /// <summary>
        /// Shares a quest with other group members
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries(); if omitted, Defaults to the selected quest (number)</param>
        /// <example>QuestLogPushQuest([questIndex])</example>
        internal static string[] QuestLogPushQuest(int questIndex)
        {
            return Run("QuestLogPushQuest([{0}])", questIndex);
        }

        /// <summary>
        /// Attempts to exit the World of Warcraft client. Results vary based on current conditions:If the player is in combat or under other temporary restrictions (e.g. falling), fires the UI_ERROR_MESSAGE event with a message indicating the player cannot log out at the moment.If the player is not in an inn, major city, or other "rest" area (i.e. IsResting() returns nil), fires the PLAYER_QUITING event, causing the default UI to show a countdown, quitting Wow after a period of time if not canceled.If the player is in a "rest" area, quits the game immediately.
        /// </summary>
        /// <example>Quit()</example>
        internal static string[] Quit()
        {
            return Run("Quit()");
        }

        /// <summary>
        /// Converts an angle specified in degrees to radians. Alias for the standard library function math.rad.
        /// </summary>
        /// <param name="degrees">An angle specified in degrees (number)</param>
        /// <example>radians=rad(degrees)</example>
        internal static string[] rad(int degrees)
        {
            return Run("rad({0})", degrees); //radians
        }

        /// <summary>
        /// Generates a pseudo-random number. Alias for the standard library function math.random.
        /// </summary>
        /// <param name="m">First limit for randomly generated numbers (number)</param>
        /// <param name="n">Second limit for randomly generated numbers (number)</param>
        /// <example>randomNum=random([m[,n]])</example>
        internal static string[] random(int m, int n)
        {
            return Run("ra{1}do{0}([{0}[,{1}]])", m, n); //ra{1}do{0}Nu{0}
        }

        /// <summary>
        /// Initiates a public, server-side "dice roll". Used in the default UI to implement the /roll chat command; when called, the server generates a random integer and sends it to the player and all others nearby (or in the same party/raid) via a CHAT_MSG_SYSTEM event. (The server message is formatted according to the global RANDOM_ROLL_RESULT; e.g. "Leeroy rolls 3 (1-100)".)For random number generation that does not involve the server or send visible messages to other clients, see math.random.
        /// </summary>
        /// <param name="min">Lowest number to be randomly chosen (number,string)</param>
        /// <param name="max">Highest number to be randomly chosen (number,string)</param>
        /// <example>RandomRoll(min,max)</example>
        internal static string[] RandomRoll(string min, string max)
        {
            return Run("RandomRoll({0},{1})", min, max);
        }

        /// <summary>
        /// Returns whether two values are equal without invoking any metamethods
        /// </summary>
        /// <param name="v1">Any value (value)</param>
        /// <param name="v2">Any value (function)</param>
        /// <example>isEqual=rawequal(v1,v2)</example>
        internal static string[] rawequal(string v1, string v2)
        {
            return Run("rawequal({0},{1})", v1, v2); //isEqual
        }

        /// <summary>
        /// Returns the real value associated with a key in a table without invoking any metamethods
        /// </summary>
        /// <param name="t">A table (table)</param>
        /// <param name="key">A key in the table (value)</param>
        /// <example>value=rawget(t,key)</example>
        internal static string[] rawget(string t, string key)
        {
            return Run("rawge{0}({0},{1})", t, key); //value
        }

        /// <summary>
        /// Sets the value associated with a key in a table without invoking any metamethods
        /// </summary>
        /// <param name="t">A table (table)</param>
        /// <param name="key">A key in the table (cannot be nil) (value)</param>
        /// <param name="value">New value to set for the key (value)</param>
        /// <example>rawset(t,key,value)</example>
        internal static string[] rawset(string t, string key, string value)
        {
            return Run("rawse{0}({0},{1},{2})", t, key, value);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ReadFile()</example>
        internal static string[] ReadFile()
        {
            return Run("ReadFile()");
        }

        /// <summary>
        /// Registers a configuration variable to be saved
        /// </summary>
        /// <param name="cvar">Name of a CVar (string)</param>
        /// <param name="default">Default value of the CVar (string)</param>
        /// <example>RegisterCVar("cvar","default")</example>
        internal static string[] RegisterCVar(string cvar, string Default)
        {
            return Run("RegisterCVar(\"{0}\",\"{1}\")", cvar, Default);
        }

        /// <summary>
        /// Enables a global variable for automatic saving upon logout & UI reload. Used for some data saved on the local client by the default UI.Addons should use the ## SavedVariables TOC directive instead.
        /// </summary>
        /// <example>RegisterForSave()</example>
        internal static string[] RegisterForSave()
        {
            return Run("RegisterForSave()");
        }

        /// <summary>
        /// Enables a global variable for automatic saving (on a per-character basis) upon logout & UI reload. Used for some data saved on the local client by the default UI.Addons should use the ## SavedVariablesPerCharacter TOC directive instead.
        /// </summary>
        /// <example>RegisterForSavePerCharacter()</example>
        internal static string[] RegisterForSavePerCharacter()
        {
            return Run("RegisterForSavePerCharacter()");
        }

        /// <summary>
        /// Reloads the user interface. Saved variables are written to disk, the default UI is reloaded, and all enabled non-LoadOnDemand addons are loaded, including any addons previously disabled which were enabled during the session (see EnableAddOn() et al).
        /// </summary>
        /// <example>ReloadUI()</example>
        internal static string[] ReloadUI()
        {
            return Run("ReloadUI()");
        }

        /// <summary>
        /// Removes a channel from a chat window's list of saved channel subscriptions. Used by the default UI's function ChatFrame_RemoveChannel() which manages the set of channel messages shown in a displayed ChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="channel">Name of the channel to remove (string)</param>
        /// <example>RemoveChatWindowChannel(index,"channel")</example>
        internal static string[] RemoveChatWindowChannel(int index, string channel)
        {
            return Run("RemoveChatWindowChannel({0},\"{1}\")", index, channel);
        }

        /// <summary>
        /// Removes a message type from a chat window's list of saved message subscriptions. Used by the default UI's functions ChatFrame_RemoveMessageGroup() and ChatFrame_RemoveAllMessageGroups() which manage the set of message types shown in a displayed ChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="messageGroup">Token identifying a message type (string, chatMsgType)</param>
        /// <example>RemoveChatWindowMessages(index,"messageGroup")</example>
        internal static string[] RemoveChatWindowMessages(int index, string messageGroup)
        {
            return Run("RemoveChatWindowMessages({0},\"{1}\")", index, messageGroup);
        }

        /// <summary>
        /// Removes a character from the friends list
        /// </summary>
        /// <param name="name">Name of a character to remove from the friends list (string)</param>
        /// <example>RemoveFriend("name")</example>
        internal static string[] RemoveFriend(string name)
        {
            return Run("RemoveFriend(\"{0}\")", name);
        }

        /// <summary>
        /// Removes the glyph from a socket
        /// </summary>
        /// <param name="socket">Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex)</param>
        /// <example>RemoveGlyphFromSocket(socket)</example>
        internal static string[] RemoveGlyphFromSocket(string socket)
        {
            return Run("RemoveGlyphFromSocket({0})", socket);
        }

        /// <summary>
        /// Removes a quest from the objectives tracker
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>RemoveQuestWatch(questIndex)</example>
        internal static string[] RemoveQuestWatch(int questIndex)
        {
            return Run("RemoveQuestWatch({0})", questIndex);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>RemoveSkillUp()</example>
        internal static string[] RemoveSkillUp()
        {
            return Run("RemoveSkillUp()");
        }

        /// <summary>
        /// Removes an achievement from the objectives tracker UI
        /// </summary>
        /// <param name="id">The numeric ID of an achievement (number)</param>
        /// <example>RemoveTrackedAchievement(id)</example>
        internal static string[] RemoveTrackedAchievement(int id)
        {
            return Run("RemoveTrackedAchievement({0})", id);
        }

        /// <summary>
        /// Changes the name of a saved equipment set. Not used in the default UI; may be deprecated in future patches.
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <param name="newName">New name for the set (string)</param>
        /// <example>RenameEquipmentSet("name","newName")</example>
        internal static string[] RenameEquipmentSet(string name, string newName)
        {
            return Run("Re{0}EquipmentSet(\"{0}\",\"{1}\")", name, newName);
        }

        /// <summary>
        /// Renames the guild or arena team to be created by the open petition
        /// </summary>
        /// <param name="name">New name for the guild or arena team (string)</param>
        /// <example>RenamePetition("name")</example>
        internal static string[] RenamePetition(string name)
        {
            return Run("Re{0}Petition(\"{0}\")", name);
        }

        /// <summary>
        /// Attempts to repair all of the player's damaged items
        /// </summary>
        /// <param name="useGuildMoney">1 to use guild bank money (if available); nil or omitted to use the player's own money (1nil)</param>
        /// <example>RepairAllItems([useGuildMoney])</example>
        internal static string[] RepairAllItems(bool useGuildMoney = false)
        {
            return Run("RepairAllItems({0})", useGuildMoney ? "1" : "");
        }

        /// <summary>
        /// Confirms replacing an existing enchantment. Usable in response to the REPLACE_ENCHANT event which fires when the player attempts to apply a temporary or permanent enchantment to an item which already has one.
        /// </summary>
        /// <example>ReplaceEnchant()</example>
        internal static string[] ReplaceEnchant()
        {
            return Run("ReplaceEnchant()");
        }

        /// <summary>
        /// Confirms replacement of an existing enchantment when offering an enchantment for trade. After confirming, the enchantment is not actually performed until both parties accept the trade.
        /// </summary>
        /// <example>ReplaceTradeEnchant()</example>
        internal static string[] ReplaceTradeEnchant()
        {
            return Run("ReplaceTradeEnchant()");
        }

        /// <summary>
        /// Releases the player's spirit to the nearest graveyard. Only has effect if the player is dead.
        /// </summary>
        /// <example>RepopMe()</example>
        internal static string[] RepopMe()
        {
            return Run("RepopMe()");
        }

        /// <summary>
        /// . This function was once used to implement the /bug command, which was a feature of early World of Warcraft beta tests and is no longer available.
        /// </summary>
        /// <example>ReportBug()</example>
        internal static string[] ReportBug()
        {
            return Run("ReportBug()");
        }

        /// <summary>
        /// Reports a battleground participant as AFK
        /// </summary>
        /// <param name="name">Name of a friendly player unit in the current battleground (string)</param>
        /// <param name="unit">A friendly player unit in the current battleground (string, unitID)</param>
        /// <example>ReportPlayerIsPVPAFK("name")orReportPlayerIsPVPAFK("unit")</example>
        internal static string[] ReportPlayerIsPVPAFK(string name, string unit)
        {
            return Run("ReportPlayerIsPVPAFK(\"{0}\")orReportPlayerIsPVPAFK(\"{1}\")", name, unit);
        }

        /// <summary>
        /// . This function was once used to implement the /suggest command, which was a feature of early World of Warcraft beta tests and is no longer available.
        /// </summary>
        /// <example>ReportSuggestion()</example>
        internal static string[] ReportSuggestion()
        {
            return Run("ReportSuggestion()");
        }

        /// <summary>
        /// Requests information from the server about team member positions in the current battleground. Automatically called in the default UI by UIParent's and WorldMapFrame's OnUpdate handlers.
        /// </summary>
        /// <example>RequestBattlefieldPositions()</example>
        internal static string[] RequestBattlefieldPositions()
        {
            return Run("RequestBattlefieldPositions()");
        }

        /// <summary>
        /// Requests battlefield score data from the server. Score data is not returned immediately; the UPDATE_BATTLEFIELD_SCORE event fires once information is available and can be retrieved by calling GetBattlefieldScore() and related functions.
        /// </summary>
        /// <example>RequestBattlefieldScoreData()</example>
        internal static string[] RequestBattlefieldScoreData()
        {
            return Run("RequestBattlefieldScoreData()");
        }

        /// <summary>
        /// Requests information about available instances of a battleground from the server. The PVPQUEUE_ANYWHERE_SHOW event fires once information is available; data can then be retrieved by calling GetNumBattlefields() and GetBattlefieldInstanceInfo().
        /// </summary>
        /// <param name="index">Index of a battleground (between 1 and NUM_BATTLEGROUNDS) (number)</param>
        /// <example>RequestBattlegroundInstanceInfo(index)</example>
        internal static string[] RequestBattlegroundInstanceInfo(int index)
        {
            return Run("RequestBattlegroundInstanceInfo({0})", index);
        }

        /// <summary>
        /// Requests PvP honor and arena data from the server for the currently inspected unit. Once the INSPECT_HONOR_UPDATE event fires, PvP honor and arena information can be retrieved using GetInspectHonorData(team) and GetInspectArenaTeamData().
        /// </summary>
        /// <example>RequestInspectHonorData()</example>
        internal static string[] RequestInspectHonorData()
        {
            return Run("RequestInspectHonorData()");
        }

        /// <summary>
        /// Requests information about saved instances from the server. Data is not returned immediately; the UPDATE_INSTANCE_INFO event when the raid information is available for retrieval via GetSavedInstanceInfo() and related functions.
        /// </summary>
        /// <example>RequestRaidInfo()</example>
        internal static string[] RequestRaidInfo()
        {
            return Run("RequestRaidInfo()");
        }

        /// <summary>
        /// Requests information from the server about the player character's total time spent online. Information is not returned immediately; the TIME_PLAYED_MSG event fires when the requested data is available.
        /// </summary>
        /// <example>RequestTimePlayed()</example>
        internal static string[] RequestTimePlayed()
        {
            return Run("RequestTimePlayed()");
        }

        /// <summary>
        /// Removes all saved color settings for chat message types, resetting them to default values
        /// </summary>
        /// <example>ResetChatColors()</example>
        internal static string[] ResetChatColors()
        {
            return Run("ResetChatColors()");
        }

        /// <summary>
        /// Removes all saved chat window settings, resetting them to default values. Used by the default UI's function FCF_ ResetChatWindows() which resets the appearance and behavior of displayed FloatingChatFrames.
        /// </summary>
        /// <example>ResetChatWindows()</example>
        internal static string[] ResetChatWindows()
        {
            return Run("ResetChatWindows()");
        }

        /// <summary>
        /// Resets CPU usage statistics. Only has effect if the scriptProfile CVar is set to 1.
        /// </summary>
        /// <example>ResetCPUUsage()</example>
        internal static string[] ResetCPUUsage()
        {
            return Run("ResetCPUUsage()");
        }

        /// <summary>
        /// Returns the cursor to its normal appearance (the glove pointer) and behavior. Has effect after the cursor image/mode has been changed via SetCursor(), ShowContainerSellCursor(), or similar. Has no immediately visible effect if the cursor is holding an item, spell, or other data.
        /// </summary>
        /// <example>ResetCursor()</example>
        internal static string[] ResetCursor()
        {
            return Run("ResetCursor()");
        }

        /// <summary>
        /// Reverts changes to the enabled/disabled state of addons. Any addons enabled or disabled in the current session will return to their enabled/disabled state as of the last login or UI reload.
        /// </summary>
        /// <example>ResetDisabledAddOns()</example>
        internal static string[] ResetDisabledAddOns()
        {
            return Run("ResetDisabledAddOns()");
        }

        /// <summary>
        /// Reverts all changes made in the Talent UI's preview mode
        /// </summary>
        /// <param name="isPet">true to edit talents for the player's pet, false to edit talents for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>ResetGroupPreviewTalentPoints(isPet,talentGroup)</example>
        internal static string[] ResetGroupPreviewTalentPoints(string isPet, int talentGroup)
        {
            return Run("ResetGroupPreviewTalentPoints({0},{1})", isPet, talentGroup);
        }

        /// <summary>
        /// Resets all non-saved instances associated with the player. Only instances to which the player is not saved may be reset (i.e. normal 5-man dungeons, not heroic dungeons or raids), and only by a solo player or group leader.
        /// </summary>
        /// <example>ResetInstances()</example>
        internal static string[] ResetInstances()
        {
            return Run("ResetInstances()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ResetPerformanceValues()</example>
        internal static string[] ResetPerformanceValues()
        {
            return Run("ResetPerformanceValues()");
        }

        /// <summary>
        /// Reverts changes made within a specific tab in the Talent UI's preview mode
        /// </summary>
        /// <param name="tabIndex">Index of a talent school/tab (between 1 and GetNumTalentTabs()) (number)</param>
        /// <param name="isPet">true to edit talents for the player's pet, false to edit talents for the player (boolean)</param>
        /// <param name="talentGroup">Which set of talents to edit, if the player has Dual Talent Specialization enabled (number) 1 - Primary Talents2 - Secondary Talentsnil - Currently active talents</param>
        /// <example>ResetPreviewTalentPoints(tabIndex,isPet,talentGroup)</example>
        internal static string[] ResetPreviewTalentPoints(int tabIndex, string isPet, int talentGroup)
        {
            return Run("ResetPreviewTalentPoints({0},{1},{2})", tabIndex, isPet, talentGroup);
        }

        /// <summary>
        /// Enables contextual tutorial display and clears the list of already displayed tutorials. Tutorials that have already been shown to the player will appear again (via TUTORIAL_TRIGGER events) once their conditions are met. The first tutorial will appear again immediately.
        /// </summary>
        /// <example>ResetTutorials()</example>
        internal static string[] ResetTutorials()
        {
            return Run("ResetTutorials()");
        }

        /// <summary>
        /// Resets a saved camera setting to default values. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().
        /// </summary>
        /// <param name="index">Index of a saved camera setting (between 1 and 5) (number)</param>
        /// <example>ResetView(index)</example>
        internal static string[] ResetView(int index)
        {
            return Run("ResetView({0})", index);
        }

        /// <summary>
        /// Allows leaving a recently entered instance to which the player would otherwise be saved.  Applies when the player enters an instance to which other members of her group are saved; if the player leaves the within the time limit (see GetInstanceLockTimeRemaining()) she will not be saved to the instance. 
        /// </summary>
        /// <param name="response">Whether the player wishes to remain in the instance (boolean) false - Exit to the nearest graveyardtrue - Remain in the zone, saving the player to this instance</param>
        /// <example>RespondInstanceLock(response)</example>
        internal static string[] RespondInstanceLock(string response)
        {
            return Run("RespondInstanceLock({0})", response);
        }

        /// <summary>
        /// Restart the client's graphic subsystem. Does not reload the UI.
        /// </summary>
        /// <example>RestartGx()</example>
        internal static string[] RestartGx()
        {
            return Run("RestartGx()");
        }

        /// <summary>
        /// Resets video effects options to default values. These options are shown in the Video -> Effects panel in the default UI and include settings such as for view distance, texture resolution, and full-screen glow.
        /// </summary>
        /// <example>RestoreVideoEffectsDefaults()</example>
        internal static string[] RestoreVideoEffectsDefaults()
        {
            return Run("RestoreVideoEffectsDefaults()");
        }

        /// <summary>
        /// Resets video resolution options to default values. These options are shown in the Video -> Resolution panel in the default UI and include settings such as screen resolution, windowed mode, and gamma.
        /// </summary>
        /// <example>RestoreVideoResolutionDefaults()</example>
        internal static string[] RestoreVideoResolutionDefaults()
        {
            return Run("RestoreVideoResolutionDefaults()");
        }

        /// <summary>
        /// Resets stereoscopic 3D video options to default values. These options are shown in the Video -> Stereo panel in the default UI and include settings for convergence and eye separation.
        /// </summary>
        /// <example>RestoreVideoStereoDefaults()</example>
        internal static string[] RestoreVideoStereoDefaults()
        {
            return Run("RestoreVideoStereoDefaults()");
        }

        /// <summary>
        /// Returns the name of a unit offering to resurrect the player. Returns nil if no resurrection has been offered or if an offer has expired.
        /// </summary>
        /// <example>name=ResurrectGetOfferer()</example>
        internal static string[] ResurrectGetOfferer()
        {
            return Run("ResurrectGetOfferer()"); //name
        }

        /// <summary>
        /// Returns whether accepting an offered resurrection spell will cause the player to suffer Resurrection Sickness. Usable following the RESURRECT_REQUEST event which fires when the player is offered resurrection by another unit.Generally always returns nil, as resurrection by other players does not cause sickness.
        /// </summary>
        /// <example>hasSickness=ResurrectHasSickness()</example>
        internal static string[] ResurrectHasSickness()
        {
            return Run("ResurrectHasSickness()"); //hasSickness
        }

        /// <summary>
        /// Returns whether the player must wait before resurrecting. Applies to resurrection spells offered by other units, resurrecting by returning to the player's corpse as a ghost, and to resurrecting at a graveyard's spirit healer, if the player has recently died several times in short succession. See GetCorpseRecoveryDelay() for the time remaining until the player can resurrect.
        /// </summary>
        /// <example>hasTimer=ResurrectHasTimer()</example>
        internal static string[] ResurrectHasTimer()
        {
            return Run("ResurrectHasTimer()"); //hasTimer
        }

        /// <summary>
        /// Confirms resurrection by returning to the player's corpse
        /// </summary>
        /// <example>RetrieveCorpse()</example>
        internal static string[] RetrieveCorpse()
        {
            return Run("RetrieveCorpse()");
        }

        /// <summary>
        /// Returns a message in the player's inbox to its sender
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>ReturnInboxItem(mailID)</example>
        internal static string[] ReturnInboxItem(int mailID)
        {
            return Run("ReturnInboxItem({0})", mailID);
        }

        /// <summary>
        /// Register the player's intent regarding an item up for loot rolling. Rolls are not actually performed until all eligible group members have registered their intent or the time period for rolling expires.If the item binds on pickup, the CONFIRM_LOOT_ROLL event fires, indicating that ConfirmLootRoll(id) must be called in order to actually roll on the item.
        /// </summary>
        /// <param name="id">Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number)</param>
        /// <param name="rollType">Type of roll action to perform (number) 0 - Pass (declines the loot)1 - Roll "need" (wins if highest roll)2 - Roll "greed" (wins if highest roll and no other member rolls "need")</param>
        /// <example>RollOnLoot(id,rollType)</example>
        internal static string[] RollOnLoot(int id, int rollType)
        {
            return Run("RollOnLoot({0},{1})", id, rollType);
        }

        /// <summary>
        /// Runs the script associated with a key binding action. Note: this function is not protected, but the scripts for many default key binding actions are (and can only be called by the Blizzard UI).
        /// </summary>
        /// <param name="COMMAND">Name of a key binding command (string)</param>
        /// <example>RunBinding("COMMAND")</example>
        internal static string[] RunBinding(string COMMAND)
        {
            return Run("RunBinding(\"{0}\")", COMMAND);
        }

        /// <summary>
        /// Runs a macro
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <param name="button">The mouse button used to click the macro; may be used by [button:x] options in the macro (string)</param>
        /// <example>RunMacro(index[,"button"])orRunMacro("name"[,"button"])</example>
        internal static string[] RunMacro(string index, string name, string button)
        {
            return Run("RunMacro({0}[,\"{2}\"])orRunMacro(\"{1}\"[,\"{2}\"])", index, name, button);
        }

        /// <summary>
        /// Runs arbitrary text as a macro
        /// </summary>
        /// <param name="text">The text of the macro to run (string)</param>
        /// <param name="button">The mouse button used to click the macro; may be used by [button:x] options in the macro (string)</param>
        /// <example>RunMacroText("text"[,"button"])</example>
        internal static string[] RunMacroText(string text, string button)
        {
            return Run("RunMacroText(\"{0}\"[,\"{1}\"])", text, button);
        }

        /// <summary>
        /// Runs a string as a Lua script
        /// </summary>
        /// <param name="script">A Lua script to be run (string)</param>
        /// <example>RunScript("script")</example>
        internal static string[] RunScript(string script)
        {
            return Run("RunScript(\"{0}\")", script);
        }

        /// <summary>
        /// Saves the current set of key bindings
        /// </summary>
        /// <param name="set">A set to which to save the current bindings (number) 1 - Account-wide key bindings2 - Character-specific key bindings</param>
        /// <example>SaveBindings(set)</example>
        internal static string[] SaveBindings(int set)
        {
            return Run("SaveBindings({0})", set);
        }

        /// <summary>
        /// Saves or creates an equipment set with the player's currently equipped items. If a set with the same name already exists, that set's contents are overwritten. Set names are case sensitive: if a "Fishing" set already exists, saving a "fishing" set will create a new set instead of overwriting the "Fishing" set.
        /// </summary>
        /// <param name="name">Name of the set (string)</param>
        /// <param name="icon">Index of an icon to associate with the set: between 1 and GetNumMacroIcons() for an icon from the set of macro icons; values between -INVSLOT_FIRST_EQUIPPED and -INVSLOT_LAST_EQUIPPED for the icon of an item in the equipment set at that (negative) inventoryID (number)</param>
        /// <example>SaveEquipmentSet("name",icon)</example>
        internal static string[] SaveEquipmentSet(string name, int icon)
        {
            return Run("SaveEquipmentSet(\"{0}\",{1})", name, icon);
        }

        /// <summary>
        /// Saves the current camera settings. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().
        /// </summary>
        /// <param name="index">Index of a saved camera setting (between 1 and 5) (number)</param>
        /// <example>SaveView(index)</example>
        internal static string[] SaveView(int index)
        {
            return Run("SaveView({0})", index);
        }

        /// <summary>
        /// Saves an image of the current game display. Screenshot images are saved to the folder Screenshots within the folder where the World of Warcraft client is installed.Taking a screenshot fires the SCREENSHOT_SUCCEEDED event (or the SCREENSHOT_FAILED event in case of an error), which causes the default UI to display a message in the middle of the screen. Additional screenshots taken while this message is displayed will include it -- the default UI's TakeScreenshot() function hides this message so it is not included in screenshots.
        /// </summary>
        /// <example>Screenshot()</example>
        internal static string[] Screenshot()
        {
            return Run("Screenshot()");
        }

        /// <summary>
        /// Replaces non-simple values in a list with nil. All simple values (strings, numbers, and booleans) are passed from the input list to the output list unchanged. Non-simple values (tables, functions, threads, and userdata) are replaced by nil in the output list.
        /// </summary>
        /// <param name="...">A list of values (list)</param>
        /// <example>...=scrub(...)</example>
        internal static string[] scrub(string ellips)
        {
            return Run("scrub({0})", ellips); //{0}
        }

        /// <summary>
        /// Returns a description of an amount of time in appropriate units. Output includes markup normally hidden when displayed in a FontString (see last example); this markup allows the client to automatically print the singular or plural form of a word depending on the value of the preceding number.
        /// </summary>
        /// <param name="seconds">An amount of time (in seconds) (number)</param>
        /// <param name="noSeconds">True to omit a seconds term in the description; false or omitted otherwise (boolean)</param>
        /// <param name="notAbbreviated">True to use full unit names in the description (e.g. Hours, Minutes); false or omitted to use abbreviations (e.g. Hr, Min) (boolean)</param>
        /// <param name="maxCount">Maximum number of terms to include in the description; defaults to 2 if omitted (number)</param>
        /// <example>time=SecondsToTime(seconds[,noSeconds[,notAbbreviated[,maxCount]]])</example>
        internal static string[] SecondsToTime(int seconds, string noSeconds, string notAbbreviated, int maxCount)
        {
            return Run("SecondsToTime({0}[,{1}[,{2}[,{3}]]])", seconds, noSeconds, notAbbreviated, maxCount); //time
        }

        /// <summary>
        /// Calls a function without tainting the execution path. Meaningless when called from outside of the secure environment.Used in Blizzard code to call functions which may be tainted or operate on potentially tainted variables. For example, consider the function CloseSpecialWindows, which iterates through the table UISpecialFrames and hides any frames named therein. Addon authors may put the names of their frames in that table to make them automatically close when the user presses the ESC key, but this taints UISpecialFrames. Were the default UI to then call CloseSpecialWindows normally, every frame in UISpecialFrames would become tainted, which could later lead to errors when handlers on those frames call protected functions.Instead, the default UI uses securecall(CloseSpecialWindows): within CloseSpecialWindows the execution path may become tainted, but afterward the environment remains secure.
        /// </summary>
        /// <param name="function">Function to be called (function)</param>
        /// <param name="...">Arguments to the function (list)</param>
        /// <example>...=securecall(function,...)</example>
        internal static string[] securecall(string function, string ellips)
        {
            return Run("securecall({0},{1})", function, ellips); //{1}
        }

        /// <summary>
        /// Returns the action (and target, if applicable) for a secure macro command. Used in the default UI to parse macro conditionals.
        /// </summary>
        /// <param name="cmd">A command to be parsed (typically the body of a macro, macrotext attribute or slash command (string)</param>
        /// <example>action,target=SecureCmdOptionParse("cmd")</example>
        internal static string[] SecureCmdOptionParse(string cmd)
        {
            return Run("SecureCmdOptionParse(\"{0}\")", cmd); //action,target
        }

        /// <summary>
        /// Returns one or more values from a list (...), or the number of values in a list
        /// </summary>
        /// <param name="index">Index of a value in the list (number)</param>
        /// <param name="#">The string "#" (string)</param>
        /// <param name="...">A list of values (list)</param>
        /// <example>...=select(index,...)orselect("#",...)</example>
        internal static string[] select(int index, string ellips, string hash = "#")
        {
            return Run("select({0},{2})orselect(\"{1}\",{2})", index, hash, ellips); //{2}
        }

        /// <summary>
        /// Selects a quest which can be turned in to the current Quest NPC. Usable after a QUEST_GREETING event. Causes the QUEST_PROGRESS event to fire, in which it is determined whether the player can complete the quest.Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest which can be turned in to the current Quest NPC (between 1 and GetNumActiveQuests()) (number)</param>
        /// <example>SelectActiveQuest(index)</example>
        internal static string[] SelectActiveQuest(int index)
        {
            return Run("SelectActiveQuest({0})", index);
        }

        /// <summary>
        /// Chooses a quest available from the current Quest NPC. Causes the QUEST_DETAIL event to fire, in which the questgiver presents the player with the details of a quest and the option to accept or decline.Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.
        /// </summary>
        /// <param name="index">Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number)</param>
        /// <example>SelectAvailableQuest(index)</example>
        internal static string[] SelectAvailableQuest(int index)
        {
            return Run("SelectAvailableQuest({0})", index);
        }

        /// <summary>
        /// Chooses a quest which can be turned in to the current Gossip NPC. Causes the QUEST_PROGRESS event to fire, in which it is determined whether the player can complete the quest.
        /// </summary>
        /// <param name="index">Index of a quest which can be turned in to the current Gossip NPC (between 1 and GetNumGossipActiveQuests()) (number)</param>
        /// <example>SelectGossipActiveQuest(index)</example>
        internal static string[] SelectGossipActiveQuest(int index)
        {
            return Run("SelectGossipActiveQuest({0})", index);
        }

        /// <summary>
        /// Chooses a quest available from the current Gossip NPC. Usable after a QUEST_GREETING event. Causes the QUEST_DETAIL event to fire, in which the questgiver presents the player with the details of a quest and the option to accept or decline.
        /// </summary>
        /// <param name="index">Index of a quest available from the current Gossip NPC (between 1 and GetNumGossipAvailableQuests()) (number)</param>
        /// <example>SelectGossipAvailableQuest(index)</example>
        internal static string[] SelectGossipAvailableQuest(int index)
        {
            return Run("SelectGossipAvailableQuest({0})", index);
        }

        /// <summary>
        /// Chooses and activates an NPC dialog option. Results may vary according to the gossip option chosen; may end the gossip (firing a GOSSIP_CLOSED event) and start another interaction (firing a MERCHANT_SHOW, TRAINER_SHOW, TAXIMAP_OPENED, or similar event) or may continue the gossip with new text and new options (firing another GOSSIP_SHOW event).Calling this function with only the first argument may cause the GOSSIP_CONFIRM event to fire, indicating that the player needs to provide confirmation (or additional information) before the option will be activated. Confirmation is needed for certain options requiring the character to spend (e.g. when activating Dual Talent Specialization); additional information is needed for options such as those used when redeeming a Loot Card code from the Wow trading card game to receive an in-game item. In either case, the confirmation and additional information can be provided (as by the popup dialog in the default UI) by calling this function again with all three arguments.
        /// </summary>
        /// <param name="index">The option in the NPC gossip window to select, from 1 to GetNumGossipOptions() (number)</param>
        /// <param name=text>Text to include when confirming the selection (string)</param>
        /// <param name="confirm">true to confirm the selection; false or omitted otherwise (boolean)</param>
        /// <example>SelectGossipOption(index[,text[,confirm]])</example>
        internal static string[] SelectGossipOption(int index, string text, string confirm)
        {
            return Run("SelectGossipOption({0}[,\"{1}\"[,{2}]])", index, text, confirm);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>SelectPackage()</example>
        internal static string[] SelectPackage()
        {
            return Run("SelectPackage()");
        }

        /// <summary>
        /// Selects a quest from the quest log. The selected quest is used by other functions which do not take a quest index as argument (e.g. GetQuestLogQuestText()).
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>SelectQuestLogEntry(questIndex)</example>
        internal static string[] SelectQuestLogEntry(int questIndex)
        {
            return Run("SelectQuestLogEntry({0})", questIndex);
        }

        /// <summary>
        /// Selects a given stationery for usage when sending mail. Has no effect; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.
        /// </summary>
        /// <param name="index">Index of a stationery type (between 1 and GetNumStationeries()) (number)</param>
        /// <example>SelectStationery(index)</example>
        internal static string[] SelectStationery(int index)
        {
            return Run("SelectStationery({0})", index);
        }

        /// <summary>
        /// Selects a recipe in the trade skill listing. Selection in the recipe list is used only for display in the default UI and has no effect on other Trade Skill APIs.
        /// </summary>
        /// <param name="index">Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number)</param>
        /// <example>SelectTradeSkill(index)</example>
        internal static string[] SelectTradeSkill(int index)
        {
            return Run("SelectTradeSkill({0})", index);
        }

        /// <summary>
        /// Selects an entry in the trainer service listing. Selection in the service list is used only for display in the default UI and has no effect on other Trainer APIs.
        /// </summary>
        /// <param name="index">Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number)</param>
        /// <example>SelectTrainerService(index)</example>
        internal static string[] SelectTrainerService(int index)
        {
            return Run("SelectTrainerService({0})", index);
        }

        /// <summary>
        /// Sends a chat-like message receivable by other addons. Allows for client-to-client addon communication.Unlike with SendChatMessage, messages sent via SendAddonMessage:do not appear in receiving players' chat windows (unless an addon explicitly prints them)are not subject to strict server-side spam filtering/throttling (sending too many messages at once can still disconnect the user)are not modified if the sending character is drunkMessages are received via the CHAT_MSG_ADDON event.
        /// </summary>
        /// <param name="prefix">An arbitrary label for the message. Allows receiving addons to filter incoming messages: for example, if an addon uses the same prefix for all messages it sends, an addon interested in only those messages can check for that prefix before handling the message content. Cannot contain the tab character (\t). (string)</param>
        /// <param name="message">A message to send; combined length of prefix and message is limited to 254 characters (string)</param>
        /// <param name="type">Scope in which to broadcast the message: (string) BATTLEGROUND - To all allied players in the current battleground instanceGUILD - To all members of the player's guildPARTY - To all members of the player's party (used by default if no type is given)RAID - To all members of the player's raid group (automatically reverts to sending to party if the player is not in a raid group)WHISPER - To a specific player</param>
        /// <param name="target">If type is "WHISPER", the name of the target player (in cross-realm battlegrounds, the format "Name-Realm" can be used to target a player from another realm; e.g. "Thott-Cenarius") (string)</param>
        /// <example>SendAddonMessage("prefix","message"[,"type"[,"target"]])</example>
        internal static string[] SendAddonMessage(string prefix, string message, string type, string target)
        {
            return Run("SendAddonMessage(\"{0}\",\"{1}\"[,\"{2}\"[,\"{3}\"]])", prefix, message, type, target);
        }

        /// <summary>
        /// Sends a chat message
        /// </summary>
        /// <param name=text>Message to be sent (up to 255 characters) (string)</param>
        /// <param name="chatType">Channel on which to send the message (defaults to SAY if omitted) (string) BATTLEGROUND - Messages to a battleground raid group (sent with /bg in the default UI)CHANNEL - Message to a server or custom chat channel (sent with /1, /2, etc in the default UI); requires channel number for channel argumentDND - Enables Away-From-Keyboard status for the player, with text as the custom message seen by others attempting to whisper the playerEMOTE - Custom text emotes visible to nearby players (sent with /e in the default UI)GUILD - Messages to guild members (sent with /g in the default UI)OFFICER - Messages to guild officers (sent with /o in the default UI)PARTY - Messages to party members (sent with /p in the default UI)RAID - Messages to raid members (sent with /ra in the default UI)RAID_WARNING - Warning to raid members (sent with /rw in the default UI)SAY - Speech to nearby players (sent with /s in the default UI)WHISPER - Message to a specific character (sent with /e in the default UI); requires name of the character for channel argumentYELL - Yell to not-so-nearby players (sent with /y in the default UI)</param>
        /// <param name="language">Language in which to send the message; defaults to Common (for Alliance players) or Orcish (for Horde players) if omitted (string) COMMON - Alliance and Human languageDARNASSIAN - Night Elf LanguageDRAENEI - Draenei LanguageDWARVEN - Dwarf LanguageGNOMISH - Gnome languageGUTTERSPEAK - Undead languageORCISH - Horde and Orc LanguageTAURAHE - Tauren LanguageTHALASSIAN - Night Elf LanguageTROLL - Troll language</param>
        /// <param name="channel">If chatType is WHISPER, name of the target character; if chatType is CHANNEL, number identifying the target channel; ignored otherwise (string)</param>
        /// <example>SendChatMessage(text[,"chatType"[,"language"[,"channel"]]])</example>
        internal static string[] SendChatMessage(string text, string chatType, string language, string channel)
        {
            return Run("SendChatMessage(\"{0}\"[,\"{1}\"[,\"{2}\"[,\"{3}\"]]])", text, chatType, language, channel);
        }

        /// <summary>
        /// Sends the outgoing message. Any money or COD costs and attachments specified for the message (via SetSendMailMoney(), SetSendMailCOD(), and ClickSendMailItemButton()) are included with the message (and the values for such are reset for the next outgoing message).
        /// </summary>
        /// <param name="recipient">Name of the character to receive the mail (string)</param>
        /// <param name="subject">Subject text of the mail (string)</param>
        /// <param name="body">Body text of the mail (string)</param>
        /// <example>SendMail("recipient","subject","body")</example>
        internal static string[] SendMail(string recipient, string subject, string body)
        {
            return Run("SendMail(\"{0}\",\"{1}\",\"{2}\")", recipient, subject, body);
        }

        /// <summary>
        /// Requests a list of characters meeting given search criteria from the server. Text in the query will match against any of the six searchable fields unless one of the specifiers below is used; multiple specifiers can be used in one query. Queries are case insensitive.n-"name" - Search for characters whose name contains namec-"class" - Search for characters whose class name contains classg-"guild" - Search for characters in guilds whose name contains guildr-"race" - Search for characters whose race name contains racez-"zone" - Search for characters in zones whose name contains zoneX - Search for characters of level XX- - Search for characters of level X or higher-X - Search for characters of level X or lowerX-Y - Search for characters between levels X and Y (inclusive)Results are not available immediately; the CHAT_MSG_SYSTEM or WHO_LIST_UPDATE event fires when data is available, as determined by the SetWhoToUI() function.
        /// </summary>
        /// <param name="filter">A Who system search query (cannot be nil; use the empty string "" to specify a blank query) (string)</param>
        /// <example>SendWho("filter")</example>
        internal static string[] SendWho(string filter)
        {
            return Run("SendWho(\"{0}\")", filter);
        }

        /// <summary>
        /// Begins the process of abandoning a quest in the player's quest log. To finish abandoning the quest, call AbandonQuest().This function must be called to select a quest in order for GetAbandonQuestItems() or GetAbandonQuestName() to return valid data.
        /// </summary>
        /// <param name="questIndex">Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>SetAbandonQuest(questIndex)</example>
        internal static string[] SetAbandonQuest(int questIndex)
        {
            return Run("SetAbandonQuest({0})", questIndex);
        }

        /// <summary>
        /// Enables comparing achievements/statistics with another player. After a call to this function, the INSPECTACHIEVEMENTREADY event fires to indicate that achievement/statistic comparison functions will return valid data on the given unit.
        /// </summary>
        /// <param name="unit">ID of a unit to compare against (unitID)</param>
        /// <example>success=SetAchievementComparisonUnit(unit)</example>
        internal static string[] SetAchievementComparisonUnit(string unit)
        {
            return Run("SetAchievementComparisonUnit({0})", unit); //success
        }

        /// <summary>
        /// Configures display of additional ActionBars in the default UI
        /// </summary>
        /// <param name="bar1">1 to show the bottom left ActionBar; otherwise nil (1nil)</param>
        /// <param name="bar2">1 to show the bottom right ActionBar; otherwise nil (1nil)</param>
        /// <param name="bar3">1 to show the right-side ActionBar; otherwise nil (1nil)</param>
        /// <param name="bar4">1 to show the second right-side ActionBar; otherwise nil (1nil)</param>
        /// <param name="alwaysShow">1 to always show ActionBar backgrounds even for empty slots; otherwise nil (1nil)</param>
        /// <example>SetActionBarToggles(bar1,bar2,bar3,bar4,alwaysShow)</example>
        internal static string[] SetActionBarToggles(string bar1, string bar2, string bar3, string bar4, string alwaysShow)
        {
            return Run("SetActionBarToggles({0},{1},{2},{3},{4})", bar1, bar2, bar3, bar4, alwaysShow);
        }

        /// <summary>
        /// Switches the player's active talent specialization. Calling this function with the index of an inactive talent group does not immediately perform the switch: it begins casting a spell ("Activate Primary/Secondary Spec"), and only once the spellcast is complete are the player's talents changed.Calling this function with the index of the active talent group, or with any argument if the player has not purchased Dual Talent Specialization does nothing.
        /// </summary>
        /// <param name="talentGroup">Index of the talent specialization to enable (number)</param>
        /// <example>SetActiveTalentGroup(talentGroup)</example>
        internal static string[] SetActiveTalentGroup(int talentGroup)
        {
            return Run("SetActiveTalentGroup({0})", talentGroup);
        }

        /// <summary>
        /// Sets the currently active voice channel
        /// </summary>
        /// <param name="index">Index of a channel in the chat display window (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <example>SetActiveVoiceChannel(index)</example>
        internal static string[] SetActiveVoiceChannel(int index)
        {
            return Run("SetActiveVoiceChannel({0})", index);
        }

        /// <summary>
        /// Sets the currently active voice chat channel
        /// </summary>
        /// <param name="session">Index of a voice session (between 1 and GetNumVoiceSessions()) (number)</param>
        /// <example>SetActiveVoiceChannelBySessionID(session)</example>
        internal static string[] SetActiveVoiceChannelBySessionID(int session)
        {
            return Run("SetActiveVoiceChannelBySessionID({0})", session);
        }

        /// <summary>
        /// Selects a member in an arena team roster. Selection in the arena team roster currently has no effect beyond highlighting list entry in the default UI.
        /// </summary>
        /// <param name="team">Index of one of the player's arena teams (number, arenaTeamID)</param>
        /// <param name="index">Index of a team member to select (between 1 and GetNumArenaTeamMembers(team)) (number)</param>
        /// <example>SetArenaTeamRosterSelection(team,index)</example>
        internal static string[] SetArenaTeamRosterSelection(string team, int index)
        {
            return Run("SetArenaTeamRosterSelection({0},{1})", team, index);
        }

        /// <summary>
        /// Enables or disables the inclusion of offline members in arena team roster listings. The "Show Offline" filter is not used in the default UI; if disabled, offline members are still shown.
        /// </summary>
        /// <param name="enable">True to enable display of offline members; false to disable (boolean)</param>
        /// <example>SetArenaTeamRosterShowOffline(enable)</example>
        internal static string[] SetArenaTeamRosterShowOffline(string enable)
        {
            return Run("SetArenaTeamRosterShowOffline({0})", enable);
        }

        /// <summary>
        /// Sets a Texture object to display the icon of one of the player's bags. Adapts the square item icon texture to fit within the circular "portrait" frames used in many default UI elements.
        /// </summary>
        /// <param name="texture">A Texture object (table)</param>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <example>SetBagPortraitTexture(texture,container)</example>
        internal static string[] SetBagPortraitTexture(string texture, string container)
        {
            return Run("SetBagPortraitTexture({0},{1})", texture, container);
        }

        /// <summary>
        /// Sets the level of texture resolution rendered by the client. Functional but no longer used by the default UI; see the BaseMip CVar instead.
        /// </summary>
        /// <param name="value">The desired level of texture resolution rendered by the client (number) 0 - Low texture resolution1 - High texture resolution</param>
        /// <example>SetBaseMip(value)</example>
        internal static string[] SetBaseMip(int value)
        {
            return Run("SetBaseMip({0})", value);
        }

        /// <summary>
        /// Filters the battleground scoreboard by faction/team
        /// </summary>
        /// <param name="faction">Faction for which to show battleground participant scores (number) 0 - Horde1 - Alliancenil - All</param>
        /// <example>SetBattlefieldScoreFaction(faction)</example>
        internal static string[] SetBattlefieldScoreFaction(int faction)
        {
            return Run("SetBattlefieldScoreFaction({0})", faction);
        }

        /// <summary>
        /// Binds a key combination to a binding command
        /// </summary>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="command">Name of a key binding command, or nil to unbind the key (string)</param>
        /// <example>success=SetBinding("key"[,"command"])</example>
        internal static string[] SetBinding(string key, string command)
        {
            return Run("SetBinding(\"{0}\"[,\"{1}\"])", key, command); //success
        }

        /// <summary>
        /// Binds a key combination to "click" a Button object. When the binding is used, all of the relevant mouse handlers on the button (save for OnEnter and OnLeave) fire just as if the button were activated by the mouse (including OnMouseDown and OnMouseUp as the key is pressed and released).
        /// </summary>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="buttonName">Name of a Button object on which the binding simulates a click (string)</param>
        /// <param name="mouseButton">Name of the mouse button with which the binding simulates a click (string)</param>
        /// <example>success=SetBindingClick("key","buttonName"[,"mouseButton"])</example>
        internal static string[] SetBindingClick(string key, string buttonName, string mouseButton)
        {
            return Run("SetBindingClick(\"{0}\",\"{1}\"[,\"{2}\"])", key, buttonName, mouseButton); //success
        }

        /// <summary>
        /// Binds a key combination to use an item in the player's possession
        /// </summary>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>success=SetBindingItem("key",itemID)orSetBindingItem("key","itemName")orSetBindingItem("key","itemLink")</example>
        internal static string[] SetBindingItem(string key, int itemID, string itemName, string itemLink)
        {
            return Run("SetBindingItem(\"{0}\",{1})orSetBindingItem(\"{0}\",\"{2}\")orSetBindingItem(\"{0}\",\"{3}\")", key, itemID, itemName, itemLink); //success
        }

        /// <summary>
        /// Binds a key combination to run a macro
        /// </summary>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>success=SetBindingMacro("key",index)orSetBindingMacro("key","name")</example>
        internal static string[] SetBindingMacro(string key, string index, string name)
        {
            return Run("SetBindingMacro(\"{0}\",{1})orSetBindingMacro(\"{0}\",\"{2}\")", key, index, name); //success
        }

        /// <summary>
        /// Binds a key combination to cast a spell
        /// </summary>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="spellname">Name of a spell to bind (string)</param>
        /// <example>success=SetBindingSpell("key","spellname")</example>
        internal static string[] SetBindingSpell(string key, string spellname)
        {
            return Run("SetBindingSpell(\"{0}\",\"{1}\")", key, spellname); //success
        }

        /// <summary>
        /// Gives channel ownership to another character. Has no effect unless the player is the owner of the given channel.
        /// </summary>
        /// <param name="channel">Name of the channel (string)</param>
        /// <param name="fullname">Name of the character to make the new owner (string)</param>
        /// <example>SetChannelOwner("channel","fullname")</example>
        internal static string[] SetChannelOwner(string channel, string fullname)
        {
            return Run("SetChannelOwner(\"{0}\",\"{1}\")", channel, fullname);
        }

        /// <summary>
        /// Sets a password on a custom chat channel
        /// </summary>
        /// <param name="channel">Name of the channel (string)</param>
        /// <param name="password">Password to set for the channel (string)</param>
        /// <example>SetChannelPassword("channel","password")</example>
        internal static string[] SetChannelPassword(string channel, string password)
        {
            return Run("SetChannelPassword(\"{0}\",\"{1}\")", channel, password);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>SetChannelWatch()</example>
        internal static string[] SetChannelWatch()
        {
            return Run("SetChannelWatch()");
        }

        /// <summary>
        /// Saves a chat window's background opacity setting. Used by the default UI's function FCF_SetWindowAlpha() which changes the opacity of a displayed FloatingChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="alpha">Alpha value (opacity) of the chat window background (0 = fully transparent, 1 = fully opaque) (number)</param>
        /// <example>SetChatWindowAlpha(index,alpha)</example>
        internal static string[] SetChatWindowAlpha(int index, int alpha)
        {
            return Run("SetChatWindowAlpha({0},{1})", index, alpha);
        }

        /// <summary>
        /// Saves a chat window's background color setting. Used by the default UI's function FCF_SetWindowColor() which changes the colors of a displayed FloatingChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="r">Red component of the background color (0.0 - 1.0) (number)</param>
        /// <param name="g">Green component of the background color (0.0 - 1.0) (number)</param>
        /// <param name="b">Blue component of the background color (0.0 - 1.0) (number)</param>
        /// <example>SetChatWindowColor(index,r,g,b)</example>
        internal static string[] SetChatWindowColor(int index, int r, int g, int b)
        {
            return Run("SetChatWindowColo{1}({0},{1},{2},{3})", index, r, g, b);
        }

        /// <summary>
        /// Saves whether a chat window should be docked with the main chat window. Used by the default UI's functions FCF_DockFrame() and FCF_UnDockFrame() which manage the positioning of FloatingChatFrames.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="docked">True if the window should be docked with the main chat window; otherwise false (boolean)</param>
        /// <example>SetChatWindowDocked(index,docked)</example>
        internal static string[] SetChatWindowDocked(int index, string docked)
        {
            return Run("SetChatWindowDocked({0},{1})", index, docked);
        }

        /// <summary>
        /// Saves whether a chat window is locked. Used by the default UI's functions FCF_OpenNewWindow() and FCF_SetLocked() which manage the behavior of a FloatingChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="locked">True if the frame should be locked; otherwise false (boolean)</param>
        /// <example>SetChatWindowLocked(index,locked)</example>
        internal static string[] SetChatWindowLocked(int index, string locked)
        {
            return Run("SetChatWindowLocked({0},{1})", index, locked);
        }

        /// <summary>
        /// Saves a chat window's display name setting. Used by the default UI's function FCF_SetWindowName() which also handles setting the name displayed for a FloatingChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="name">Name to be displayed for the chat window (string)</param>
        /// <example>SetChatWindowName(index,"name")</example>
        internal static string[] SetChatWindowName(int index, string name)
        {
            return Run("SetChatWindowName({0},\"{1}\")", index, name);
        }

        /// <summary>
        /// Saves whether a chat window should be shown. Used by the default UI's function FCF_OpenNewWindow() which initializes a displayed FloatingChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="shown">True if the window should be shown, false otherwise (boolean)</param>
        /// <example>SetChatWindowShown(index,shown)</example>
        internal static string[] SetChatWindowShown(int index, string shown)
        {
            return Run("SetChatWindowShown({0},{1})", index, shown);
        }

        /// <summary>
        /// Saves a chat window's font size setting. Used by the default UI's function FCF_SetChatWindowFontSize() which also handles changing the font displayed in a FloatingChatFrame. 
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="size">Font size for the chat window (in points) (number)</param>
        /// <example>SetChatWindowSize(index,size)</example>
        internal static string[] SetChatWindowSize(int index, int size)
        {
            return Run("SetChatWindowSize({0},{1})", index, size);
        }

        /// <summary>
        /// Saves whether a chat window is marked as non-interactive. Used by the default UI's function FCF_SetUninteractable() which also handles enabling/disabling mouse events in the FloatingChatFrame.
        /// </summary>
        /// <param name="index">Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number)</param>
        /// <param name="setUninteractable">True flag the window as non-interactive; false otherwise (boolean)</param>
        /// <example>SetChatWindowUninteractable(index,setUninteractable)</example>
        internal static string[] SetChatWindowUninteractable(int index, string setUninteractable)
        {
            return Run("SetChatWindowUninteractable({0},{1})", index, setUninteractable);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>SetConsoleKey()</example>
        internal static string[] SetConsoleKey()
        {
            return Run("SetConsoleKey()");
        }

        /// <summary>
        /// Sets a currency type to be watched on the Backpack UI
        /// </summary>
        /// <param name="index">Index of a currency type or header in the currency list (between 1 and GetCurrencyListSize()) (number)</param>
        /// <param name="watch">1 to add this currency to the backpack UI; 0 to remove it from being watched (number)</param>
        /// <example>SetCurrencyBackpack(index,watch)</example>
        internal static string[] SetCurrencyBackpack(int index, int watch)
        {
            return Run("SetCurrencyBackpack({0},{1})", index, watch);
        }

        /// <summary>
        /// Moves a currency type to or from the Unused currencies list. "Unused" currencies behave no differently; the distinction only exists to allow players to hide currencies they don't care about from the main display.
        /// </summary>
        /// <param name="index">Index of a currency type or header in the currency list (between 1 and GetCurrencyListSize()) (number)</param>
        /// <param name="makeUnused">1 to move this currency to the Unused category; 0 to return it to its original category (number)</param>
        /// <example>SetCurrencyUnused(index,makeUnused)</example>
        internal static string[] SetCurrencyUnused(int index, int makeUnused)
        {
            return Run("SetCurrencyUnused({0},{1})", index, makeUnused);
        }

        /// <summary>
        /// Selects a tab in the guild bank
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <example>SetCurrentGuildBankTab(tab)</example>
        internal static string[] SetCurrentGuildBankTab(int tab)
        {
            return Run("SetCurrentGuildBankTab({0})", tab);
        }

        /// <summary>
        /// Changes a player's displayed title
        /// </summary>
        /// <param name="titleIndex">Index of a title available to the player (between 1 and GetNumTitles()), or -1 to show no title (integer)</param>
        /// <example>SetCurrentTitle(titleIndex)</example>
        internal static string[] SetCurrentTitle(string titleIndex)
        {
            return Run("SetCurrentTitle({0})", titleIndex);
        }

        /// <summary>
        /// Changes the mouse cursor image. Changes only the appearance of the mouse cursor, not its behavior (and has no effect if the cursor is holding an item, spell, or other data). Passing nil will revert the cursor to its default image. Normally used in a frame's OnEnter handler to change the cursor used while the mouse is over the frame. If used elsewhere, the cursor will likely be immediately reverted to default (due to the mouse handlers of other frames doing the same).
        /// </summary>
        /// <param name="cursor">Path to a texture to use as the cursor image (must be 32x32 pixels) or one of the built-in cursor tokens.  Valid cursor tokens can be found in the example code. (string)</param>
        /// <example>SetCursor("cursor")</example>
        internal static string[] SetCursor(string cursor)
        {
            return Run("SetCursor(\"{0}\")", cursor);
        }

        /// <summary>
        /// Sets the value of a configuration variable
        /// </summary>
        /// <param name="cvar">Name of the CVar to set (string)</param>
        /// <param name="value">New value for the CVar (any)</param>
        /// <param name="raiseEvent">If true, causes the CVAR_UPDATE event to fire (string)</param>
        /// <example>SetCVar("cvar",value[,"raiseEvent"])</example>
        internal static string[] SetCVar(string cvar, string value, string raiseEvent)
        {
            return Run("SetCVar(\"{0}\",{1}[,\"{2}\"])", cvar, value, raiseEvent);
        }

        /// <summary>
        /// Sets the player's 5 player dungeon difficulty preference. Setting dungeon difficulty has no effect on the instance created when entering a portal if the player is not the party/raid leader. Changing difficulty while in an instance also has no effect.Epic difficulty is currently unused; setting dungeon difficulty to 3 will cause instance portal graphics to disappear and may result in errors upon entering an instance portal. 
        /// </summary>
        /// <param name="difficulty">A difficulty level (number) 1 - 5 Player (Normal)2 - 5 Player (Heroic)</param>
        /// <example>SetDungeonDifficulty(difficulty)</example>
        internal static string[] SetDungeonDifficulty(int difficulty)
        {
            return Run("SetDungeonDifficulty({0})", difficulty);
        }

        /// <summary>
        /// Sets the world map to display a certain map image (for zones that use multiple map images). Used in zones with more than one "floor" or area such as Dalaran and several Wrath of the Lich King dungeons and raids.
        /// </summary>
        /// <param name="level">Index of the map image to show in the world map (number)</param>
        /// <example>SetDungeonMapLevel(level)</example>
        internal static string[] SetDungeonMapLevel(int level)
        {
            return Run("SetDungeonMapLevel({0})", level);
        }

        /// <summary>
        /// Changes the error handler to a specified function. The error handler is called by Lua's error() function, which in turn is called whenever a Lua error occurs. Wow's default error handler displays the error message, a stack trace and information about the local variables for the function.  This dialog will only be shown if the  "Show Lua errors" option is enabled in Interface Options.
        /// </summary>
        /// <param name="errHandler">A function to use as the error handler (function)</param>
        /// <example>seterrorhandler(errHandler)</example>
        internal static string[] seterrorhandler(string errHandler)
        {
            return Run("seterrorhandler({0})", errHandler);
        }

        /// <summary>
        /// Sets the decimal separator for displayed numbers. Affects the style not only of numbers displayed in the UI, but any string coercion of numbers with tostring() as well.
        /// </summary>
        /// <param name="enable">True to use comma (",") as the decimal separator; false to use period (".") as the decimal separator (boolean)</param>
        /// <example>SetEuropeanNumbers(enable)</example>
        internal static string[] SetEuropeanNumbers(string enable)
        {
            return Run("SetEuropeanNumbers({0})", enable);
        }

        /// <summary>
        /// Removes the "inactive" status from a faction. "Inactive" factions behave no differently; the distinction only exists to allow players to hide factions they don't care about from the main display. Factions thus marked are automatically moved to an "Inactive" group at the end of the faction list.
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>SetFactionActive(index)</example>
        internal static string[] SetFactionActive(int index)
        {
            return Run("SetFactionActive({0})", index);
        }

        /// <summary>
        /// Flags a faction as inactive. "Inactive" factions behave no differently; the distinction only exists to allow players to hide factions they don't care about from the main display. Factions thus marked are automatically moved to an "Inactive" group at the end of the faction list.
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>SetFactionInactive(index)</example>
        internal static string[] SetFactionInactive(int index)
        {
            return Run("SetFactionInactive({0})", index);
        }

        /// <summary>
        /// Changes the maximum distance at which terrain is drawn. Corresponds to the "View Distance" slider in the default UI's Video Options pane, which allows settings between 177 and 1277 yards.Functional but no longer used by the default UI; see the farclip CVar instead.
        /// </summary>
        /// <param name="value">Maximum distance at which terrain is drawn (in yards) (number)</param>
        /// <example>SetFarclip(value)</example>
        internal static string[] SetFarclip(int value)
        {
            return Run("SetFarclip({0})", value);
        }

        /// <summary>
        /// Sets the environment to be used by a function. If the environment has a __environment metatable, this function will error.
        /// </summary>
        /// <param name="f">A function (function)</param>
        /// <param name="stackLevel">Level of a function in the calling stack, or 0 to set the global environment (number)</param>
        /// <param name="t">A table (table)</param>
        /// <example>f=setfenv([f,]t)orsetfenv([stackLevel,]t)</example>
        internal static string[] setfenv(string f, int stackLevel, string t)
        {
            return Run("se{2}{0}env([{0},]{2})orse{2}{0}env([{1},]{2})", f, stackLevel, t); //{0}
        }

        /// <summary>
        /// Sets note text associated with a friends list entry. Setting a note to nil will result in an error; to remove a note, set it to the empty string ("").
        /// </summary>
        /// <param name="index">Index of a friends list entry (between 1 and GetNumFriends()) (number)</param>
        /// <param name="name">Name of friend to modify (string)</param>
        /// <param name="note">The note to set (string)</param>
        /// <example>SetFriendNotes(index,"note")orSetFriendNotes("name","note")</example>
        internal static string[] SetFriendNotes(int index, string name, string note)
        {
            return Run("SetFriendNotes({0},\"{2}\")orSetFriendNotes(\"{1}\",\"{2}\")", index, name, note);
        }

        /// <summary>
        /// Changes the display gamma setting. Gamma value determines the contrast between lighter and darker portions of the game display; for a detailed explanation see the Wikipedia article on Gamma corection.
        /// </summary>
        /// <param name="value">New gamma value (number)</param>
        /// <example>SetGamma(value)</example>
        internal static string[] SetGamma(int value)
        {
            return Run("SetGamma({0})", value);
        }

        /// <summary>
        /// Sets a global variable to a specified value. Allows setting the value of a global variable in contexts where its name might be overridden by that of a local variable; i.e. setglobal(name, value) is equivalent to _G.name = value or _G["name"] = value.
        /// </summary>
        /// <param name="name">Name of a global variable (string)</param>
        /// <param name="value">New value for the variable (value)</param>
        /// <example>setglobal("name",value)</example>
        internal static string[] setglobal(string name, string value)
        {
            return Run("setglobal(\"{0}\",{1})", name, value);
        }

        /// <summary>
        /// Sets the name and icon for a guild bank tab
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name="name">New name for the tab (string)</param>
        /// <param name="iconIndex">Index of an icon for the tab (between 1 and GetNumMacroItemIcons()) (number)</param>
        /// <example>SetGuildBankTabInfo(tab,"name",iconIndex)</example>
        internal static string[] SetGuildBankTabInfo(int tab, string name, int iconIndex)
        {
            return Run("SetGuildBankTabInfo({0},\"{1}\",{2})", tab, name, iconIndex);
        }

        /// <summary>
        /// Changes guild bank tab permissions for the guild rank being edited
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name="permission">Index of a permission to edit (number) 1 - View tab2 - Deposit items</param>
        /// <param name="enabled">True to allow permission for the action to the guild rank; false to deny (boolean)</param>
        /// <example>SetGuildBankTabPermissions(tab,permission,enabled)</example>
        internal static string[] SetGuildBankTabPermissions(int tab, int permission, string enabled)
        {
            return Run("SetGuildBankTabPermissions({0},{1},{2})", tab, permission, enabled);
        }

        /// <summary>
        /// Sets the number of item withdrawals allowed per day for the guild rank being edited
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name="amount">Maximum number of item (stack) withdrawals allowed per day for the guild rank (number)</param>
        /// <example>SetGuildBankTabWithdraw(tab,amount)</example>
        internal static string[] SetGuildBankTabWithdraw(int tab, int amount)
        {
            return Run("SetGuildBankTabWithdraw({0},{1})", tab, amount);
        }

        /// <summary>
        /// Sets the info text for a guild bank tab
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number)</param>
        /// <param name=text>New info text for the tab (string)</param>
        /// <example>SetGuildBankText(tab,text)</example>
        internal static string[] SetGuildBankText(int tab, string text)
        {
            return Run("SetGuildBankText({0},\"{1}\")", tab, text);
        }

        /// <summary>
        /// Sets the maximum amount of money withdrawals per day allowed for the guild rank being edited
        /// </summary>
        /// <param name="amount">Maximum amount of money allowed to be withdrawn per day for the guild rank (in copper) (number)</param>
        /// <example>SetGuildBankWithdrawLimit(amount)</example>
        internal static string[] SetGuildBankWithdrawLimit(int amount)
        {
            return Run("SetGuildBankWithdrawLimit({0})", amount);
        }

        /// <summary>
        /// Sets the guild information text.. This text appears when clicking the "Guild Information" button in the default UI's Guild window.
        /// </summary>
        /// <param name=text>New guild information text (string)</param>
        /// <example>SetGuildInfoText(text)</example>
        internal static string[] SetGuildInfoText(string text)
        {
            return Run("SetGuildInfoText(\"{0}\")", text);
        }

        /// <summary>
        /// Selects a member in the guild roster. Selection in the guild roster is used only for display in the default UI and has no effect on other Guild APIs.
        /// </summary>
        /// <param name="index">Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number)</param>
        /// <example>SetGuildRosterSelection(index)</example>
        internal static string[] SetGuildRosterSelection(int index)
        {
            return Run("SetGuildRosterSelection({0})", index);
        }

        /// <summary>
        /// Enables or disables inclusion of offline members in the guild roster listing
        /// </summary>
        /// <param name="showOffline">True to include offline members in the guild roster listing; false to list only those members currently online (boolean)</param>
        /// <example>SetGuildRosterShowOffline(showOffline)</example>
        internal static string[] SetGuildRosterShowOffline(string showOffline)
        {
            return Run("SetGuildRosterShowOffline({0})", showOffline);
        }

        /// <summary>
        /// Sets a Texture object to display the icon of an equipped item. Adapts the square item icon texture to fit within the circular "portrait" frames used in many default UI elements.
        /// </summary>
        /// <param name="texture">A Texture object (table)</param>
        /// <param name="unit">A unit whose item should be displayed; only valid for player (string, unitID)</param>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>SetInventoryPortraitTexture(texture,"unit",slot)</example>
        internal static string[] SetInventoryPortraitTexture(string texture, string unit, string slot)
        {
            return Run("SetInventoryPortraitTexture({0},\"{1}\",{2})", texture, unit, slot);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>SetLayoutMode()</example>
        internal static string[] SetLayoutMode()
        {
            return Run("SetLayoutMode()");
        }

        /// <summary>
        /// Associates a brief text comment with the player's listing in the LFG system. In the default UI, other players see this comment when mousing over the player's name in the Looking for More listing.
        /// </summary>
        /// <param name="comment">A comment to be associated with the player's listing in the LFG system (max 63 characters); or the empty string ("") to clear an existing comment (string)</param>
        /// <example>SetLFGComment("comment")</example>
        internal static string[] SetLFGComment(string comment)
        {
            return Run("SetLFGComment(\"{0}\")", comment);
        }

        /// <summary>
        /// Sets group roles for which to advertise the player in the LFG system. Passing true for a role the player's class does not support (e.g. healing on a warrior or tanking on a priest) has no effect: see example.
        /// </summary>
        /// <param name="leader">True if the player is willing to lead a group; otherwise false (boolean)</param>
        /// <param name="tank">True if the player is willing to take on the role of protecting allies by drawing enemy attacks; otherwise false (boolean)</param>
        /// <param name="healer">True if the player is willing to take on the role of healing allies who take damage; otherwise false (boolean)</param>
        /// <param name="damage">True if the player is willing to take on the role of damaging enemies; otherwise false (boolean)</param>
        /// <example>SetLFGRoles(leader,tank,healer,damage)</example>
        internal static string[] SetLFGRoles(string leader, string tank, string healer, string damage)
        {
            return Run("SetLFGRoles({0},{1},{2},{3})", leader, tank, healer, damage);
        }

        /// <summary>
        /// Sets the loot method for a party or raid group. Has no effect if the player is not the party or raid leader.See SetLootThreshold for the quality threshold used by Master Looter, Group Loot, and Need Before Greed methods.
        /// </summary>
        /// <param name="method">Method to use for loot distribution (string) freeforall - Free for All - any group member can take any loot at any timegroup - Group Loot - like Round Robin, but items above a quality threshold are rolled onmaster - Master Looter - like Round Robin, but items above a quality threshold are left for a designated loot master toneedbeforegreed - Need before Greed - like Group Loot, but members automatically pass on itemsroundrobin - Round Robin - group members take turns being able to loot</param>
        /// <param name="master">Name or unitID of the master looter (string)</param>
        /// <example>SetLootMethod("method"[,"master"])</example>
        internal static string[] SetLootMethod(string method, string master)
        {
            return Run("SetLootMethod(\"{0}\"[,\"{1}\"])", method, master);
        }

        /// <summary>
        /// Sets a Texture object to show the appropriate portrait image when looting. Normally, the loot portrait image is the same as that of the creature being looted. Not used in the default UI -- a generic image for all loot is used instead.
        /// </summary>
        /// <param name="texture">A Texture object (table)</param>
        /// <example>SetLootPortrait(texture)</example>
        internal static string[] SetLootPortrait(string texture)
        {
            return Run("SetLootPortrait({0})", texture);
        }

        /// <summary>
        /// Sets the threshold used for Master Looter, Group Loot, and Need Before Greed loot methods. Has no effect if the player is not the party or raid leader.Items above the threshold quality will trigger the special behavior of the current loot method: for Group Loot and Need Before Greed, rolling will automatically begin once a group member loots the corpse or object holding the item; for Master Loot, the item will be invisible to all but the loot master tasked with assigning the loot.The loot threshold defaults to 2 (Uncommon) when forming a new party/raid. Setting the threshold to 0 (Poor) or 1 (Common) has no effect -- qualities below Uncommon are always treated as below the threshold. The default UI only allows setting the threshold as high as 4 (Epic), but higher thresholds are allowed.
        /// </summary>
        /// <param name="threshold">Minimum item quality to trigger the loot method (number, itemQuality)</param>
        /// <example>SetLootThreshold(threshold)</example>
        internal static string[] SetLootThreshold(string threshold)
        {
            return Run("SetLootThreshold({0})", threshold);
        }

        /// <summary>
        /// Changes the item used for dynamic feedback for a macro. Normally a macro uses the item or spell specified by its commands to provide dynamic feedback when placed on an action button (through the Action APIs, e.g. IsActionUsable()): e.g. if the macro uses a consumable item, the button will show the number of items remaining; if the macro uses an item with a cooldown, the button will show the state of the cooldown. This function allows overriding the item or spell used by the macro with another item -- the given item's state will be used for such feedback instead of the item or spell used by the macro.
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <param name="item">Name of an item to use for the macro (string)</param>
        /// <param name="target">A unit to use as target of the item (affects the macro's range indicator) (unitid)</param>
        /// <example>SetMacroItem(index,"item"[,target])orSetMacroItem("name","item"[,target])</example>
        internal static string[] SetMacroItem(string index, string name, string item, string target)
        {
            return Run("SetMacroItem({0},\"{2}\"[,{3}])orSetMacroItem(\"{1}\",\"{2}\"[,{3}])", index, name, item, target);
        }

        /// <summary>
        /// Changes the spell used for dynamic feedback for a macro. Normally a macro uses the item or spell specified by its commands to provide dynamic feedback when placed on an action button (through the Action APIs, e.g. IsActionUsable()): e.g. if the macro uses a consumable item, the button will show the number of items remaining; if the macro uses an item with a cooldown, the button will show the state of the cooldown. This function allows overriding the item or spell used by the macro with another item -- the given item's state will be used for such feedback instead of the item or spell used by the macro.
        /// </summary>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <param name="spell">Name of a spell to use for the macro (string)</param>
        /// <param name="target">A unit to use as target of the spell (affects the macro's range indicator) (unitid)</param>
        /// <example>SetMacroSpell(index,"spell"[,target])orSetMacroSpell("name","spell"[,target])</example>
        internal static string[] SetMacroSpell(string index, string name, string spell, string target)
        {
            return Run("SetMacroSpell({0},\"{2}\"[,{3}])orSetMacroSpell(\"{1}\",\"{2}\"[,{3}])", index, name, spell, target);
        }

        /// <summary>
        /// Sets the world map to show the zone in which the player is located
        /// </summary>
        /// <example>SetMapToCurrentZone()</example>
        internal static string[] SetMapToCurrentZone()
        {
            return Run("SetMapToCurrentZone()");
        }

        /// <summary>
        /// Sets the world map to show a specific zone or continent
        /// </summary>
        /// <param name="continentIndex">Index of a continent to display (in the list returned by GetMapContinents(), or one of the following values) (number) -1 - Cosmic map0 - Entire Azeroth map1 - Kalimdor2 - Eastern Kingdoms3 - Outland4 - Northrend</param>
        /// <param name="zoneIndex">Index of a zone within the continent to display (in the list returned by GetMapZones(continentIndex)), or omitted to show the continent map (number)</param>
        /// <example>SetMapZoom(continentIndex[,zoneIndex])</example>
        internal static string[] SetMapZoom(int continentIndex, int zoneIndex)
        {
            return Run("SetMapZoom({0}[,{1}])", continentIndex, zoneIndex);
        }

        /// <summary>
        /// Sets the metatable for a table
        /// </summary>
        /// <param name="t">A table (table)</param>
        /// <param name="metatable">A metatable for the table t, or nil to remove an existing metatable (table)</param>
        /// <example>t=setmetatable(t,metatable)</example>
        internal static string[] setmetatable(string t, string metatable)
        {
            return Run("se{0}me{0}a{0}able({0},me{0}a{0}able)", t, metatable); //{0}
        }

        /// <summary>
        /// Sets a modified click for a given action
        /// </summary>
        /// <param name="action">Token identifying the modified click action (string)</param>
        /// <param name="binding">The set of modifiers (and mouse button, if applicable) to register for the action (string, binding)</param>
        /// <example>SetModifiedClick("action","binding")</example>
        internal static string[] SetModifiedClick(string action, string binding)
        {
            return Run("SetModifiedClick(\"{0}\",\"{1}\")", action, binding);
        }

        /// <summary>
        /// Overrides the default mouselook bindings to perform another binding with the mouse buttons
        /// </summary>
        /// <param name="key">The mouselook key to override (string) BUTTON1 - Override the left mouse buttonBUTTON2 - Override the right mouse button</param>
        /// <param name="binding">The binding to perform instead of mouselooking, or nil to clear the override (string)</param>
        /// <example>SetMouselookOverrideBinding("key","binding")</example>
        internal static string[] SetMouselookOverrideBinding(string key, string binding)
        {
            return Run("SetMouselookOverrideBinding(\"{0}\",\"{1}\")", key, binding);
        }

        /// <summary>
        /// Sets a multi-cast action slot to a given spell. This function is used to set up the multi-cast action slots, such as the totem bar that was introduced with Wow 3.2.  The player is able to customize three different sets of totems that can then be cast with a single click.
        /// </summary>
        /// <param name="action">The multi-cast action slot to set (number)</param>
        /// <param name="spell">The numeric spellId to set to the given action slot (number)</param>
        /// <example>SetMultiCastSpell(action,spell)</example>
        internal static string[] SetMultiCastSpell(int action, int spell)
        {
            return Run("SetMultiCastSpell({0},{1})", action, spell);
        }

        /// <summary>
        /// Changes the multisample setting. The index argument corresponds to the individual settings described by GetMultisampleFormats() (each a set of three values).
        /// </summary>
        /// <param name="index">Index of a multisample setting (number)</param>
        /// <example>SetMultisampleFormat(index)</example>
        internal static string[] SetMultisampleFormat(int index)
        {
            return Run("SetMultisampleFormat({0})", index);
        }

        /// <summary>
        /// Selects the next style for a barber shop style option. Changes the underlying data (and thus the character's appearance) only; the default barbershop UI does not update.
        /// </summary>
        /// <param name="styleIndex">Index of a style option (number) 1 - Hair (or Horn) Style2 - Hair (or Horn) Color3 - Varies by race and gender: Facial Hair, Earrings, Features, Hair, Horns, Markings, Normal, Piercings, or Tusks</param>
        /// <param name="reverse">True to select the previous style; false or omitted to select the next (boolean)</param>
        /// <example>SetNextBarberShopStyle(styleIndex[,reverse])</example>
        internal static string[] SetNextBarberShopStyle(int styleIndex, string reverse)
        {
            return Run("SetNextBarberShopStyle({0}[,{1}])", styleIndex, reverse);
        }

        /// <summary>
        /// Changes the player's preference to opt out of loot rolls. When opting out, no prompt will be shown for loot which ordinarily would prompt the player to roll (need/greed) or pass; the loot rolling process will continue for other group members as if the player had chosen to pass on every roll.
        /// </summary>
        /// <param name="enable">True to opt out of loot, false to participate in loot rolls (boolean)</param>
        /// <example>SetOptOutOfLoot(enable)</example>
        internal static string[] SetOptOutOfLoot(string enable)
        {
            return Run("SetOptOutOfLoot({0})", enable);
        }

        /// <summary>
        /// Sets an override binding for a binding command. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key. Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.
        /// </summary>
        /// <param name="owner">The Frame (or other widget) object responsible for this override (table)</param>
        /// <param name="isPriority">True if this binding takes higher priority than other override bindings; false otherwise (boolean)</param>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="command">Name of a key binding command, or nil to remove the override binding (string)</param>
        /// <example>SetOverrideBinding(owner,isPriority,"key","command")</example>
        internal static string[] SetOverrideBinding(string owner, string isPriority, string key, string command)
        {
            return Run("SetOverrideBinding({0},{1},\"{2}\",\"{3}\")", owner, isPriority, key, command);
        }

        /// <summary>
        /// Sets an override binding to "click" a Button object. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key. Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.
        /// </summary>
        /// <param name="owner">The Frame (or other widget) object responsible for this override (table)</param>
        /// <param name="isPriority">True if this binding takes higher priority than other override bindings; false otherwise (boolean)</param>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="buttonName">Name of a Button object on which the binding simulates a click (string)</param>
        /// <param name="mouseButton">Name of the mouse button with which the binding simulates a click (string)</param>
        /// <example>SetOverrideBindingClick(owner,isPriority,"key","buttonName"[,"mouseButton"])</example>
        internal static string[] SetOverrideBindingClick(string owner, string isPriority, string key, string buttonName, string mouseButton)
        {
            return Run("SetOverrideBindingClick({0},{1},\"{2}\",\"{3}\"[,\"{4}\"])", owner, isPriority, key, buttonName, mouseButton);
        }

        /// <summary>
        /// Sets an override binding to use an item in the player's possession. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key. Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.
        /// </summary>
        /// <param name="owner">The Frame (or other widget) object responsible for this override (table)</param>
        /// <param name="isPriority">True if this binding takes higher priority than other override bindings; false otherwise (boolean)</param>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>SetOverrideBindingItem(owner,isPriority,"key",itemID)orSetOverrideBindingItem(owner,isPriority,"key","itemName")orSetOverrideBindingItem(owner,isPriority,"key","itemLink")</example>
        internal static string[] SetOverrideBindingItem(string owner, string isPriority, string key, int itemID, string itemName, string itemLink)
        {
            return Run("SetOverrideBindingItem({0},{1},\"{2}\",{3})orSetOverrideBindingItem({0},{1},\"{2}\",\"{4}\")orSetOverrideBindingItem({0},{1},\"{2}\",\"{5}\")", owner, isPriority, key, itemID, itemName, itemLink);
        }

        /// <summary>
        /// Sets an override binding to run a macro. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key. Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.
        /// </summary>
        /// <param name="owner">The Frame (or other widget) object responsible for this override (table)</param>
        /// <param name="isPriority">True if this binding takes higher priority than other override bindings; false otherwise (boolean)</param>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="index">Index of a macro (number, macroID)</param>
        /// <param name="name">Name of a macro (string)</param>
        /// <example>SetOverrideBindingMacro(owner,isPriority,"key",index)orSetOverrideBindingMacro(owner,isPriority,"key","name")</example>
        internal static string[] SetOverrideBindingMacro(string owner, string isPriority, string key, string index, string name)
        {
            return Run("SetOverrideBindingMacro({0},{1},\"{2}\",{3})orSetOverrideBindingMacro({0},{1},\"{2}\",\"{4}\")", owner, isPriority, key, index, name);
        }

        /// <summary>
        /// Set an override binding to a specific spell. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key. See ClearOverrideBindings() to remove bindings associated with a given owner.
        /// </summary>
        /// <param name="owner">The Frame (or other widget) object responsible for this override (table)</param>
        /// <param name="isPriority">True if this binding takes higher priority than other override bindings; false otherwise (boolean)</param>
        /// <param name="key">A key or key combination (e.g. "CTRL-2") (string, binding)</param>
        /// <param name="spellname">Name of a spell, or nil to remove the override binding (string)</param>
        /// <example>SetOverrideBindingSpell(owner,isPriority,"key","spellname")</example>
        internal static string[] SetOverrideBindingSpell(string owner, string isPriority, string key, string spellname)
        {
            return Run("SetOverrideBindingSpell({0},{1},\"{2}\",\"{3}\")", owner, isPriority, key, spellname);
        }

        /// <summary>
        /// Assigns a group role to a member of the player's party or raid
        /// </summary>
        /// <param name="assignment">A group role to assign to the unit (string) MAINASSIST - Assign the main assist roleMAINTANK - Assign the main tank role</param>
        /// <param name="unit">A unit in the player's party or raid (string, unitID)</param>
        /// <param name="name">Name of a unit in the player's party or raid (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>
        /// <example>SetPartyAssignment("assignment","unit")orSetPartyAssignment("assignment","name"[,exactMatch])</example>
        internal static string[] SetPartyAssignment(string assignment, string unit, string name, string exactMatch)
        {
            return Run("SetPartyAssignment(\"{0}\",\"{1}\")orSetPartyAssignment(\"{0}\",\"{2}\"[,{3}])", assignment, unit, name, exactMatch);
        }

        /// <summary>
        /// Sets the given Model to show the selected stabled pet
        /// </summary>
        /// <param name="model">A Model frame (table)</param>
        /// <example>SetPetStablePaperdoll(model)</example>
        internal static string[] SetPetStablePaperdoll(string model)
        {
            return Run("SetPetStablePaperdoll({0})", model);
        }

        /// <summary>
        /// Sets a Texture object to show a portrait of a unit. Causes the client to render a view of the unit's model from a standard perspective into a circular 2D image and display it in the given Texture object.
        /// </summary>
        /// <param name="texture">A Texture object (table)</param>
        /// <param name="unit">A unit for which to display a portrait (string, unitID)</param>
        /// <example>SetPortraitTexture(texture,"unit")</example>
        internal static string[] SetPortraitTexture(string texture, string unit)
        {
            return Run("SetPortraitTexture({0},\"{1}\")", texture, unit);
        }

        /// <summary>
        /// Sets a Texture object to display an arbitrary texture, altering it to fit a circular frame. Used in the default UI to display square textures (such as item icons) within the circular "portrait" frames used in many default UI elements.
        /// </summary>
        /// <param name="frameName">Name of a Texture object (string)</param>
        /// <param name="texturePath">Path to a texture to display (string)</param>
        /// <example>SetPortraitToTexture("frameName","texturePath")</example>
        internal static string[] SetPortraitToTexture(string frameName, string texturePath)
        {
            return Run("SetPortraitToTexture(\"{0}\",\"{1}\")", frameName, texturePath);
        }

        /// <summary>
        /// Enables or disables the player's desired PvP status. Enabling PvP takes effect immediately; disabling PvP begins a five-minute countdown after which PvP status will be disabled (if the player has taken no PvP actions).
        /// </summary>
        /// <param name="state">1 to enable PVP, nil to disable (1nil)</param>
        /// <example>SetPVP(state)</example>
        internal static string[] SetPVP(string state)
        {
            return Run("SetPVP({0})", state);
        }

        /// <summary>
        /// Sets the player's raid dungeon difficulty preference. The dungeon difficulty has no effect on the instance created if the player is not the raid leader or while you are inside an instance already.
        /// </summary>
        /// <param name="difficulty">Difficulty level for raid dungeons  1 - 10 Player2 - 25 Player3 - 10 Player (Heroic)4 - 25 Player (Heroic)</param>
        /// <example>SetRaidDifficulty(difficulty)</example>
        internal static string[] SetRaidDifficulty(string difficulty)
        {
            return Run("SetRaidDifficulty({0})", difficulty);
        }

        /// <summary>
        /// Selects a unit in the raid roster. Selection in the raid roster is used only for display in the default UI and has no effect on other Raid APIs.
        /// </summary>
        /// <param name="index">Index of the raid member (between 1 and GetNumRaidMembers(); matches the numeric part of the unit's raidunitID, e.g. 21 for raid21 (number)</param>
        /// <example>SetRaidRosterSelection(index)</example>
        internal static string[] SetRaidRosterSelection(int index)
        {
            return Run("SetRaidRosterSelection({0})", index);
        }

        /// <summary>
        /// Moves a raid member to a non-full raid subgroup. Only has effect if the player is the raid leader or a raid assistant. To put a member into a full subgroup (switching places with a member of that group), see SwapRaidSubgroup().
        /// </summary>
        /// <param name="index">Index of the raid member (between 1 and GetNumRaidMembers(); matches the numeric part of the unit's raidunitID, e.g. 21 for raid21 (number)</param>
        /// <param name="subgroup">Index of a raid subgroup (between 1 and MAX_RAID_GROUPS) (number)</param>
        /// <example>SetRaidSubgroup(index,subgroup)</example>
        internal static string[] SetRaidSubgroup(int index, int subgroup)
        {
            return Run("SetRaidSubgroup({0},{1})", index, subgroup);
        }

        /// <summary>
        /// Puts a raid target marker on a unit
        /// </summary>
        /// <param name="unit">A unit to mark (string, unitID)</param>
        /// <param name="name">Name of a unit to mark (string)</param>
        /// <param name="index">Index of a target marker (number) 0 - Clear any raid target markers1 - Star2 - Circle3 - Diamond4 - Triangle5 - Moon6 - Square7 - Cross8 - Skull</param>
        /// <example>SetRaidTarget("unit",index)orSetRaidTarget("name",index)</example>
        internal static string[] SetRaidTarget(string unit, string name, int index)
        {
            return Run("SetRaidTarget(\"{0}\",{2})orSetRaidTarget(\"{1}\",{2})", unit, name, index);
        }

        /// <summary>
        /// Changes the screen resolution
        /// </summary>
        /// <param name="index">Index of a resolution setting (between 1 and select("#",GetScreenResolutions())) (number)</param>
        /// <example>SetScreenResolution(index)</example>
        internal static string[] SetScreenResolution(int index)
        {
            return Run("SetScreenResolution({0})", index);
        }

        /// <summary>
        /// Selects an item in an auction listing. Auction selection is used only for display and internal static recordkeeping in the default UI; it has no direct effect on other Auction APIs.
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="index">Index of an auction in the listing (number)</param>
        /// <example>SetSelectedAuctionItem("list",index)</example>
        internal static string[] SetSelectedAuctionItem(string list, int index)
        {
            return Run("SetSelectedAuctionItem(\"{0}\",{1})", list, index);
        }

        /// <summary>
        /// Selects a battleground instance in the queueing list. Selection in the battleground instance list is used only for display in the default UI and has no effect on other Battlefield APIs.
        /// </summary>
        /// <param name="index">Index in the battleground queue listing (1 for the first available instance, or between 2 and GetNumBattlefields() for other instances)  (number)</param>
        /// <example>SetSelectedBattlefield(index)</example>
        internal static string[] SetSelectedBattlefield(int index)
        {
            return Run("SetSelectedBattlefield({0})", index);
        }

        /// <summary>
        /// Selects a channel in the channel list display
        /// </summary>
        /// <param name="index">Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number)</param>
        /// <example>SetSelectedDisplayChannel(index)</example>
        internal static string[] SetSelectedDisplayChannel(int index)
        {
            return Run("SetSelectedDisplayChannel({0})", index);
        }

        /// <summary>
        /// Selects a faction in the reputation UI.  Selection has no bearing on other faction-related APIs; this function merely facilitates behaviors of Blizzard's reputation UI. 
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>SetSelectedFaction(index)</example>
        internal static string[] SetSelectedFaction(int index)
        {
            return Run("SetSelectedFaction({0})", index);
        }

        /// <summary>
        /// Selects a character in the player's friends list. Selection in the Friends list is used only for display in the default UI and has no effect on other Friends list APIs.
        /// </summary>
        /// <param name="index">Index of a character in the Friends list (between 1 and GetNumFriends()) (number)</param>
        /// <example>SetSelectedFriend(index)</example>
        internal static string[] SetSelectedFriend(int index)
        {
            return Run("SetSelectedFriend({0})", index);
        }

        /// <summary>
        /// Selects a character in the player's ignore list. Selection in the Ignore list is used only for display in the default UI and has no effect on other Ignore list APIs.
        /// </summary>
        /// <param name="index">Index of a character in the Ignore list (between 1 and GetNumIgnores()) (number)</param>
        /// <example>SetSelectedIgnore(index)</example>
        internal static string[] SetSelectedIgnore(int index)
        {
            return Run("SetSelectedIgnore({0})", index);
        }

        /// <summary>
        /// Selects an entry in the Muted list. Mute list selection is only used for display purposes in the default UI and has no effect on other API functions.
        /// </summary>
        /// <param name="index">Index of an entry in the mute listing (between 1 and GetNumMutes()) (number)</param>
        /// <example>SetSelectedMute(index)</example>
        internal static string[] SetSelectedMute(int index)
        {
            return Run("SetSelectedMute({0})", index);
        }

        /// <summary>
        /// Selects a skill in the Skills UI. Selection is only used for display purposes in the default Skills UI and has no effect on other Skill APIs.
        /// </summary>
        /// <param name="index">Index of an entry in the skills list (between 1 and GetNumSkillLines()) (number)</param>
        /// <example>SetSelectedSkill(index)</example>
        internal static string[] SetSelectedSkill(int index)
        {
            return Run("SetSelectedSkill({0})", index);
        }

        /// <summary>
        /// Sets the Cash-On-Delivery cost of the outgoing message. Called in the default UI when clicking its Send button, immediately before sending the message.
        /// </summary>
        /// <param name="amount">COD cost for the items attached to the message (in copper) (number)</param>
        /// <example>SetSendMailCOD(amount)</example>
        internal static string[] SetSendMailCOD(int amount)
        {
            return Run("SetSendMailCOD({0})", amount);
        }

        /// <summary>
        /// Sets the amount of money to be sent with the outgoing message. Called in the default UI when clicking its Send button, immediately before sending the message. Causes an error message if the amount plus postage exceeds the player's total money.
        /// </summary>
        /// <param name="amount">Amount of money to send (in copper) (number)</param>
        /// <example>success=SetSendMailMoney(amount)</example>
        internal static string[] SetSendMailMoney(int amount)
        {
            return Run("SetSendMailMoney({0})", amount); //success
        }

        /// <summary>
        /// Enables or disables shortcuts for attaching items to outgoing mail. When shortcuts are enabled, UseContainerItem() (i.e. right-click in the default UI's container frames) attaches the item to the outgoing message instead of using it.
        /// </summary>
        /// <param name="enable">True to enable shortcuts; false to disable (boolean)</param>
        /// <example>SetSendMailShowing(enable)</example>
        internal static string[] SetSendMailShowing(string enable)
        {
            return Run("SetSendMailShowing({0})", enable);
        }

        /// <summary>
        /// Enables or disables flight path benchmark mode. When benchmark mode is enabled, the next taxi flight the player takes will behave differently: camera movement is disabled and players/creatures/objects below the flight path will not be shown (allowing for consistent test conditions). After the flight, framerate statistics will be printed in the chat window and benchmark mode will be automatically disabled.
        /// </summary>
        /// <param name="arg">nil, "on", or 1 to enable benchmark mode; "off" or 0 to disable (string)</param>
        /// <example>SetTaxiBenchmarkMode("arg")</example>
        internal static string[] SetTaxiBenchmarkMode(string arg)
        {
            return Run("SetTaxiBenchmarkMode(\"{0}\")", arg);
        }

        /// <summary>
        /// Sets a Texture object to show the appropriate flight map texture. Only has effect while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="texture">A Texture object (table)</param>
        /// <example>SetTaxiMap(texture)</example>
        internal static string[] SetTaxiMap(string texture)
        {
            return Run("SetTaxiMap({0})", texture);
        }

        /// <summary>
        /// Changes the level of terrain detail displayed. Corresponds to the "Terrain Blending" slider in the default UI's Video Options pane.
        /// </summary>
        /// <param name="terrainDetail">Level of terrain detail to be displayed (number) 0 - Low detail1 - High detail</param>
        /// <example>SetTerrainMip(terrainDetail)</example>
        internal static string[] SetTerrainMip(int terrainDetail)
        {
            return Run("SetTerrainMip({0})", terrainDetail);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>SetTexLodBias()</example>
        internal static string[] SetTexLodBias()
        {
            return Run("SetTexLodBias()");
        }

        /// <summary>
        /// Enables a given minimap object/unit tracking ability
        /// </summary>
        /// <param name="index">Index of a tracking ability (between 1 and GetNumTrackingTypes()) (number)</param>
        /// <example>SetTracking(index)</example>
        internal static string[] SetTracking(int index)
        {
            return Run("SetTracking({0})", index);
        }

        /// <summary>
        /// Offers an amount of money for trade
        /// </summary>
        /// <param name="amount">Amount of money to offer for trade (in copper) (number)</param>
        /// <example>SetTradeMoney(amount)</example>
        internal static string[] SetTradeMoney(int amount)
        {
            return Run("SetTradeMoney({0})", amount);
        }

        /// <summary>
        /// Filters the trade skill listing by equipment slot of items produced
        /// </summary>
        /// <param name="index">Index of an item equipment slot (in the list returned by GetTradeSkillInvSlots()), or 0 for no filter (number)</param>
        /// <param name="enable">1 to show recipes matching inventory type index in the filtered list; 0 to hide them (number)</param>
        /// <param name="exclusive">1 to disable other subclass filters when enabling this one; otherwise nil (1nil)</param>
        /// <example>SetTradeSkillInvSlotFilter(index[,enable[,exclusive]])</example>
        internal static string[] SetTradeSkillInvSlotFilter(int index, int enable, string exclusive)
        {
            return Run("SetTradeSkillInvSlotFilter({0}[,{1}[,{2}]])", index, enable, exclusive);
        }

        /// <summary>
        /// Filters the trade skill listing by required level of items produced
        /// </summary>
        /// <param name="minLevel">Lowest required level of items to show in the filtered list (number)</param>
        /// <param name="maxLevel">Highest required level of items to show in the filtered list (number)</param>
        /// <example>SetTradeSkillItemLevelFilter(minLevel,maxLevel)</example>
        internal static string[] SetTradeSkillItemLevelFilter(int minLevel, int maxLevel)
        {
            return Run("SetTradeSkillItemLevelFilter({0},{1})", minLevel, maxLevel);
        }

        /// <summary>
        /// Filters the trade skill listing by name of recipe, item produced, or reagents. Uses a substring (not exact-match) search: e.g. for a Scribe, the search string "doc" might filter the list to show only Certificate of Ownership because it matches the word "documentation" in that item's tooltip; a search for "stam" will match all items providing a Stamina bonus.
        /// </summary>
        /// <param name=text>Text to search for in recipe names, produced item names or descriptions, or reagents (string)</param>
        /// <example>SetTradeSkillItemNameFilter(text)</example>
        internal static string[] SetTradeSkillItemNameFilter(string text)
        {
            return Run("SetTradeSkillItemNameFilter(\"{0}\")", text);
        }

        /// <summary>
        /// Filters the trade skill listing by subclass of items produced
        /// </summary>
        /// <param name="index">Index of an item subclass (in the list returned by GetTradeSkillSubClasses()), or 0 for no filter (number)</param>
        /// <param name="enable">1 to show recipes matching subclass index in the filtered list; 0 to hide them (number)</param>
        /// <param name="exclusive">1 to disable other subclass filters when enabling this one; otherwise nil (1nil)</param>
        /// <example>SetTradeSkillSubClassFilter(index[,enable[,exclusive]])</example>
        internal static string[] SetTradeSkillSubClassFilter(int index, int enable, string exclusive)
        {
            return Run("SetTradeSkillSubClassFilter({0}[,{1}[,{2}]])", index, enable, exclusive);
        }

        /// <summary>
        /// Filters the trainer service listing by service status
        /// </summary>
        /// <param name="type">A service status (string) available - Services the player can useunavailable - Services the player cannot currently useused - Services the player has already used</param>
        /// <param name="enable">1 to show services matching type in the filtered list; 0 to hide them (number)</param>
        /// <param name="exclusive">1 to disable other type filters when enabling this one; otherwise nil (1nil)</param>
        /// <example>SetTrainerServiceTypeFilter("type"[,enable[,exclusive]])</example>
        internal static string[] SetTrainerServiceTypeFilter(string type, int enable)
        {
            return Run("SetTrainerServiceTypeFilter(\"{0}\",{1})", type, enable);
        }

        /// <summary>
        /// Filters the trainer service listing by skill line. The default UI does not provide control for skill line filters, but they can nonetheless be used to alter the contents of the trainer service listing.
        /// </summary>
        /// <param name="type">Index of a skill line filter (in the list returned by GetTrainerSkillLines()) (string)</param>
        /// <param name="enable">1 to show services matching the given skill line in the filtered list; 0 to hide them (number)</param>
        /// <param name="exclusive">1 to disable other skill line filters when enabling this one; otherwise nil (1nil)</param>
        /// <example>SetTrainerSkillLineFilter("type"[,enable[,exclusive]])</example>
        internal static string[] SetTrainerSkillLineFilter(string type, int enable, string exclusive)
        {
            return Run("SetTrainerSkillLineFilter(\"{0}\"[,{1}[,{2}]])", type, enable, exclusive);
        }

        /// <summary>
        /// Enables or disables display of UI elements in the 3-D world. Applies only to 2-D UI elements displayed in the 3-D world: nameplates and raid target icons (skull, circle, square, etc). Does not directly control nameplates and target icons -- only affects whether they are displayed (see the nameplateShowEnemies/nameplateShowFriends CVars and SetRaidTarget functions for direct control).Does not apply to 3-D UI elements such as the selection circle, area-effect targeting indicator, vehicle weapon aim indicator, etc.
        /// </summary>
        /// <param name="visible">True to enable display of UI elements in the 3-D world; false to disable (boolean)</param>
        /// <example>SetUIVisibility(visible)</example>
        internal static string[] SetUIVisibility(string visible)
        {
            return Run("SetUIVisibility({0})", visible);
        }

        /// <summary>
        /// Sizes a frame to take up the entire screen regardless of screen resolution
        /// </summary>
        /// <param name="frame">Frame to resize to full screen (table)</param>
        /// <example>SetupFullscreenScale(frame)</example>
        internal static string[] SetupFullscreenScale(string frame)
        {
            return Run("SetupFullscreenScale({0})", frame);
        }

        /// <summary>
        /// Moves the camera to a saved camera setting. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().
        /// </summary>
        /// <param name="index">Index of a saved camera setting (between 1 and 5) (number)</param>
        /// <example>SetView(index)</example>
        internal static string[] SetView(int index)
        {
            return Run("SetView({0})", index);
        }

        /// <summary>
        /// Makes a faction the "watched" faction (displayed on the XP bar in the default UI)
        /// </summary>
        /// <param name="index">Index of an entry in the faction list; between 1 and GetNumFactions() (number)</param>
        /// <example>SetWatchedFactionIndex(index)</example>
        internal static string[] SetWatchedFactionIndex(int index)
        {
            return Run("SetWatchedFactionIndex({0})", index);
        }

        /// <summary>
        /// Sets the value for the water details display
        /// </summary>
        /// <param name="value">The new value for the water detail (number)</param>
        /// <example>SetWaterDetail(value)</example>
        internal static string[] SetWaterDetail(int value)
        {
            return Run("SetWaterDetail({0})", value);
        }

        /// <summary>
        /// Changes the delivery method for results from SendWho() queries. In the default UI, results delivered in CHAT_MSG_SYSTEM are printed in the main chat window; results delivered in a WHO_LIST_UPDATE event cause the FriendsFrame to be shown, displaying the results in its "Who" tab.
        /// </summary>
        /// <param name="state">Number identifying a delivery method (number) 0 - Send results of three entries or fewer in CHAT_MSG_SYSTEM events and results of greater than three entries in a WHO_LIST_UPDATE event1 - Send all results in a WHO_LIST_UPDATE event</param>
        /// <example>SetWhoToUI(state)</example>
        internal static string[] SetWhoToUI(int state)
        {
            return Run("SetWhoToUI({0})", state);
        }

        /// <summary>
        /// Requests to change instances for a battleground to which the player is already queued. Causes the BATTLEFIELDS_SHOW event to fire, allowing the player to review the battleground's list of available instances and queue for a different one if desired.
        /// </summary>
        /// <param name="index">Index of a battleground/arena queue the player has joined (between 1 and MAX_BATTLEFIELD_QUEUES) (number)</param>
        /// <example>ShowBattlefieldList(index)</example>
        internal static string[] ShowBattlefieldList(int index)
        {
            return Run("ShowBattlefieldList({0})", index);
        }

        /// <summary>
        /// Changes the cursor to prepare for repurchasing an item recently sold to a vendor. Only changes the cursor image and mode if the given index contains an item.
        /// </summary>
        /// <param name="index">Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number)</param>
        /// <example>ShowBuybackSellCursor(index)</example>
        internal static string[] ShowBuybackSellCursor(int index)
        {
            return Run("ShowBuybackSellCursor({0})", index);
        }

        /// <summary>
        /// Enables or disables display of the player's cloak. Only affects the player's appearance; does not change the other effects of having the cloak equipped. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.
        /// </summary>
        /// <param name="show">1 to display the player's cloak; nil to hide it (1nil)</param>
        /// <example>ShowCloak(show)</example>
        internal static string[] ShowCloak(string show)
        {
            return Run("ShowCloak({0})", show);
        }

        /// <summary>
        /// Changes the cursor to prepare for selling an item in the player's bags to a vendor. Only changes the cursor image and mode if the given container and slot contain an item.While the cursor is in "sell" mode, UseContainerItem() sells the item to the vendor instead of using it.
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>ShowContainerSellCursor(container,slot)</example>
        internal static string[] ShowContainerSellCursor(string container, string slot)
        {
            return Run("ShowContainerSellCursor({0},{1})", container, slot);
        }

        /// <summary>
        /// Requests friends/ignore list information from the server. Information is not returned immediately; the FRIENDLIST_UPDATE event fires when data becomes available for use by Friends/Ignore API functions.
        /// </summary>
        /// <example>ShowFriends()</example>
        internal static string[] ShowFriends()
        {
            return Run("ShowFriends()");
        }

        /// <summary>
        /// Enables or disables display of the player's headgear. Only affects the player's appearance; does not change the other effects of having the headgear equipped. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.
        /// </summary>
        /// <param name="show">1 to display the player's headgear; nil to hide it (1nil)</param>
        /// <example>ShowHelm(show)</example>
        internal static string[] ShowHelm(string show)
        {
            return Run("ShowHelm({0})", show);
        }

        /// <summary>
        /// Returns whether the player's cloak is displayed. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.
        /// </summary>
        /// <example>isShown=ShowingCloak()</example>
        internal static string[] ShowingCloak()
        {
            return Run("ShowingCloak()"); //isShown
        }

        /// <summary>
        /// Returns whether the player's headgear is displayed. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.
        /// </summary>
        /// <example>isShown=ShowingHelm()</example>
        internal static string[] ShowingHelm()
        {
            return Run("ShowingHelm()"); //isShown
        }

        /// <summary>
        /// Changes the cursor to prepare for selling an equipped item to a vendor. Only changes the cursor image and mode if the given slot contains an item. (Unlike ShowContainerSellCursor(), does not change the behavior of other functions to enable selling of items. Unused in the default UI.)
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>ShowInventorySellCursor(slot)</example>
        internal static string[] ShowInventorySellCursor(string slot)
        {
            return Run("ShowInventorySellCursor({0})", slot);
        }

        /// <summary>
        /// Changes the cursor to prepare for buying an item from a vendor. Only changes the cursor image and mode if the given index contains an item.
        /// </summary>
        /// <param name="index">Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number)</param>
        /// <example>ShowMerchantSellCursor(index)</example>
        internal static string[] ShowMerchantSellCursor(int index)
        {
            return Run("ShowMerchantSellCursor({0})", index);
        }

        /// <summary>
        /// Shows or hides the battlefield minimap's player arrow
        /// </summary>
        /// <param name="show">If the battlefield minimap's player arrow should be shown (boolean)</param>
        /// <example>ShowMiniWorldMapArrowFrame(show)</example>
        internal static string[] ShowMiniWorldMapArrowFrame(string show)
        {
            return Run("ShowMiniWorldMapArrowFrame({0})", show);
        }

        /// <summary>
        /// Puts the cursor in item repair mode. Unlike most other cursor functions, this functions changes the behavior as well as the appearance of the mouse cursor: while repair mode is active, calling PickupContainerItem() or PickupInventoryItem() will attempt to repair the item (and deduct the cost of such from the player's savings) instead of putting it on the cursor.Only has effect while the player is interacting with a vendor which can perform repairs; i.e. between the MERCHANT_SHOW and MERCHANT_CLOSED events, and only if CanMerchantRepair() returns 1.
        /// </summary>
        /// <example>ShowRepairCursor()</example>
        internal static string[] ShowRepairCursor()
        {
            return Run("ShowRepairCursor()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ShowWorldMapArrowFrame()</example>
        internal static string[] ShowWorldMapArrowFrame()
        {
            return Run("ShowWorldMapArrowFrame()");
        }

        /// <summary>
        /// Signs the currently offered petition
        /// </summary>
        /// <example>SignPetition()</example>
        internal static string[] SignPetition()
        {
            return Run("SignPetition()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>SilenceMember()</example>
        internal static string[] SilenceMember()
        {
            return Run("SilenceMember()");
        }

        /// <summary>
        /// Causes the player character to sit down if standing and vice versa (or begins descent if swimming or flying). Used by the SITORSTAND binding, which also controls descent when swimming or flying.
        /// </summary>
        /// <example>SitStandOrDescendStart()</example>
        internal static string[] SitStandOrDescendStart()
        {
            return Run("SitStandOrDescendStart()");
        }

        /// <summary>
        /// Opens an item from the player's bags for socketing
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <example>SocketContainerItem(container,slot)</example>
        internal static string[] SocketContainerItem(string container, string slot)
        {
            return Run("SocketContainerItem({0},{1})", container, slot);
        }

        /// <summary>
        /// Opens an equipped item for socketing
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>SocketInventoryItem(slot)</example>
        internal static string[] SocketInventoryItem(string slot)
        {
            return Run("SocketInventoryItem({0})", slot);
        }

        /// <summary>
        /// Sorts a table. Alias for the standard library function table.sort.
        /// </summary>
        /// <param name="table">A table (number)</param>
        /// <param name="comparator">A function to compare table elements during the sort; takes two arguments and returns true if the first argument should be ordered before the second in the sorted table; equivalent to function(a,b) return a < b end if omitted (function)</param>
        /// <example>sort(table[,comparator])</example>
        internal static string[] sort(int table, string comparator)
        {
            return Run("sort({0}[,{1}])", table, comparator);
        }

        /// <summary>
        /// Sorts the selected arena team's roster. Affects the ordering of member information returned by GetArenaTeamRosterInfo. Sorting by the same criterion repeatedly reverses the sort order.
        /// </summary>
        /// <param name="sortType">Criterion for sorting the roster (string) class - Sort by classname - Sort by nameplayed - Sort by number of games played in the current weekrating - Sort by personal ratingseasonplayed - Sort by number of games played in the current arena seasonseasonwon - Sort by number of games won in the current arena seasonwon - Sort by number of games won in the current week</param>
        /// <example>SortArenaTeamRoster("sortType")</example>
        internal static string[] SortArenaTeamRoster(string sortType)
        {
            return Run("SortArenaTeamRoster(\"{0}\")", sortType);
        }

        /// <summary>
        /// Applies a set of auction listing sort criteria set via SortAuctionSetSort. Sort criteria are applied server-side, affecting not only the order of items within one "page" of listings but the order in which items are collected into pages.Any currently displayed listings are re-sorted server-side: the AUCTION_ITEM_LIST_UPDATE, AUCTION_BIDDER_LIST_UPDATE, or AUCTION_OWNED_LIST_UPDATE event fires once the re-sorted data is available to the client; listing information can then be retrieved using GetAuctionItemInfo() or other Auction APIs.
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <example>SortAuctionApplySort("list")</example>
        internal static string[] SortAuctionApplySort(string list)
        {
            return Run("SortAuctionApplySort(\"{0}\")", list);
        }

        /// <summary>
        /// Clears any current sorting rules for an auction house listing
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <example>SortAuctionClearSort("list")</example>
        internal static string[] SortAuctionClearSort(string list)
        {
            return Run("SortAuctionClearSort(\"{0}\")", list);
        }

        /// <summary>
        /// Sorts the auction house listing. No longer used in the default UI; see SortAuctionClearSort(), SortAuctionSetSort(), and SortAuctionApplySort() instead.
        /// </summary>
        /// <param name="type">The type of auction listing to sort (string) bidder - Auctions the player has bid onlist - Standard auction house listingowner - Auctions the player has placed</param>
        /// <param name="sort">Criterion for sorting the list (string) bid - Amount of the current or minimum bid on the itembuyout - Buyout price of the itemduration - Time remaining before the auction expireslevel - Required character level to use or equip the itemminbidbuyout - Buyout price, or minimum bid if no buyout price is availablename - Name of the itemquality - itemQuality of the itemquantity - Number of stacked items in the auctionseller - Name of the character who created of the auction (or in the owner listing, the current high bidder)status - Status of the auction (e.g. in the bidder listing, whether the player has been outbid)</param>
        /// <example>SortAuctionItems("type","sort")</example>
        internal static string[] SortAuctionItems(string type, string sort)
        {
            return Run("SortAuctionItems(\"{0}\",\"{1}\")", type, sort);
        }

        /// <summary>
        /// Builds a list of sort criteria for auction listings. Has no effect until SortAuctionApplySort(type) is called; thus, this function can be called repeatedly to build a complex set of sort criteria. Sort criteria are applied server-side, affecting not only the order of items within one "page" of listings but the order in which items are collected into pages.Criteria are applied in the order set by this function; i.e. the last criterion set becomes the primary sort criterion (see example).
        /// </summary>
        /// <param name="list">Type of auction listing (string) bidder - Auctions the player has bid onlist - Auctions the player can browse and bid on or buy outowner - Auctions the player placed</param>
        /// <param name="sort">Criterion to add to the sort (string) bid - Amount of the current or minimum bid on the itembuyout - Buyout price of the itemduration - Time remaining before the auction expireslevel - Required character level to use or equip the itemminbidbuyout - Buyout price, or minimum bid if no buyout price is availablename - Name of the itemquality - itemQuality of the itemquantity - Number of stacked items in the auctionseller - Name of the character who created of the auction (or in the owner listing, the current high bidder)status - Status of the auction (e.g. in the bidder listing, whether the player has been outbid)</param>
        /// <param name="reversed">True to sort in reverse order; otherwise false. "Reverse" here is relative to the default order, not to absolute value: e.g. the default order for quality is descending (Epic, Rare, Uncommon, etc), but the default order for level is ascending (1-80) (boolean)</param>
        /// <example>SortAuctionSetSort("list","sort",reversed)</example>
        internal static string[] SortAuctionSetSort(string list, string sort, string reversed)
        {
            return Run("SortAuctionSetSort(\"{0}\",\"{1}\",{2})", list, sort, reversed);
        }

        /// <summary>
        /// Sorts the battleground scoreboard. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc. For the name and icon associated with each statistic, see GetBattlefieldStatInfo().
        /// </summary>
        /// <param name="sortType">Criterion for sorting the scoreboard data (string) class - Sort by character classcp - Sorts by honor points gaineddamage - Sorts by damage donedeaths - Sort by number of deathshealing - Sorts by healing donehk - Sorts by number of honor killskills - Sort by number of killsname - Sort by participant namestat1 - Battlefield-specific statistic 1stat2 - Battlefield-specific statistic 2stat3 - Battlefield-specific statistic 3stat4 - Battlefield-specific statistic 4stat5 - Battlefield-specific statistic 5stat6 - Battlefield-specific statistic 6stat7 - Battlefield-specific statistic 7team -  Sort by team name</param>
        /// <example>SortBattlefieldScoreData("sortType")</example>
        internal static string[] SortBattlefieldScoreData(string sortType)
        {
            return Run("SortBattlefieldScoreData(\"{0}\")", sortType);
        }

        /// <summary>
        /// Sorts the guild roster. Sorting repeatedly by the same criterion will reverse the sort order. Previous sorts are reused when a new criterion is applied: to sort by two criteria, sort first by the secondary criterion and then by the primary criterion.
        /// </summary>
        /// <param name="type">Criterion by which to sort the roster (string) class - Sort by class namelevel - Sort by character levelname - Sort by namenote - Sort by guild noteonline - Sory by last online timerank - Sort by guild rankzone - Sort by current zone name</param>
        /// <example>SortGuildRoster("type")</example>
        internal static string[] SortGuildRoster(string type)
        {
            return Run("SortGuildRoster(\"{0}\")", type);
        }

        /// <summary>
        /// Sorts the Who system query results list. Sorting by the same criterion twice will reverse the sort order.
        /// </summary>
        /// <param name="sortType">Criterion for sorting the list (string) class - Sort by class nameguild - Sort by guild namelevel - Sort by player levelname - Sort by player namerace - Sort by race namezone - Sort by current zone name</param>
        /// <example>SortWho("sortType")</example>
        internal static string[] SortWho(string sortType)
        {
            return Run("SortWho(\"{0}\")", sortType);
        }

        /// <summary>
        /// Returns the name of the given chat system sound input driver
        /// </summary>
        /// <param name="index">The desired index (number)</param>
        /// <example>Sound_ChatSystem_GetInputDriverNameByIndex(index)</example>
        internal static string[] Sound_ChatSystem_GetInputDriverNameByIndex(int index)
        {
            return Run("Sound_ChatSystem_GetInputDriverNameByIndex({0})", index);
        }

        /// <summary>
        /// Returns the number of chat system sound input drivers
        /// </summary>
        /// <example>Sound_ChatSystem_GetNumInputDrivers()</example>
        internal static string[] Sound_ChatSystem_GetNumInputDrivers()
        {
            return Run("Sound_ChatSystem_GetNumInputDrivers()");
        }

        /// <summary>
        /// Returns the number of chat system sound output drivers
        /// </summary>
        /// <example>Sound_ChatSystem_GetNumOutputDrivers()</example>
        internal static string[] Sound_ChatSystem_GetNumOutputDrivers()
        {
            return Run("Sound_ChatSystem_GetNumOutputDrivers()");
        }

        /// <summary>
        /// Returns the name of the given chat system sound output driver
        /// </summary>
        /// <param name="index">The desired index (number)</param>
        /// <example>Sound_ChatSystem_GetOutputDriverNameByIndex(index)</example>
        internal static string[] Sound_ChatSystem_GetOutputDriverNameByIndex(int index)
        {
            return Run("Sound_ChatSystem_GetOutputDriverNameByIndex({0})", index);
        }

        /// <summary>
        /// Returns the name of the given game sound input driver
        /// </summary>
        /// <param name="index">The desired index (number)</param>
        /// <example>Sound_GameSystem_GetInputDriverNameByIndex(index)</example>
        internal static string[] Sound_GameSystem_GetInputDriverNameByIndex(int index)
        {
            return Run("Sound_GameSystem_GetInputDriverNameByIndex({0})", index);
        }

        /// <summary>
        /// Returns the number of game sound input drivers
        /// </summary>
        /// <example>Sound_GameSystem_GetNumInputDrivers()</example>
        internal static string[] Sound_GameSystem_GetNumInputDrivers()
        {
            return Run("Sound_GameSystem_GetNumInputDrivers()");
        }

        /// <summary>
        /// Returns the number of game sound output drivers
        /// </summary>
        /// <example>Sound_GameSystem_GetNumOutputDrivers()</example>
        internal static string[] Sound_GameSystem_GetNumOutputDrivers()
        {
            return Run("Sound_GameSystem_GetNumOutputDrivers()");
        }

        /// <summary>
        /// Returns the name of the given game sound output driver
        /// </summary>
        /// <param name="index">The desired index (number)</param>
        /// <example>Sound_GameSystem_GetOutputDriverNameByIndex(index)</example>
        internal static string[] Sound_GameSystem_GetOutputDriverNameByIndex(int index)
        {
            return Run("Sound_GameSystem_GetOutputDriverNameByIndex({0})", index);
        }

        /// <summary>
        /// Restarts the game's sound systems
        /// </summary>
        /// <example>Sound_GameSystem_RestartSoundSystem()</example>
        internal static string[] Sound_GameSystem_RestartSoundSystem()
        {
            return Run("Sound_GameSystem_RestartSoundSystem()");
        }

        /// <summary>
        /// Returns whether the spell currently awaiting a target requires a glyph slot to be chosen. Only applies when the player has attempted to cast a spell -- in this case, the "spell" cast when one uses a glyph item -- but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).
        /// </summary>
        /// <example>canTarget=SpellCanTargetGlyph()</example>
        internal static string[] SpellCanTargetGlyph()
        {
            return Run("SpellCanTargetGlyph()"); //canTarget
        }

        /// <summary>
        /// Returns whether the spell currently awaiting a target requires an item to be chosen. Only applies when the player has attempted to cast a spell but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).
        /// </summary>
        /// <example>canTarget=SpellCanTargetItem()</example>
        internal static string[] SpellCanTargetItem()
        {
            return Run("SpellCanTargetItem()"); //canTarget
        }

        /// <summary>
        /// Returns whether the spell currently awaiting a target can target a given unit. Only applies when the player has attempted to cast a spell but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).
        /// </summary>
        /// <param name="unit">A unit to target (string, unitID)</param>
        /// <param name="name">The name of a unit to target; only valid for player, pet, and party/raid members (string)</param>
        /// <example>canTarget=SpellCanTargetUnit("unit")orSpellCanTargetUnit("name")</example>
        internal static string[] SpellCanTargetUnit(string unit, string name)
        {
            return Run("SpellCanTargetUnit(\"{0}\")orSpellCanTargetUnit(\"{1}\")", unit, name); //canTarget
        }

        /// <summary>
        /// Returns whether an item has a range limitation for its use. For example: Shadowbolt can only be used on a unit within a given range of the player; Ritual of Summoning requires a target but has no range restriction; Fel Armor has no target and thus no range restriction.
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>hasRange=SpellHasRange(index,"bookType")orSpellHasRange("name")</example>
        internal static string[] SpellHasRange(string index, string bookType, string name)
        {
            return Run("SpellHasRange({0},\"{1}\")orSpellHasRange(\"{2}\")", index, bookType, name); //hasRange
        }

        /// <summary>
        /// Returns whether a spell is currently awaiting a target
        /// </summary>
        /// <example>isTargeting=SpellIsTargeting()</example>
        internal static string[] SpellIsTargeting()
        {
            return Run("SpellIsTargeting()"); //isTargeting
        }

        /// <summary>
        /// Stops casting or targeting the spell in progress
        /// </summary>
        /// <example>SpellStopCasting()</example>
        internal static string[] SpellStopCasting()
        {
            return Run("SpellStopCasting()");
        }

        /// <summary>
        /// Cancels the spell currently awaiting a target. When auto-self cast is not enabled and the player casts a spell that requires a target, the cursor changes to a glowing hand so the user can select a target. This function cancels targeting mode so the player can cast another spell.
        /// </summary>
        /// <example>SpellStopTargeting()</example>
        internal static string[] SpellStopTargeting()
        {
            return Run("SpellStopTargeting()");
        }

        /// <summary>
        /// Casts the spell currently awaiting a target on an item. Usable when the player has attempted to cast a spell (e.g. an Enchanting recipe or the "Use:" effect of a sharpening stone or fishing lure) but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <example>SpellTargetItem(itemID)orSpellTargetItem("itemName")orSpellTargetItem("itemLink")</example>
        internal static string[] SpellTargetItem(int itemID, string itemName, string itemLink)
        {
            return Run("SpellTargetItem({0})orSpellTargetItem(\"{1}\")orSpellTargetItem(\"{2}\")", itemID, itemName, itemLink);
        }

        /// <summary>
        /// Casts the spell currently awaiting a target on a unit
        /// </summary>
        /// <param name="unit">A unit to target (string, unitID)</param>
        /// <param name="name">The name of a unit to target; only valid for player, pet, and party/raid members (string)</param>
        /// <example>SpellTargetUnit("unit")orSpellTargetUnit("name")</example>
        internal static string[] SpellTargetUnit(string unit, string name)
        {
            return Run("SpellTargetUnit(\"{0}\")orSpellTargetUnit(\"{1}\")", unit, name);
        }

        /// <summary>
        /// Picks up only part of a stack of items from one of the player's bags or other containers. Has no effect if the given amount is greater than the number of items stacked in the slot.
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <param name="amount">Number of items from the stack to pick up (number)</param>
        /// <example>SplitContainerItem(container,slot,amount)</example>
        internal static string[] SplitContainerItem(string container, string slot, int amount)
        {
            return Run("SplitContainerItem({0},{1},{2})", container, slot, amount);
        }

        /// <summary>
        /// Picks up only part of a stack of items from the guild bank. Has no effect if the given amount is greater than the number of items stacked in the slot.
        /// </summary>
        /// <param name="tab">Index of a guild bank tab (number)</param>
        /// <param name="slot">Index of an item slot in the guild bank tab (number)</param>
        /// <param name="amount">Number of items from the stack to pick up (number)</param>
        /// <example>SplitGuildBankItem(tab,slot,amount)</example>
        internal static string[] SplitGuildBankItem(int tab, int slot, int amount)
        {
            return Run("SplitGuildBankItem({0},{1},{2})", tab, slot, amount);
        }

        /// <summary>
        /// Returns the square root of a number. Alias for the standard library function math.sqrt.
        /// </summary>
        /// <param name="x">A number (number)</param>
        /// <example>root=sqrt(x)</example>
        internal static string[] sqrt(int x)
        {
            return Run("sqrt({0})", x); //root
        }

        /// <summary>
        /// Puts the player's current pet into the stables
        /// </summary>
        /// <example>StablePet()</example>
        internal static string[] StablePet()
        {
            return Run("StablePet()");
        }

        /// <summary>
        /// Begins auto-attack against a specified target, or the current target
        /// </summary>
        /// <param name="unit">A unit to attack (string, unitID)</param>
        /// <param name="name">The name of a unit to attack (string)</param>
        /// <example>StartAttack("unit")orStartAttack("name")</example>
        internal static void StartAttack(string identifier = "")
        {
            Run("StartAttack(\"{0}\")", identifier);
        }

        /// <summary>
        /// Creates an auction for the item currently in the "auction item" slot. Has no effect unless an item has been placed in the Create Auction UI's "auction item" slot (see ClickAuctionSellItemButton()). 
        /// </summary>
        /// <param name="minBid">Minimum bid for the auction (in copper) (number)</param>
        /// <param name="buyoutPrice">Buyout price for the auction (in copper) (number)</param>
        /// <param name="runTime">Run time until the auction expires (in minutes, but only values listed below are allowed) (number) 720 - 12 hours1440 - 24 hours2880 - 48 hours</param>
        /// <example>StartAuction(minBid,buyoutPrice,runTime)</example>
        internal static string[] StartAuction(int minBid, int buyoutPrice, int runTime)
        {
            return Run("StartAuction({0},{1},{2})", minBid, buyoutPrice, runTime);
        }

        /// <summary>
        /// Challenges another player to a duel
        /// </summary>
        /// <param name="unit">A unit to target (string, unitID)</param>
        /// <param name="name">Name of a unit to target (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>
        /// <example>StartDuel("unit")orStartDuel("name"[,exactMatch])</example>
        internal static string[] StartDuel(string unit, string name, string exactMatch)
        {
            return Run("StartDuel(\"{0}\")orStartDuel(\"{1}\"[,{2}])", unit, name, exactMatch);
        }

        /// <summary>
        /// Stops auto-attack if active
        /// </summary>
        /// <example>StopAttack()</example>
        internal static string[] StopAttack()
        {
            return Run("StopAttack()");
        }

        /// <summary>
        /// Exits a currently playing in-game cinematic. Applies to in-game-engine cinematics (such as when logging into a new character for the first time), not prerecorded movies.
        /// </summary>
        /// <example>StopCinematic()</example>
        internal static string[] StopCinematic()
        {
            return Run("StopCinematic()");
        }

        /// <summary>
        /// Stops execution of a running macro
        /// </summary>
        /// <example>StopMacro()</example>
        internal static string[] StopMacro()
        {
            return Run("StopMacro()");
        }

        /// <summary>
        /// Stops currently playing in-game music
        /// </summary>
        /// <example>StopMusic()</example>
        internal static string[] StopMusic()
        {
            return Run("StopMusic()");
        }

        /// <summary>
        /// Cancels repetition of a trade skill recipe. If a recipe is currently being performed, it will continue, but further scheduled repetitions will be canceled.
        /// </summary>
        /// <example>StopTradeSkillRepeat()</example>
        internal static string[] StopTradeSkillRepeat()
        {
            return Run("StopTradeSkillRepeat()");
        }

        /// <summary>
        /// Begins moving the player character sideways to his or her left
        /// </summary>
        /// <example>StrafeLeftStart()</example>
        internal static string[] StrafeLeftStart()
        {
            return Run("StrafeLeftStart(0)");
        }

        /// <summary>
        /// Ends movement initiated by StrafeLeftStart
        /// </summary>
        /// <example>StrafeLeftStop()</example>
        internal static string[] StrafeLeftStop()
        {
            return Run("StrafeLeftStop(0)");
        }

        /// <summary>
        /// Begins moving the player character sideways to his or her right
        /// </summary>
        /// <example>StrafeRightStart()</example>
        internal static string[] StrafeRightStart()
        {
            return Run("StrafeRightStart(0)");
        }

        /// <summary>
        /// Ends movement initiated by StrafeRightStart
        /// </summary>
        /// <example>StrafeRightStop()</example>
        internal static string[] StrafeRightStop()
        {
            return Run("StrafeRightStop(0)");
        }

        /// <summary>
        /// Returns the numeric code for one or more characters in a string. Alias for the standard library function string.byte.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <param name="firstChar">Position of a character in the string (can be negative to count backwards from the end of the string); defaults to 1 if omitted (number)</param>
        /// <param name="lastChar">Position of a later character in the string (can be negative to count backwards from the end of the string); defaults to firstChar if omitted (number)</param>
        /// <example>value,...=strbyte("s"[,firstChar[,lastChar]])</example>
        internal static string[] strbyte(string s, int firstChar, int lastChar)
        {
            return Run("{0}trbyte(\"{0}\"[,fir{0}tChar[,la{0}tChar]])", s, firstChar, lastChar); //value,...
        }

        /// <summary>
        /// Returns the character(s) for one or more numeric codes. Alias for the standard library function string.char.
        /// </summary>
        /// <param name="n">An integer (number)</param>
        /// <param name="...">Additional integers (number)</param>
        /// <example>s=strchar(n[,...])</example>
        internal static string[] strchar(int n, int ellips)
        {
            return Run("strchar({0}[,{1}])", n, ellips); //s
        }

        /// <summary>
        /// Joins a list of strings (with no separator). Equivalent to strjoin("", ellips). If no strings are provided, returns the empty string ("").
        /// </summary>
        /// <param name="...">A list of strings to concatenate (string)</param>
        /// <example>result=strconcat("...")</example>
        internal static string[] strconcat(string ellips)
        {
            return Run("strconcat(\"{0}\")", ellips); //result
        }

        /// <summary>
        /// Returns information about matches for a pattern in a string. Alias for the standard library function string.find.Returns nil if no matches are found.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <param name="pattern">A regular expression pattern (string, pattern)</param>
        /// <param name="init">Initial position in the string s at which to begin the search; defaults to 1 if omitted (number)</param>
        /// <param name="plain">True to perform a simple substring search (i.e. considering pattern only as a literal string, not a regular expression); false or omitted otherwise (boolean)</param>
        /// <example>start,end,...=strfind("s","pattern"[,init[,plain]])</example>
        internal static string[] strfind(string s, string pattern, int init, string plain)
        {
            return Run("{0}trfind(\"{0}\",\"{1}\"[,{2}[,{3}]])", s, pattern, init, plain); //{0}tart,end,...
        }

        /// <summary>
        /// Joins a list of strings together with a given separator. If given a list of strings not already in a table, this function can be used instead of table.concat for better performance.Also available as string.join (though not provided by the Lua standard library).
        /// </summary>
        /// <param name="sep">A separator to insert between joined strings (string)</param>
        /// <param name="...">A list of strings to be joined together (list)</param>
        /// <example>text=strjoin("sep",...)</example>
        internal static string[] strjoin(string sep, string ellips)
        {
            return Run("strjoin(\"{0}\",{1})", sep, ellips); //text
        }

        /// <summary>
        /// Returns the number of characters in a string. Alias for the standard library function string.len.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <example>length=strlen("s")</example>
        internal static string[] strlen(string s)
        {
            return Run("{0}trlen(\"{0}\")", s); //length
        }

        /// <summary>
        /// Returns the length of a string, taking UTF-8 multi-byte characters into account
        /// </summary>
        /// <param name="string">The string to query. (string)</param>
        /// <example>length=strlenutf8("string")</example>
        internal static string[] strlenutf8(string argString)
        {
            return Run("strlenutf8(\"{0}\")", argString); //length
        }

        /// <summary>
        /// Returns a copy of a string with all uppercase letters converted to lowercase. Alias for the standard library function string.lower
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <example>lowerCase=strlower("s")</example>
        internal static string[] strlower(string s)
        {
            return Run("{0}trlower(\"{0}\")", s); //lowerCa{0}e
        }

        /// <summary>
        /// Returns the matches for a for a pattern in a string. Alias for the standard library function string.match.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <param name="pattern">A regular expression pattern (string, pattern)</param>
        /// <example>match,...=strmatch("s","pattern")</example>
        internal static string[] strmatch(string s, string pattern)
        {
            return Run("{0}trmatch(\"{0}\",\"{1}\")", s, pattern); //match,...
        }

        /// <summary>
        /// Returns a string produced by a number of repetitions of another string. Alias for the standard library function string.rep.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <param name="n">A number (number)</param>
        /// <example>repeated=strrep("s",n)</example>
        internal static string[] strrep(string s, int n)
        {
            return Run("{0}trrep(\"{0}\",{1})", s, n); //repeated
        }

        /// <summary>
        /// Fast simple substring substitution. Matches the semantics of string.gsub, but only finds and replaces specific substrings rather than using more powerful and more computationally expensive regular expression matching. Thus, this function can be used in place of string.gsub in performance-critical situations where only simple matching is needed.Also available as string.replace (though not provided by the Lua standard library).
        /// </summary>
        /// <param name=text>Text to be altered (string)</param>
        /// <param name="pattern">A substring to be located within the source text (string)</param>
        /// <param name="replacement">Text to be inserted in place of the found pattern (string)</param>
        /// <param name="count">Maximum number of replacements to be made (string)</param>
        /// <example>newText,count=strreplace(text,"pattern","replacement","count")</example>
        internal static string[] strreplace(string text, string pattern, string replacement, string count)
        {
            return Run("strreplace(\"{0}\",\"{1}\",\"{2}\",\"{3}\")", text, pattern, replacement, count); //newText,{3}
        }

        /// <summary>
        /// Returns the reverse of a string. Alias for the standard library function string.reverse.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <example>s=strrev("s")</example>
        internal static string[] strrev(string s)
        {
            return Run("{0}trrev(\"{0}\")", s); //{0}
        }

        /// <summary>
        /// Splits a string based on another seperator string. Also available as string.split (though not provided by the Lua standard library).
        /// </summary>
        /// <param name="sep">The seperator string to use (string)</param>
        /// <param name=text>The text to split (string)</param>
        /// <param name="limit">The maximum number of pieces to split the string into (number)</param>
        /// <example>...=strsplit("sep",text,limit)</example>
        internal static string[] strsplit(string sep, string text, int limit)
        {
            return Run("strsplit(\"{0}\",\"{1}\",{2})", sep, text, limit); //...
        }

        /// <summary>
        /// Returns a substring of a string. Alias for the standard library function string.sub.
        /// </summary>
        /// <param name="s">A string (string)</param>
        /// <param name="firstChar">Position of a character in the string (can be negative to count backwards from the end of the string) (number)</param>
        /// <param name="lastChar">Position of a later character in the string (can be negative to count backwards from the end of the string); defaults to -1 if omitted (number)</param>
        /// <example>s=strsub("s",firstChar[,lastChar])</example>
        internal static string[] strsub(string s, int firstChar, int lastChar)
        {
            return Run("{0}tr{0}ub(\"{0}\",fir{0}tChar[,la{0}tChar])", s, firstChar, lastChar); //{0}
        }

        /// <summary>
        /// Trims leading and trailing characters (whitespace by default) from a string. Also available as string.trim (though not provided by the Lua standard library).
        /// </summary>
        /// <param name="str">A string to trim (string)</param>
        /// <param name="trimChars">A string listing the characters to be trimmed (e.g. "[]{}()" to trim leading and trailing brackets, braces, and parentheses); if nil or omitted, whitespace characters (space, tab, newline, etc) are trimmed (string)</param>
        /// <example>text=strtrim("str"[,"trimChars"])</example>
        internal static string[] strtrim(string str, string trimChars)
        {
            return Run("{0}trim(\"{0}\"[,\"{1}\"])", str, trimChars); //text
        }

        /// <summary>
        /// Returns a copy of a string with all lowercase letters converted to uppercase. Alias for the standard library function string.upper.
        /// </summary>
        /// <param name="str">A string (string)</param>
        /// <example>lowerCase=strupper("str")</example>
        internal static string[] strupper(string str)
        {
            return Run("{0}upper(\"{0}\")", str); //lowerCase
        }

        /// <summary>
        /// Uses the auto-unstuck feature
        /// </summary>
        /// <example>Stuck()</example>
        internal static string[] Stuck()
        {
            return Run("Stuck()");
        }

        /// <summary>
        /// Summons a unit whose account is linked to the player's via the Recruit-a-Friend program. Does not instantly teleport the unit -- calling this function begins casting the Summon Friend "spell", and once it completes the unit is prompted to accept or decline the summon.
        /// </summary>
        /// <param name="name">Exact name of a player to summon (only applies to units in the player's party or raid) (string)</param>
        /// <param name="unit">A unit to summon (string, unitID)</param>
        /// <example>SummonFriend("name")orSummonFriend("unit")</example>
        internal static string[] SummonFriend(string name, string unit)
        {
            return Run("SummonFriend(\"{0}\")orSummonFriend(\"{1}\")", name, unit);
        }

        /// <summary>
        /// Swaps two raid members between subgroups in the raid. Only has effect if the player is the raid leader or a raid assistant. To move a member into a non-full subgroup without switching places with another member, see SetRaidSubgroup().
        /// </summary>
        /// <param name="index1">Index of the first raid member (between 1 and GetNumRaidMembers(); matches the numeric part of the unit's raidunitID, e.g. 21 for raid21 (number)</param>
        /// <param name="index2">Index of the other raid member (number)</param>
        /// <example>SwapRaidSubgroup(index1,index2)</example>
        internal static string[] SwapRaidSubgroup(int index1, int index2)
        {
            return Run("SwapRaidSubgroup({0},{1})", index1, index2);
        }

        /// <summary>
        /// Retrieves an item attachment from a message in the player's inbox (accepting COD charges if applicable)
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <param name="attachmentIndex">Index of an attachment to the message (between 1 and select(8,GetInboxHeaderInfo(mailID))) (number)</param>
        /// <example>TakeInboxItem(mailID,attachmentIndex)</example>
        internal static string[] TakeInboxItem(int mailID, int attachmentIndex)
        {
            return Run("TakeInboxItem({0},{1})", mailID, attachmentIndex);
        }

        /// <summary>
        /// Retrieves any money attached to a message in the player's inbox
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>TakeInboxMoney(mailID)</example>
        internal static string[] TakeInboxMoney(int mailID)
        {
            return Run("TakeInboxMoney({0})", mailID);
        }

        /// <summary>
        /// Requests a copy of a message's body text as an item. The text of an in-game mail can be retrieved as a readable "Plain Letter" item to store in the player's bags; this function sends a request to the server for this item, causing the standard inventory events to fire as the item is placed into the player's inventory.
        /// </summary>
        /// <param name="mailID">Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number)</param>
        /// <example>TakeInboxTextItem(mailID)</example>
        internal static string[] TakeInboxTextItem(int mailID)
        {
            return Run("TakeInboxTextItem({0})", mailID);
        }

        /// <summary>
        /// Embarks on a taxi flight to a given destination. Only has effect while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="index">Index of a flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>TakeTaxiNode(index)</example>
        internal static string[] TakeTaxiNode(int index)
        {
            return Run("TakeTaxiNode({0})", index);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TargetDirectionEnemy()</example>
        internal static string[] TargetDirectionEnemy()
        {
            return Run("TargetDirectionEnemy()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TargetDirectionFinished()</example>
        internal static string[] TargetDirectionFinished()
        {
            return Run("TargetDirectionFinished()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TargetDirectionFriend()</example>
        internal static string[] TargetDirectionFriend()
        {
            return Run("TargetDirectionFriend()");
        }

        /// <summary>
        /// Targets the most recently targeted enemy unit
        /// </summary>
        /// <example>TargetLastEnemy()</example>
        internal static string[] TargetLastEnemy()
        {
            return Run("TargetLastEnemy()");
        }

        /// <summary>
        /// Targets the most recently targeted friendly unit
        /// </summary>
        /// <example>TargetLastFriend()</example>
        internal static string[] TargetLastFriend()
        {
            return Run("TargetLastFriend()");
        }

        /// <summary>
        /// Targets the most recently targeted unit
        /// </summary>
        /// <example>TargetLastTarget()</example>
        internal static string[] TargetLastTarget()
        {
            return Run("TargetLastTarget()");
        }

        /// <summary>
        /// Cycles targets through nearest units regardless of reaction/affiliation
        /// </summary>
        /// <param name="backward">Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean)</param>
        /// <example>TargetNearest([backward])</example>
        internal static string[] TargetNearest(string backward)
        {
            return Run("TargetNearest([{0}])", backward);
        }

        /// <summary>
        /// Cycles your target through the nearest enemy units. This function can only be called once per hardware event.
        /// </summary>
        /// <param name="backward">Reverses the direction of the cycling if true (e.g. TAB vs. SHIFT-TAB) (boolean)</param>
        /// <example>TargetNearestEnemy(backward)</example>
        internal static string[] TargetNearestEnemy(string backward)
        {
            return Run("TargetNearestEnemy({0})", backward);
        }

        /// <summary>
        /// Cycles targets through nearby enemy player units
        /// </summary>
        /// <param name="backward">Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean)</param>
        /// <example>TargetNearestEnemyPlayer(backward)</example>
        internal static string[] TargetNearestEnemyPlayer(string backward)
        {
            return Run("TargetNearestEnemyPlayer({0})", backward);
        }

        /// <summary>
        /// Cycles targets through nearby friendly units
        /// </summary>
        /// <param name="backward">Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean)</param>
        /// <example>TargetNearestFriend(backward)</example>
        internal static string[] TargetNearestFriend(string backward)
        {
            return Run("TargetNearestFriend({0})", backward);
        }

        /// <summary>
        /// Cycles targets through nearby friendly player units
        /// </summary>
        /// <param name="backward">Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean)</param>
        /// <example>TargetNearestFriendPlayer(backward)</example>
        internal static string[] TargetNearestFriendPlayer(string backward)
        {
            return Run("TargetNearestFriendPlayer({0})", backward);
        }

        /// <summary>
        /// Cycles targets through nearby party members
        /// </summary>
        /// <param name="backward">Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean)</param>
        /// <example>TargetNearestPartyMember(backward)</example>
        internal static string[] TargetNearestPartyMember(string backward)
        {
            return Run("TargetNearestPartyMember({0})", backward);
        }

        /// <summary>
        /// Cycles targets through nearby raid members
        /// </summary>
        /// <param name="backward">Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean)</param>
        /// <example>TargetNearestRaidMember(backward)</example>
        internal static string[] TargetNearestRaidMember(string backward)
        {
            return Run("TargetNearestRaidMember({0})", backward);
        }

        /// <summary>
        /// Targets one of the player's totems (or a Death Knight's ghoul). Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).
        /// </summary>
        /// <param name="slot">Which totem to target (number) 1 - Fire (or Death Knight's ghoul)2 - Earth3 - Water4 - Air</param>
        /// <example>TargetTotem(slot)</example>
        internal static string[] TargetTotem(int slot)
        {
            return Run("TargetTotem({0})", slot);
        }

        /// <summary>
        /// Targets a unit. Passing nil is equivalent to calling ClearTarget()).
        /// </summary>
        /// <param name="unit">A unit to target (string, unitID) OR Name of a unit to target (string)</param>
        /// <param name="exactMatch">True to check only units whose name exactly matches the name given; false to allow partial matches (boolean)</param>

        /// <example>TargetUnit("unit") or TargetUnit("name"[,exactMatch])</example>
        internal static string[] TargetUnit(string unit, bool exactMatch = false)
        {
            return Run("TargetUnit(\"{0}\",{1})", unit, exactMatch);

        }

        /// <summary>
        /// Returns the horizontal coordinate of a taxi flight's destination node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="source">Index of the source flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <param name="dest">Index of the destination flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>dX=TaxiGetDestX(source,dest)</example>
        internal static string[] TaxiGetDestX(int source, int dest)
        {
            return Run("TaxiGetDestX({0},{1})", source, dest); //dX
        }

        /// <summary>
        /// Returns the vertical coordinate of a taxi flight's destination node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="source">Index of the source flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <param name="dest">Index of the destination flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>dY=TaxiGetDestY(source,dest)</example>
        internal static string[] TaxiGetDestY(int source, int dest)
        {
            return Run("TaxiGetDestY({0},{1})", source, dest); //dY
        }

        /// <summary>
        /// Returns the horizontal coordinate of a taxi flight's source node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="source">Index of the source flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <param name="dest">Index of the destination flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>sX=TaxiGetSrcX(source,dest)</example>
        internal static string[] TaxiGetSrcX(int source, int dest)
        {
            return Run("TaxiGetSrcX({0},{1})", source, dest); //sX
        }

        /// <summary>
        /// Returns the vertical coordinate of a taxi flight's source node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="source">Index of the source flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <param name="dest">Index of the destination flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>sY=TaxiGetSrcY(source,dest)</example>
        internal static string[] TaxiGetSrcY(int source, int dest)
        {
            return Run("TaxiGetSrcY({0},{1})", source, dest); //sY
        }

        /// <summary>
        /// Returns the cost to fly to a given taxi node. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="index">Index of a flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>cost=TaxiNodeCost(index)</example>
        internal static string[] TaxiNodeCost(int index)
        {
            return Run("TaxiNodeCost({0})", index); //cost
        }

        /// <summary>
        /// Returns the type of a flight pont. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="index">Index of a flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>type=TaxiNodeGetType(index)</example>
        internal static string[] TaxiNodeGetType(int index)
        {
            return Run("TaxiNodeGetType({0})", index); //type
        }

        /// <summary>
        /// Returns the name of a flight point. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="index">Index of a flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>name=TaxiNodeName(index)</example>
        internal static string TaxiNodeName(int index)
        {
            return Run("TaxiNodeName({0})", index)[0]; //name
        }

        /// <summary>
        /// Returns the position of a flight point on the taxi map. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).
        /// </summary>
        /// <param name="index">Index of a flight point (between 1 and NumTaxiNodes()) (number)</param>
        /// <example>x,y=TaxiNodePosition(index)</example>
        internal static string[] TaxiNodePosition(int index)
        {
            return Run("TaxiNodePosition({0})", index); //x,y
        }

        /// <summary>
        /// Sets the "current" flight path node. Used in the default UI when mousing over a node; tells the client to compute the route paths involving the node (see TaxiGetSrcX() et al).
        /// </summary>
        /// <param name="slot">The internal static index of a flight path node (number)</param>
        /// <example>TaxiNodeSetCurrent(slot)</example>
        internal static string[] TaxiNodeSetCurrent(int slot)
        {
            return Run("TaxiNodeSetCurrent({0})", slot);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TeleportToDebugObject()</example>
        internal static string[] TeleportToDebugObject()
        {
            return Run("TeleportToDebugObject()");
        }

        /// <summary>
        /// Returns the numeric time value for a described date/time (or the current time). Alias for the standard library function os.time.According to the Lua manual, the returned value may vary across different systems; however, the Lua libraries included with current Wow clients on both Mac and Windows share the same implementation.For higher-precision time measurements not convertible to a date, see GetTime().
        /// </summary>
        /// <param name="timeDesc">Table describing a date and time, as returned by date("*t"); if omitted, uses the current time (table)</param>
        /// <example>t=time([timeDesc])</example>
        internal static string[] time(string timeDesc)
        {
            return Run("time([{0}])", timeDesc); //t
        }

        /// <summary>
        /// Inserts a value into a table. Alias for the standard library function table.insert.
        /// </summary>
        /// <param name="table">A table (table)</param>
        /// <param name="position">Index in the table at which to insert the new value; if omitted, Defaults to #table + 1 (number)</param>
        /// <param name="value">Any value (value)</param>
        /// <example>tinsert(table[,position]value)</example>
        internal static string[] tinsert(string table, int position, string value)
        {
            return Run("tinsert({0}[,{1}]{2})", table, position, value);
        }

        /// <summary>
        /// Starts or stops the player character automatically moving forward
        /// </summary>
        /// <example>ToggleAutoRun()</example>
        internal static string[] ToggleAutoRun()
        {
            return Run("ToggleAutoRun()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ToggleCollision()</example>
        internal static string[] ToggleCollision()
        {
            return Run("ToggleCollision()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ToggleCollisionDisplay()</example>
        internal static string[] ToggleCollisionDisplay()
        {
            return Run("ToggleCollisionDisplay()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TogglePerformanceDisplay()</example>
        internal static string[] TogglePerformanceDisplay()
        {
            return Run("TogglePerformanceDisplay()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TogglePerformancePause()</example>
        internal static string[] TogglePerformancePause()
        {
            return Run("TogglePerformancePause()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TogglePerformanceValues()</example>
        internal static string[] TogglePerformanceValues()
        {
            return Run("TogglePerformanceValues()");
        }

        /// <summary>
        /// Turns autocast on or off for a pet action. Turns autocast on if not autocasting and vice versa.
        /// </summary>
        /// <param name="index">Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number)</param>
        /// <example>TogglePetAutocast(index)</example>
        internal static string[] TogglePetAutocast(int index)
        {
            return Run("TogglePetAutocast({0})", index);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TogglePlayerBounds()</example>
        internal static string[] TogglePlayerBounds()
        {
            return Run("TogglePlayerBounds()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TogglePortals()</example>
        internal static string[] TogglePortals()
        {
            return Run("TogglePortals()");
        }

        /// <summary>
        /// Switches the player's desired PvP status. If PvP is currently disabled for the player, it becomes enabled immediately. If PvP is enabled, it will become disabled after five minutes of no PvP activity.
        /// </summary>
        /// <example>TogglePVP()</example>
        internal static string[] TogglePVP()
        {
            return Run("TogglePVP()");
        }

        /// <summary>
        /// Switches the character's ground movement mode between running and walking. If running, switches to walking, and vice versa. Has no effect on swimming or flying speed.
        /// </summary>
        /// <example>ToggleRun()</example>
        internal static string[] ToggleRun()
        {
            return Run("ToggleRun()");
        }

        /// <summary>
        /// Sheaths or unsheaths the player character's hand-held items. Calling repeatedly will cause the player character to draw his or her melee weapons, followed by his or her range weapon, followed by hiding all weapons.
        /// </summary>
        /// <example>ToggleSheath()</example>
        internal static string[] ToggleSheath()
        {
            return Run("ToggleSheath()");
        }

        /// <summary>
        /// Enables or disables automatic casting of a spell. Generally only pet spells can be autocast.
        /// </summary>
        /// <param name="index">Index of a spell in the spellbook (number, spellbookID)</param>
        /// <param name="bookType">Type of spellbook (string) pet - The pet's spellbookspell - The player's spellbook</param>
        /// <param name="name">Name of a spell (string)</param>
        /// <example>ToggleSpellAutocast(index,"bookType")orToggleSpellAutocast("name")</example>
        internal static string[] ToggleSpellAutocast(string index, string bookType, string name)
        {
            return Run("ToggleSpellAutocast({0},\"{1}\")orToggleSpellAutocast(\"{2}\")", index, bookType, name);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>ToggleTris()</example>
        internal static string[] ToggleTris()
        {
            return Run("ToggleTris()");
        }

        /// <summary>
        /// Returns the numeric value of a string
        /// </summary>
        /// <param name="x">A string or number (value)</param>
        /// <param name="base">Base in which to interpret the numeral (integer between 2 and 36); letters 'A-Z' can be used to denote place values 10 or above in bases greater than 10; defaults to 10 if omitted (number)</param>
        /// <example>numValue=tonumber(x[,base])</example>
        internal static string[] tonumber(string x, int Base)
        {
            return Run("tonumber({0}[,{1}])", x, Base); //numValue
        }

        /// <summary>
        /// Returns a string representation of a value
        /// </summary>
        /// <param name="value">Any value (value)</param>
        /// <example>stringValue=tostring(value)</example>
        internal static string[] tostring(string value)
        {
            return Run("tostring({0})", value); //stringValue
        }

        /// <summary>
        /// Filters the trade skill listing by whether the player currently has enough reagents for each recipe
        /// </summary>
        /// <param name="filter">True to filter the recipe listing to show only recipes for which the player currently has enough reagents; false to show all recipes (boolean)</param>
        /// <example>TradeSkillOnlyShowMakeable(filter)</example>
        internal static string[] TradeSkillOnlyShowMakeable(string filter)
        {
            return Run("TradeSkillOnlyShowMakeable({0})", filter);
        }

        /// <summary>
        /// Filters the trade skill listing by whether the player can gain skill ranks from each recipe. The default UI does not provide controls for this filter, but it can nonetheless be used to alter the contents of the trade skill recipe listing.
        /// </summary>
        /// <param name="filter">True to filter the recipe listing to show only recipes which the player can gain skill ranks by performing; false to show all recipes (boolean)</param>
        /// <example>TradeSkillOnlyShowSkillUps(filter)</example>
        internal static string[] TradeSkillOnlyShowSkillUps(string filter)
        {
            return Run("TradeSkillOnlyShowSkillUps({0})", filter);
        }

        /// <summary>
        /// Removes an element from a table. Alias for the standard library function table.remove.
        /// </summary>
        /// <param name="table">A table (table)</param>
        /// <param name="position">Index in the table from which to remove the value; if omitted, Defaults to #table (number)</param>
        /// <example>tremove(table[,position])</example>
        internal static string[] tremove(string table, int position)
        {
            return Run("tremove({0}[,{1}])", table, position);
        }

        /// <summary>
        /// Turns in a petition creating an arena team
        /// </summary>
        /// <param name="teamSize">Size of arena team to create (number) 2 - 2v23 - 3v35 - 5v5</param>
        /// <param name="bg_red">Red component of the color value for the team banner's background (number)</param>
        /// <param name="bg_green">Green component of the color value for the team banner's background (number)</param>
        /// <param name="bg_blue">Blue component of the color value for the team banner's background (number)</param>
        /// <param name="emblem">Index of the team's emblem graphic; full path to the emblem texture can be found using the format "Interface\PVPFrame\Icons\PVP-Banner-Emblem-"..emblem (number)</param>
        /// <param name="emblem_red">Red component of the color value for the team banner's emblem (number)</param>
        /// <param name="emblem_green">Green component of the color value for the team banner's emblem (number)</param>
        /// <param name="emblem_blue">Blue component of the color value for the team banner's emblem (number)</param>
        /// <param name="border">Index of the team's border graphic; full path to the border texture can be found by using the format "Interface\PVPFrame\PVP-Banner-"..teamSize.."-Border-"..border (number)</param>
        /// <param name="border_red">Red component of the color value for the team banner's border (number)</param>
        /// <param name="border_green">Green component of the color value for the team banner's border (number)</param>
        /// <param name="border_blue">Blue component of the color value for the team banner's border (number)</param>
        /// <example>TurnInArenaPetition(teamSize,bg_red,bg_green,bg_blue,emblem,emblem_red,emblem_green,emblem_blue,border,border_red,border_green,border_blue)</example>
        internal static string[] TurnInArenaPetition(int teamSize, int bg_red, int bg_green, int bg_blue, int emblem, int emblem_red, int emblem_green, int emblem_blue, int border, int border_red, int border_green, int border_blue)
        {
            return Run("TurnInArenaPetition({0},{1},{2},{3},{4},{4}_red,{4}_green,{4}_blue,{8},{8}_red,{8}_green,{8}_blue)", teamSize, bg_red, bg_green, bg_blue, emblem, emblem_red, emblem_green, emblem_blue, border, border_red, border_green, border_blue);
        }

        /// <summary>
        /// Turns in a completed guild charter. Usable if the player is interacting with a guild registrar (i.e. between the GUILD_REGISTRAR_SHOW and GUILD_REGISTRAR_CLOSED events).
        /// </summary>
        /// <example>TurnInGuildCharter()</example>
        internal static string[] TurnInGuildCharter()
        {
            return Run("TurnInGuildCharter()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>TurnInPetition()</example>
        internal static string[] TurnInPetition()
        {
            return Run("TurnInPetition()");
        }

        /// <summary>
        /// Begins turning the player character to the left. "Left" here is relative to the player's facing; i.e. if looking down at the character from above, he or she turns counter-clockwise.Used by the TURNLEFT binding.
        /// </summary>
        /// <example>TurnLeftStart()</example>
        internal static string[] TurnLeftStart()
        {
            return Run("TurnLeftStart()");
        }

        /// <summary>
        /// Ends movement initiated by TurnLeftStart
        /// </summary>
        /// <example>TurnLeftStop()</example>
        internal static string[] TurnLeftStop()
        {
            return Run("TurnLeftStop()");
        }

        /// <summary>
        /// Begins character steering or interaction (equivalent to right-clicking in the 3-D world). After calling this function (i.e. while the right mouse button is held), cursor movement rotates (or steers) the player character, altering yaw (facing) and/or pitch (vertical movement angle) as well as camera position. Final results vary by context and are determined when calling TurnOrActionStop() (i.e. releasing the right mouse button). Used by the TURNORACTION binding (not customizable in the default UI), which is bound to the right mouse button by default.
        /// </summary>
        /// <example>TurnOrActionStart()</example>
        internal static string[] TurnOrActionStart()
        {
            return Run("TurnOrActionStart()");
        }

        /// <summary>
        /// Ends action initiated by TurnOrActionStart. After calling this function (i.e. releasing the right mouse button), character steering stops and normal cursor movement resumes. If the cursor has not moved significantly since calling TurnOrActionStart() (i.e. pressing the right mouse button), results vary by context:if the cursor is over a nearby unit, interacts with (or attacks) that unit, making it the player's target.if the cursor is over a nearby interactable world object (e.g. mailbox, treasure chest, or quest object), interacts with (or uses) that object.if the cursor is over a faraway unit or world object and the "Click-to-Move" option is enabled (i.e. the "autointeract" CVar is "1"), attempts to move the player character to the unit/object and interact with it once nearby.if the cursor is over a faraway world object and the "Click-to-Move" option is disabled, fires a UI_ERROR_MESSAGE event indicating the player is too far away to interact with the object.otherwise, does nothing.Used by the TURNORACTION binding (not customizable in the default UI), which is bound to the right mouse button by default.
        /// </summary>
        /// <example>TurnOrActionStop()</example>
        internal static string[] TurnOrActionStop()
        {
            return Run("TurnOrActionStop()");
        }

        /// <summary>
        /// Begins turning the player character to the right. "Right" here is relative to the player's facing; i.e. if looking down at the character from above, he or she turns clockwise.Used by the TURNRIGHT binding.
        /// </summary>
        /// <example>TurnRightStart()</example>
        internal static string[] TurnRightStart()
        {
            return Run("TurnRightStart()");
        }

        /// <summary>
        /// Ends movement initiated by TurnRightStart
        /// </summary>
        /// <example>TurnRightStop()</example>
        internal static string[] TurnRightStop()
        {
            return Run("TurnRightStop()");
        }

        /// <summary>
        /// Returns a string describing the data type of a value
        /// </summary>
        /// <param name="v">Any value (value)</param>
        /// <example>typeString=type(v)</example>
        internal static string[] type(string v)
        {
            return Run("type({0})", v); //typeString
        }

        /// <summary>
        /// Removes a character from the player's party or raid. Only works if the player is the party leader, raid leader, or raid assistant.
        /// </summary>
        /// <param name="name">Name of a character to uninvite (string)</param>
        /// <example>UninviteUnit("name")</example>
        internal static string[] UninviteUnit(string name)
        {
            return Run("UninviteUnit(\"{0}\")", name);
        }

        /// <summary>
        /// Returns whether a unit is currently in combat
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>inCombat=UnitAffectingCombat("unit")</example>
        internal static string[] UnitAffectingCombat(string unit)
        {
            return Run("UnitAffectingCombat(\"{0}\")", unit); //inCombat
        }

        /// <summary>
        /// Returns the player's or pet's armor value
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>base,effectiveArmor,armor,posBuff,negBuff=UnitArmor("unit")</example>
        internal static string[] UnitArmor(string unit)
        {
            return Run("UnitArmor(\"{0}\")", unit); //base,effectiveArmor,armor,posBuff,negBuff
        }

        /// <summary>
        /// Returns information about the player's or pet's weapon skill
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>mainHandAttackBase,mainHandAttackMod,offHandHandAttackBase,offHandAttackMod=UnitAttackBothHands("unit")</example>
        internal static string[] UnitAttackBothHands(string unit)
        {
            return Run("UnitAttackBothHands(\"{0}\")", unit); //mainHandAttackBase,mainHandAttackMod,offHandHandAttackBase,offHandAttackMod
        }

        /// <summary>
        /// Returns the player's or pet's melee attack power
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>base,posBuff,negBuff=UnitAttackPower("unit")</example>
        internal static string[] UnitAttackPower(string unit)
        {
            return Run("UnitAttackPower(\"{0}\")", unit); //base,posBuff,negBuff
        }

        /// <summary>
        /// Returns information about the player's or pet's melee attack speed
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>speed,offhandSpeed=UnitAttackSpeed("unit")</example>
        internal static string[] UnitAttackSpeed(string unit)
        {
            return Run("UnitAttackSpeed(\"{0}\")", unit); //speed,offhandSpeed
        }

        /// <summary>
        /// Returns information about buffs/debuffs on a unit
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="index">Index of an aura to query (number)</param>
        /// <param name="name">Name of an aura to query (string)</param>
        /// <param name="rank">Secondary text of an aura to query (often a rank; e.g. "Rank 7") (string)</param>
        /// <param name="filter">A list of filters to use separated by the pipe '|' character; e.g. "RAID|PLAYER" will query group buffs cast by the player (string) CANCELABLE - Show auras that can be cancelledHARMFUL - Show debuffs onlyHELPFUL - Show buffs onlyNOT_CANCELABLE - Show auras that cannot be cancelledPLAYER - Show auras the player has castRAID - When used with a HELPFUL filter it will show auras the player can cast on party/raid members (as opposed to self buffs). If used with a HARMFUL filter it will return debuffs the player can cure</param>
        /// <example>name,rank,icon,count,dispelType,duration,expires,caster,isStealable,shouldConsolidate,spellID=UnitAura("unit",index[,"filter"])orUnitAura("unit","name"[,"rank"[,"filter"]])</example>
        internal static string[] UnitAura(string unit, int index, string name, string rank, string filter)
        {
            return Run("UnitAura(\"{0}\",{1}[,\"{4}\"])orUnitAura(\"{0}\",\"{2}\"[,\"{3}\"[,\"{4}\"]])", unit, index, name, rank, filter); //{2},{3},icon,count,dispelType,duration,expires,caster,isStealable,shouldConsolidate,spellID
        }

        /// <summary>
        /// Returns information about a buff on a unit. This function is an alias for UnitAura() with a built-in HELPFUL filter (which cannot be removed or negated with the HARMFUL filter).
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="index">Index of an aura to query (number)</param>
        /// <param name="name">Name of an aura to query (string)</param>
        /// <param name="rank">Secondary text of an aura to query (often a rank; e.g. "Rank 7") (string)</param>
        /// <param name="filter">A list of filters to use separated by the pipe '|' character; e.g. "RAID|PLAYER" will query group buffs cast by the player (string) CANCELABLE - Show auras that can be cancelledNOT_CANCELABLE - Show auras that cannot be cancelledPLAYER - Show auras the player has castRAID - Show auras the player can cast on party/raid members (as opposed to self buffs)</param>
        /// <example>name,rank,icon,count,dispelType,duration,expires,caster,isStealable=UnitBuff("unit",index[,"filter"])orUnitBuff("unit","name"[,"rank"[,"filter"]])</example>
        internal static string[] UnitBuff(string unit, int index, string name, string rank, string filter)
        {
            return Run("UnitBuff(\"{0}\",{1}[,\"{4}\"])orUnitBuff(\"{0}\",\"{2}\"[,\"{3}\"[,\"{4}\"]])", unit, index, name, rank, filter); //{2},{3},icon,count,dispelType,duration,expires,caster,isStealable
        }

        /// <summary>
        /// Returns whether one unit can assist another
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>canAssist=UnitCanAssist("unit","unit")</example>
        internal static string[] UnitCanAssist(string unit, string anotherUnit)
        {
            return Run("UnitCanAssist(\"{0}\",\"{0}\")", unit, anotherUnit); //canAssist
        }

        /// <summary>
        /// Returns whether one unit can attack another
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>canAttack=UnitCanAttack("unit","unit")</example>
        internal static string[] UnitCanAttack(string unit, string anotherUnit)
        {
            return Run("UnitCanAttack(\"{0}\",\"{0}\")", unit, anotherUnit); //canAttack
        }

        /// <summary>
        /// Returns whether two units can cooperate. Two units are considered to be able to cooperate with each other if they are of the same faction and are both players.
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>canCooperate=UnitCanCooperate("unit","unit")</example>
        internal static string[] UnitCanCooperate(string unit, string anotherUnit)
        {
            return Run("UnitCanCooperate(\"{0}\",\"{0}\")", unit, anotherUnit); //canCooperate
        }

        /// <summary>
        /// Returns information about the spell a unit is currently casting
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>name,subText,text,texture,startTime,endTime,isTradeSkill,castID,notInterruptible=UnitCastingInfo("unit")</example>
        internal static string[] UnitCastingInfo(string unit)
        {
            return Run("UnitCastingInfo(\"{0}\")", unit); //name,subText,text,texture,startTime,endTime,isTradeSkill,castID,notInterruptible
        }

        /// <summary>
        /// Returns information about the spell a unit is currently channeling
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>name,subText,text,texture,startTime,endTime,isTradeSkill,notInterruptible=UnitChannelInfo("unit")</example>
        internal static string[] UnitChannelInfo(string unit)
        {
            return Run("UnitChannelInfo(\"{0}\")", unit); //name,subText,text,texture,startTime,endTime,isTradeSkill,notInterruptible
        }

        /// <summary>
        /// Returns the player's number of unused talent points and profession slots
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player (string, unitID)</param>
        /// <example>talentPoints,professionSlots=UnitCharacterPoints("unit")</example>
        internal static dynamic UnitCharacterPoints(string unit)
        {
            var ucp = Run("UnitCharacterPoints(\"{0}\")", unit); //talentPoints,professionSlots
            return new
            {
                talentPoints = Convert.ToInt32(ucp[0]),
                professionSlots = Convert.ToInt32(ucp[1]),
            };
        }

        /// <summary>
        /// Returns a unit's class. The second return (classFileName) can be used for locale-independent verification of a unit's class, or to look up class-related data in various global tables:RAID_CLASS_COLORS provides a standard color for each class (as seen in the default who, guild, calendar, and raid UIs)CLASS_ICON_TCOORDS provides coordinates to locate each class' icon within the "Interface\Glues\CharacterCreate\UI-CharacterCreate-Classes" textureFor non-player units, the first return (class) will be the unit's name; to always get a localized class name regardless of unit type, use UnitClassBase instead.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">Name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>class,classFileName=UnitClass("unit")orUnitClass("name")</example>
        internal static string[] UnitClass(string unit, string name)
        {
            return Run("UnitClass(\"{0}\")orUnitClass(\"{1}\")", unit, name); //class,classFileName
        }

        /// <summary>
        /// Returns a unit's class. The second return (classFileName) can be used for locale-independent verification of a unit's class, or to look up class-related data in various global tables:RAID_CLASS_COLORS provides a standard color for each class (as seen in the default who, guild, calendar, and raid UIs)CLASS_ICON_TCOORDS provides coordinates to locate each class' icon within the "Interface\Glues\CharacterCreate\UI-CharacterCreate-Classes" textureUnlike UnitClass, this function returns the same values for NPCs as for players.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">Name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>class,classFileName=UnitClassBase("unit")orUnitClassBase("name")</example>
        internal static string[] UnitClassBase(string unit, string name)
        {
            return Run("UnitClassBase(\"{0}\")orUnitClassBase(\"{1}\")", unit, name); //class,classFileName
        }

        /// <summary>
        /// Returns a unit's classification
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>classification=UnitClassification("unit")</example>
        internal static string[] UnitClassification(string unit)
        {
            return Run("UnitClassification(\"{0}\")", unit); //classification
        }

        /// <summary>
        /// Returns whether a unit is controlling a vehicle
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>isControlling=UnitControllingVehicle("unit")orUnitControllingVehicle("name")</example>
        internal static string[] UnitControllingVehicle(string unit, string name)
        {
            return Run("UnitControllingVehicle(\"{0}\")orUnitControllingVehicle(\"{1}\")", unit, name); //isControlling
        }

        /// <summary>
        /// Returns the creature family of the unit. Applies only to beasts of the kinds that can be taken as Hunter pets (e.g. cats, worms, and ravagers but not zhevras, talbuks and pterrordax) and demons of the types that can be summoned by Warlocks (e.g. imps and felguards, but not demons that require enslaving such as infernals and doomguards or world demons such as pit lords and armored voidwalkers).
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>family=UnitCreatureFamily("unit")</example>
        internal static string[] UnitCreatureFamily(string unit)
        {
            return Run("UnitCreatureFamily(\"{0}\")", unit); //family
        }

        /// <summary>
        /// Returns the creature type of a unit. Note that some creatures have no type (e.g. slimes).
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>type=UnitCreatureType("unit")</example>
        internal static string[] UnitCreatureType(string unit)
        {
            return Run("UnitCreatureType(\"{0}\")", unit); //type
        }

        /// <summary>
        /// Returns information about the player's or pet's melee attack damage
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>minDamage,maxDamage,minOffHandDamage,maxOffHandDamage,physicalBonusPos,physicalBonusNeg,percent=UnitDamage("unit")</example>
        internal static string[] UnitDamage(string unit)
        {
            return Run("UnitDamage(\"{0}\")", unit); //minDamage,maxDamage,minOffHandDamage,maxOffHandDamage,physicalBonusPos,physicalBonusNeg,percent
        }

        /// <summary>
        /// Returns information about a debuff on a unit. This function is an alias for UnitAura() with a built-in HARMFUL filter (which cannot be removed or negated with the HELPFUL filter).
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="index">Index of an aura to query (number)</param>
        /// <param name="name">Name of an aura to query (string)</param>
        /// <param name="rank">Secondary text of an aura to query (often a rank; e.g. "Rank 7") (string)</param>
        /// <param name="filter">A list of filters to use separated by the pipe '|' character; e.g. "CANCELABLE|PLAYER" will query cancelable debuffs cast by the player (string) CANCELABLE - Show auras that can be cancelledNOT_CANCELABLE - Show auras that cannot be cancelledPLAYER - Show auras the player has castRAID - Show auras the player can cast on party/raid members (as opposed to self buffs)</param>
        /// <example>name,rank,icon,count,dispelType,duration,expires,caster,isStealable=UnitDebuff("unit",index[,"filter"])orUnitDebuff("unit","name"[,"rank"[,"filter"]])</example>
        internal static string[] UnitDebuff(string unit, int index, string name, string rank, string filter)
        {
            return Run("UnitDebuff(\"{0}\",{1}[,\"{4}\"])orUnitDebuff(\"{0}\",\"{2}\"[,\"{3}\"[,\"{4}\"]])", unit, index, name, rank, filter); //{2},{3},icon,count,dispelType,duration,expires,caster,isStealable
        }

        /// <summary>
        /// Returns the player's or pet's Defense skill
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>base,modifier=UnitDefense("unit")</example>
        internal static string[] UnitDefense(string unit)
        {
            return Run("UnitDefense(\"{0}\")", unit); //base,modifier
        }

        /// <summary>
        /// Returns detailed information about the threat status of one unit against another. The different values returned by this function reflect the complexity of NPC threat management:Raw threat roughly equates to the amount of damage a unit has caused to the NPC plus the amount of healing the unit has performed in the NPC's presence. (Each quantity that goes into this sum may be modified, however; such as by a paladin's Righteous Fury self-buff, a priest's Silent Resolve talent, or a player whose cloak is enchanted with Subtlety.)Generally, whichever unit has the highest raw threat against an NPC becomes its primary target, and raw threat percentage simplifies this comparison.However, most NPCs are designed to maintain some degree of target focus -- so that they don't rapidly switch targets if, for example, a unit other than the primary target suddenly reaches 101% raw threat. The amount by which a unit must surpass the primary target's threat to become the new primary target varies by distance from the NPC. Thus, a scaled percentage value is given to provide clarity. The rawPercent value returned from this function can be greater than 100 (indicating that unit has greater threat against mobUnit than mobUnit's primary target, and is thus in danger of becoming the primary target), but the scaledPercent value will always be 100 or lower.Threat information for a pair of units is only returned if the player has threat against the NPC unit in question. (For example, no threat data is provided if the player's pet is attacking an NPC but the player himself has taken no action, even though the pet has threat against the NPC.)
        /// </summary>
        /// <param name="unit">The unit whose threat situation is being requested (unitid)</param>
        /// <param name="name">The name of a unit to query. Only valid for the player, pet, and party/raid members. (string)</param>
        /// <param name="mobUnit">An NPC unit the first unit may have threat against (unitid)</param>
        /// <example>isTanking,status,scaledPercent,rawPercent,threatValue=UnitDetailedThreatSituation(unit,mobUnit)orUnitDetailedThreatSituation("name",mobUnit)</example>
        internal static string[] UnitDetailedThreatSituation(string unit, string name, string mobUnit)
        {
            return Run("UnitDetailedThreatSituation({0},{2})orUnitDetailedThreatSituation(\"{1}\",{2})", unit, name, mobUnit); //isTanking,status,scaledPercent,rawPercent,threatValue
        }

        /// <summary>
        /// Returns whether a unit exists. A unit "exists" if it can be referenced by the player; e.g. party1 exists if the player is in a party with at least one other member (regardless of whether that member is nearby), target exists if the player has a target, npc exists if the player is currently interacting with an NPC, etc.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, npc, and party/raid members (string)</param>
        /// <example>exists=UnitExists("unit")orUnitExists("name")</example>
        internal static string[] UnitExists(string unit, string name)
        {
            return Run("UnitExists(\"{0}\")orUnitExists(\"{1}\")", unit, name); //exists
        }

        /// <summary>
        /// Returns a unit's primary faction allegiance
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>factionGroup,factionName=UnitFactionGroup("unit")orUnitFactionGroup("name")</example>
        internal static string[] UnitFactionGroup(string unit, string name)
        {
            return Run("UnitFactionGroup(\"{0}\")orUnitFactionGroup(\"{1}\")", unit, name); //factionGroup,factionName
        }

        /// <summary>
        /// Returns a unit's globally unique identifier
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>guid=UnitGUID("unit")</example>
        internal static string[] UnitGUID(string unit)
        {
            return Run("UnitGUID(\"{0}\")", unit); //guid
        }

        /// <summary>
        /// Returns whether a unit has a relic slot instead of a ranged weapon slot
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>hasRelic=UnitHasRelicSlot("unit")</example>
        internal static string[] UnitHasRelicSlot(string unit)
        {
            return Run("UnitHasRelicSlot(\"{0}\")", unit); //hasRelic
        }

        /// <summary>
        /// Returns whether a unit is controlling a vehicle or vehicle weapon. Used in the default UI to show the vehicle's health and power status bars in place of the controlling unit's. Returns false for passengers riding in but not controlling part of a vehicle; to find out whether a unit is riding in a vehicle, use UnitInVehicle. Also note that in some vehicles the player can command a vehicle weapon (e.g. gun turret) without controlling the vehicle itself; to find out whether a unit is controlling a vehicle, use UnitControllingVehicle.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>hasVehicle=UnitHasVehicleUI("unit")orUnitHasVehicleUI("name")</example>
        internal static string[] UnitHasVehicleUI(string unit, string name)
        {
            return Run("UnitHasVehicleUI(\"{0}\")orUnitHasVehicleUI(\"{1}\")", unit, name); //hasVehicle
        }

        /// <summary>
        /// Returns a unit's current amount of health
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>health=UnitHealth("unit")orUnitHealth("name")</example>
        internal static string[] UnitHealth(string unit, string name)
        {
            return Run("UnitHealth(\"{0}\")orUnitHealth(\"{1}\")", unit, name); //health
        }

        /// <summary>
        /// Returns a unit's maximum health value
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>maxValue=UnitHealthMax("unit")orUnitHealthMax("name")</example>
        internal static string[] UnitHealthMax(string unit, string name)
        {
            return Run("UnitHealthMax(\"{0}\")orUnitHealthMax(\"{1}\")", unit, name); //maxValue
        }

        /// <summary>
        /// Returns whether a unit is in same battleground instance as the player
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>raidNum=UnitInBattleground("unit")</example>
        internal static string[] UnitInBattleground(string unit)
        {
            return Run("UnitInBattleground(\"{0}\")", unit); //raidNum
        }

        /// <summary>
        /// Returns whether a unit is a player unit in the player's party. Always returns 1 for the player unit. Returns nil for the player's or party members' pets.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query (string)</param>
        /// <example>inParty=UnitInParty("unit")orUnitInParty("name")</example>
        internal static string[] UnitInParty(string unit, string name)
        {
            return Run("UnitInParty(\"{0}\")orUnitInParty(\"{1}\")", unit, name); //inParty
        }

        /// <summary>
        /// Returns whether a unit is in the player's raid
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>inRaid=UnitInRaid("unit")</example>
        internal static string[] UnitInRaid(string unit)
        {
            return Run("UnitInRaid(\"{0}\")", unit); //inRaid
        }

        /// <summary>
        /// Returns whether a party/raid member is nearby. The range check used by this function isn't directly based on the player's abilities (which may have varying ranges); it's fixed by Blizzard at a distance of around 40 yards (which encompasses many common healing spells and other abilities often used on raid members).Also returns nil for units outside the player's area of view.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for party/raid members and their pets (string)</param>
        /// <example>inRange=UnitInRange("unit")orUnitInRange("name")</example>
        internal static string[] UnitInRange(string unit, string name)
        {
            return Run("UnitInRange(\"{0}\")orUnitInRange(\"{1}\")", unit, name); //inRange
        }

        /// <summary>
        /// Returns whether a unit is in a vehicle. A unit can be riding in a vehicle without controlling it: to test whether a unit is controlling a vehicle, use UnitControllingVehicle or UnitHasVehicleUI.Note: multi-passenger mounts appear as vehicles for passengers but not for the owner.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>inVehicle=UnitInVehicle("unit")orUnitInVehicle("name")</example>
        internal static string[] UnitInVehicle(string unit, string name)
        {
            return Run("UnitInVehicle(\"{0}\")orUnitInVehicle(\"{1}\")", unit, name); //inVehicle
        }

        /// <summary>
        /// Returns whether a unit controls a vehicle
        /// </summary>
        /// <example>isInControl=UnitInVehicleControlSeat()</example>
        internal static string[] UnitInVehicleControlSeat()
        {
            return Run("UnitInVehicleControlSeat()"); //isInControl
        }

        /// <summary>
        /// Returns whether a unit is marked AFK (Away From Keyboard)
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>isAFK=UnitIsAFK("unit")orUnitIsAFK("name")</example>
        internal static string[] UnitIsAFK(string unit, string name)
        {
            return Run("UnitIsAFK(\"{0}\")orUnitIsAFK(\"{1}\")", unit, name); //isAFK
        }

        /// <summary>
        /// Returns whether a unit is currently charmed. A charmed unit is affected by Mind Control (or a similar effect) and thus hostile to units which are normally his or her allies.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isCharmed=UnitIsCharmed("unit")</example>
        internal static string[] UnitIsCharmed(string unit)
        {
            return Run("UnitIsCharmed(\"{0}\")", unit); //isCharmed
        }

        /// <summary>
        /// Returns whether a unit is connected (i.e. not Offline)
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isConnected=UnitIsConnected("unit")</example>
        internal static string[] UnitIsConnected(string unit)
        {
            return Run("UnitIsConnected(\"{0}\")", unit); //isConnected
        }

        /// <summary>
        /// Returns whether a unit is controlling another unit. Applies to Mind Control and similar cases as well as to players piloting vehicles.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isControlling=UnitIsControlling("unit")</example>
        internal static string[] UnitIsControlling(string unit)
        {
            return Run("UnitIsControlling(\"{0}\")", unit); //isControlling
        }

        /// <summary>
        /// Returns whether a unit is a corpse
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isCorpse=UnitIsCorpse("unit")</example>
        internal static string[] UnitIsCorpse(string unit)
        {
            return Run("UnitIsCorpse(\"{0}\")", unit); //isCorpse
        }

        /// <summary>
        /// Returns whether a unit is dead. Only returns 1 while the unit is dead and has not yet released his or her spirit. See UnitIsGhost() for after the unit has released.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isDead=UnitIsDead("unit")</example>
        internal static string[] UnitIsDead(string unit)
        {
            return Run("UnitIsDead(\"{0}\")", unit); //isDead
        }

        /// <summary>
        /// Returns whether a unit is either dead or a ghost
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isDeadOrGhost=UnitIsDeadOrGhost("unit")</example>
        internal static string[] UnitIsDeadOrGhost(string unit)
        {
            return Run("UnitIsDeadOrGhost(\"{0}\")", unit); //isDeadOrGhost
        }

        /// <summary>
        /// Returns whether a unit is marked DND (Do Not Disturb)
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>isDND=UnitIsDND("unit")orUnitIsDND("name")</example>
        internal static string[] UnitIsDND(string unit, string name)
        {
            return Run("UnitIsDND(\"{0}\")orUnitIsDND(\"{1}\")", unit, name); //isDND
        }

        /// <summary>
        /// Returns whether two units are enemies
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>isEnemy=UnitIsEnemy("unit","unit")</example>
        internal static string[] UnitIsEnemy(string unit, string anotherUnit)
        {
            return Run("UnitIsEnemy(\"{0}\",\"{0}\")", unit, anotherUnit); //isEnemy
        }

        /// <summary>
        /// Returns whether a unit is feigning death. Only provides valid data for friendly units.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isFeign=UnitIsFeignDeath("unit")</example>
        internal static string[] UnitIsFeignDeath(string unit)
        {
            return Run("UnitIsFeignDeath(\"{0}\")", unit); //isFeign
        }

        /// <summary>
        /// Returns whether two units are friendly
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>isFriends=UnitIsFriend("unit","unit")</example>
        internal static string[] UnitIsFriend(string unit, string anotherUnit)
        {
            return Run("UnitIsFriend(\"{0}\",\"{0}\")", unit, anotherUnit); //isFriends
        }

        /// <summary>
        /// Returns whether a unit is currently a ghost
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isGhost=UnitIsGhost("unit")</example>
        internal static string[] UnitIsGhost(string unit)
        {
            return Run("UnitIsGhost(\"{0}\")", unit); //isGhost
        }

        /// <summary>
        /// Returns whether a unit is in the player's guild
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>inGuild=UnitIsInMyGuild("unit")</example>
        internal static string[] UnitIsInMyGuild(string unit)
        {
            return Run("UnitIsInMyGuild(\"{0}\")", unit); //inGuild
        }

        /// <summary>
        /// Returns whether a unit is the leader of the player's party
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query (string)</param>
        /// <example>leader=UnitIsPartyLeader("unit")orUnitIsPartyLeader("name")</example>
        internal static string[] UnitIsPartyLeader(string unit, string name)
        {
            return Run("UnitIsPartyLeader(\"{0}\")orUnitIsPartyLeader(\"{1}\")", unit, name); //leader
        }

        /// <summary>
        /// Returns whether a unit is a player unit (not an NPC)
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isPlayer=UnitIsPlayer("unit")</example>
        internal static string[] UnitIsPlayer(string unit)
        {
            return Run("UnitIsPlayer(\"{0}\")", unit); //isPlayer
        }

        /// <summary>
        /// Returns whether a unit is possessed by another
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isPossessed=UnitIsPossessed("unit")</example>
        internal static string[] UnitIsPossessed(string unit)
        {
            return Run("UnitIsPossessed(\"{0}\")", unit); //isPossessed
        }

        /// <summary>
        /// Returns whether a unit is flagged for PvP activity
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isPVP=UnitIsPVP("unit")</example>
        internal static string[] UnitIsPVP(string unit)
        {
            return Run("UnitIsPVP(\"{0}\")", unit); //isPVP
        }

        /// <summary>
        /// Returns whether a unit is flagged for free-for-all PvP. Free-for-all PvP allows all players to attack each other regardless of faction; used in certain outdoor areas (such as Gurubashi Arena and "The Maul" outside Dire Maul).
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isFreeForAll=UnitIsPVPFreeForAll("unit")</example>
        internal static string[] UnitIsPVPFreeForAll(string unit)
        {
            return Run("UnitIsPVPFreeForAll(\"{0}\")", unit); //isFreeForAll
        }

        /// <summary>
        /// Returns whether a unit is in a Sanctuary area preventing PvP activity
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>state=UnitIsPVPSanctuary("unit")</example>
        internal static string[] UnitIsPVPSanctuary(string unit)
        {
            return Run("UnitIsPVPSanctuary(\"{0}\")", unit); //state
        }

        /// <summary>
        /// Returns whether a unit is a raid assistant in the player's raid
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query (string)</param>
        /// <example>leader=UnitIsRaidOfficer("unit")orUnitIsRaidOfficer("name")</example>
        internal static string[] UnitIsRaidOfficer(string unit, string name)
        {
            return Run("UnitIsRaidOfficer(\"{0}\")orUnitIsRaidOfficer(\"{1}\")", unit, name); //leader
        }

        /// <summary>
        /// Returns whether two units are from the same server. Only meaningful in cross-realm battlegrounds.
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>isSame=UnitIsSameServer("unit","unit")</example>
        internal static string[] UnitIsSameServer(string unit, string anotherUnit)
        {
            return Run("UnitIsSameServer(\"{0}\",\"{0}\")", unit, anotherUnit); //isSame
        }

        /// <summary>
        /// Returns whether a character is silenced on a voice channel
        /// </summary>
        /// <param name="name">Name of a character (string)</param>
        /// <param name="channel">Name of a chat channel (string)</param>
        /// <example>silenced=UnitIsSilenced("name","channel")</example>
        internal static string[] UnitIsSilenced(string name, string channel)
        {
            return Run("UnitIsSilenced(\"{0}\",\"{1}\")", name, channel); //silenced
        }

        /// <summary>
        /// Returns whether a unit is currently speaking in voice chat. Despite the "unit" name, this function only accepts player names, not unitIDs.
        /// </summary>
        /// <param name="unit">Name of a character in the player's current voice channel (string)</param>
        /// <example>state=UnitIsTalking("unit")</example>
        internal static string[] UnitIsTalking(string unit)
        {
            return Run("UnitIsTalking(\"{0}\")", unit); //state
        }

        /// <summary>
        /// Returns whether a unit is tapped. Normally, rewards for killing a unit are available only to the character or group who first damaged the unit; once a character has thus established his claim on the unit, it is considered "tapped".
        /// </summary>
        /// <param name="unit">The unitid to query (unitId)</param>
        /// <example>UnitIsTapped(unit)</example>
        internal static string[] UnitIsTapped(string unit)
        {
            return Run("UnitIsTapped({0})", unit);
        }

        /// <summary>
        /// Returns whether a unit allows all players on its threat list to receive kill credit. Used to override the normal "tapping" behavior for certain mobs -- if this function returns 1, the player does not have to be the first to attack the mob (or in the same party/raid as the first player to attack) in order to receive quest or achievement credit for killing it.In the default UI, this function can prevent the graying of a unit's name background in the TargetFrame and FocusFrame even if the unit is otherwise tapped, indicating that kill credit is still available if the player attacks.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>allTapped=UnitIsTappedByAllThreatList("unit")</example>
        internal static string[] UnitIsTappedByAllThreatList(string unit)
        {
            return Run("UnitIsTappedByAllThreatList(\"{0}\")", unit); //allTapped
        }

        /// <summary>
        /// Returns whether a unit is tapped by the player or the player's group. Normally, rewards for killing a unit are available only to the character or group who first damaged the unit; once a character has thus established his claim on the unit, it is considered "tapped".
        /// </summary>
        /// <param name="unit">The unit to be queried (string)</param>
        /// <example>isTapped=UnitIsTappedByPlayer("unit")</example>
        internal static string[] UnitIsTappedByPlayer(string unit)
        {
            return Run("UnitIsTappedByPlayer(\"{0}\")", unit); //isTapped
        }

        /// <summary>
        /// Returns whether a unit is trivial at the player's level. Killing trivial units (whose level is colored gray in the default UI) does not reward honor or experience.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isTrivial=UnitIsTrivial("unit")</example>
        internal static string[] UnitIsTrivial(string unit)
        {
            return Run("UnitIsTrivial(\"{0}\")", unit); //isTrivial
        }

        /// <summary>
        /// Returns whether two unit references are to the same unit. Useful for determining whether a composite unitID (such as raid19target) also refers to a basic unitID; see example. 
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>isSame=UnitIsUnit("unit","unit")</example>
        internal static string[] UnitIsUnit(string unit, string anotherUnit)
        {
            return Run("UnitIsUnit(\"{0}\",\"{0}\")", unit, anotherUnit); //isSame
        }

        /// <summary>
        /// Returns whether a unit is in the player's area of interest
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isVisible=UnitIsVisible("unit")</example>
        internal static string[] UnitIsVisible(string unit)
        {
            return Run("UnitIsVisible(\"{0}\")", unit); //isVisible
        }

        /// <summary>
        /// Returns a unit's level. Returns -1 for boss units and hostile units whose level is ten levels or more above the player's.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>level=UnitLevel("unit")</example>
        internal static string[] UnitLevel(string unit)
        {
            return Run("UnitLevel(\"{0}\")", unit); //level
        }

        /// <summary>
        /// . Replaced by UnitPower().
        /// </summary>
        /// <param name="unit">The unit to query (unitid)</param>
        /// <param name="name">The name of a unit to query. Only valid for the player, pet, and party/raid members. (string)</param>
        /// <example>mana=UnitMana(unit)orUnitMana("name")</example>
        internal static string[] UnitMana(string unit, string name)
        {
            return Run("UnitMana({0})orUnitMana(\"{1}\")", unit, name); //mana
        }

        /// <summary>
        /// . Replaced by UnitPowerMax().
        /// </summary>
        /// <param name="unit">The unit to query (unitid)</param>
        /// <param name="name">The name of a unit to query. Only valid for the player, pet, and party/raid members. (string)</param>
        /// <example>maxValue=UnitManaMax(unit)orUnitManaMax("name")</example>
        internal static string[] UnitManaMax(string unit, string name)
        {
            return Run("UnitManaMax({0})orUnitManaMax(\"{1}\")", unit, name); //maxValue
        }

        /// <summary>
        /// Returns the name of a unit
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>name,realm=UnitName("unit")</example>
        internal static string[] UnitName(string unit)
        {
            return Run("UnitName(\"{0}\")", unit); //name,realm
        }

        /// <summary>
        /// Returns whether a unit is currently riding a flight path (taxi). Valid for any unit in the player's area of interest, but generally useful only for player -- taxi flights move quickly, so a taxi-riding unit visible to the player will not remain visible for very long.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>onTaxi=UnitOnTaxi("unit")</example>
        internal static bool UnitOnTaxi(string unit)
        {
            return From1Nil(Run("UnitOnTaxi(\"{0}\")", unit)[0]); //onTaxi
        }

        /// <summary>
        /// Returns whether a unit is controlled by a player
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>isPlayer=UnitPlayerControlled("unit")</example>
        internal static string[] UnitPlayerControlled(string unit)
        {
            return Run("UnitPlayerControlled(\"{0}\")", unit); //isPlayer
        }

        /// <summary>
        /// Returns whether a unit is in the player's party or belongs to a party member. Returns nil for the player and the player's pet.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query (string)</param>
        /// <example>inParty=UnitPlayerOrPetInParty("unit")orUnitPlayerOrPetInParty("name")</example>
        internal static string[] UnitPlayerOrPetInParty(string unit, string name)
        {
            return Run("UnitPlayerOrPetInParty(\"{0}\")orUnitPlayerOrPetInParty(\"{1}\")", unit, name); //inParty
        }

        /// <summary>
        /// Returns whether a unit is in the player's raid or belongs to a raid member
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query (string)</param>
        /// <example>inParty=UnitPlayerOrPetInRaid("unit")orUnitPlayerOrPetInRaid("name")</example>
        internal static string[] UnitPlayerOrPetInRaid(string unit, string name)
        {
            return Run("UnitPlayerOrPetInRaid(\"{0}\")orUnitPlayerOrPetInRaid(\"{1}\")", unit, name); //inParty
        }

        /// <summary>
        /// Returns a unit's current level of mana, rage, energy or other power type. Returns zero for non-existent units.
        /// </summary>
        /// <param name="unitID">A unit to query (string, unitID)</param>
        /// <param name="powerType">A specific power type to query (string, powerType)</param>
        /// <example>power=UnitPower("unitID"[,"powerType"])</example>
        internal static string[] UnitPower(string unitID, string powerType)
        {
            return Run("UnitPower(\"{0}\"[,\"{1}\"])", unitID, powerType); //power
        }

        /// <summary>
        /// Returns a unit's maximum mana, rage, energy or other power type. Returns the units current maximum power, if the unit does not exist then zero is returned. 
        /// When querying with a powerType, as long as the unit exists you will get the maximum untalented power even if the class does not use the power type.
        /// </summary>
        /// <param name="unitID">A unit to query (string, unitID)</param>
        /// <param name="powerType">Specific power type to query for the unit (number, powerType)</param>
        /// <example>maxValue=UnitPowerMax("unitID"[,powerType])</example>
        internal static string[] UnitPowerMax(string unitID, string powerType)
        {
            return Run("UnitPowerMax(\"{0}\"[,{1}])", unitID, powerType); //maxValue
        }

        /// <summary>
        /// Returns the power type (energy, mana, rage) of the given unit. Does not return color values for common power types (mana, rage, energy, focus, and runic power); the canonical colors for these can be found in the PowerBarColor table. Color values may be included for special power types such as those used by vehicles.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>powerType,powerToken,altR,altG,altB=UnitPowerType("unit")orUnitPowerType("name")</example>
        internal static string[] UnitPowerType(string unit, string name)
        {
            return Run("UnitPowerType(\"{0}\")orUnitPowerType(\"{1}\")", unit, name); //powerType,powerToken,altR,altG,altB
        }

        /// <summary>
        /// Returns the name of a unit including the unit's current title. Titles are no longer specific to PvP; this function returns a unit's name with whichever title he or she is currently displaying (e.g. "Gladiator Spin", "Keydar Jenkins", "Ownsusohard, Champion of the Frozen Wastes", etc).
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>name=UnitPVPName("unit")</example>
        internal static string[] UnitPVPName(string unit)
        {
            return Run("UnitPVPName(\"{0}\")", unit); //name
        }

        /// <summary>
        /// Returns a unit's PVP rank as a number. Returns 0 for all units; was only applicable in the older PvP rewards system that was abandoned with the Wow 2.0 patch.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>rank=UnitPVPRank("unit")</example>
        internal static string[] UnitPVPRank(string unit)
        {
            return Run("UnitPVPRank(\"{0}\")", unit); //rank
        }

        /// <summary>
        /// Returns the name of a unit's race
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>race,fileName=UnitRace("unit")</example>
        internal static string[] UnitRace(string unit)
        {
            return Run("UnitRace(\"{0}\")", unit); //race,fileName
        }

        /// <summary>
        /// Returns information about the player's or pet's ranged weapon skill
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>rangedAttackBase,rangedAttackMod=UnitRangedAttack("unit")</example>
        internal static string[] UnitRangedAttack(string unit)
        {
            return Run("UnitRangedAttack(\"{0}\")", unit); //rangedAttackBase,rangedAttackMod
        }

        /// <summary>
        /// Returns the player's or pet's ranged attack power
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>base,posBuff,negBuff=UnitRangedAttackPower("unit")</example>
        internal static string[] UnitRangedAttackPower(string unit)
        {
            return Run("UnitRangedAttackPower(\"{0}\")", unit); //base,posBuff,negBuff
        }

        /// <summary>
        /// Returns information about the player's or pet's ranged attack damage and speed
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <example>rangedAttackSpeed,minDamage,maxDamage,physicalBonusPos,physicalBonusNeg,percent=UnitRangedDamage("unit")</example>
        internal static string[] UnitRangedDamage(string unit)
        {
            return Run("UnitRangedDamage(\"{0}\")", unit); //rangedAttackSpeed,minDamage,maxDamage,physicalBonusPos,physicalBonusNeg,percent
        }

        /// <summary>
        /// Returns the reaction of one unit with regards to another as a number. The returned value often (but not always) matches the unit's level of reputation with the second unit's faction, and can be used with the UnitReactionColor global table to return the color used to display a unit's reaction in the default UI.
        /// </summary>
        /// <param name="unit">A unit (string, unitID)</param>
        /// <param name="anotherUnit">Another unit (string, unitID)</param>
        /// <example>reaction=UnitReaction("unit","unit")</example>
        internal static string[] UnitReaction(string unit, string anotherUnit)
        {
            return Run("UnitReaction(\"{0}\",\"{0}\")", unit, anotherUnit); //reaction
        }

        /// <summary>
        /// Returns information about the player's or pet's magic resistance
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <param name="resistanceIndex">Index of a magic resistance type (number) 1 - Fire2 - Nature3 - Frost4 - Shadow5 - Arcane</param>
        /// <example>base,resistance,positive,negative=UnitResistance("unit",resistanceIndex)</example>
        internal static string[] UnitResistance(string unit, int resistanceIndex)
        {
            return Run("UnitResistance(\"{0}\",{1})", unit, resistanceIndex); //base,resistance,positive,negative
        }

        /// <summary>
        /// Returns a color indicating hostility and related status of a unit. This color is used in various places in the default UI, such as the background behind a unit's name in the target and focus frames. For NPCs, the color reflects hostility and reputation, ranging from red (hostile) to orange or yellow (unfriendly or neutral) to green (friendly). When the unit is a player, a blue color is used unless the player is active for PvP, in which case the color may be red (he can attack you and you can attack him), yellow (you can attack him but he can't attack you) or green (ally). Color component values are floating point numbers between 0 and 1.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>red,green,blue,alpha=UnitSelectionColor("unit")orUnitSelectionColor("name")</example>
        internal static string[] UnitSelectionColor(string unit, string name)
        {
            return Run("UnitSelectionColor(\"{0}\")orUnitSelectionColor(\"{1}\")", unit, name); //red,green,blue,alpha
        }

        /// <summary>
        /// Returns the gender of the given unit or player
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">The name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>gender=UnitSex("unit")orUnitSex("name")</example>
        internal static string[] UnitSex(string unit, string name)
        {
            return Run("UnitSex(\"{0}\")orUnitSex(\"{1}\")", unit, name); //gender
        }

        /// <summary>
        /// Returns information about a basic character statistic for the player or pet
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player or pet (string, unitID)</param>
        /// <param name="statIndex">Index of a basic statistic (number) 1 - Strength2 - Agility3 - Stamina4 - Intellect5 - Spirit</param>
        /// <example>stat,effectiveStat,posBuff,negBuff=UnitStat("unit",statIndex)</example>
        internal static string[] UnitStat(string unit, int statIndex)
        {
            return Run("UnitStat(\"{0}\",{1})", unit, statIndex); //stat,effectiveStat,posBuff,negBuff
        }

        /// <summary>
        /// Moves the player to another seat within his current vehicle
        /// </summary>
        /// <param name="unit">Unit to move (only valid for player) (string, unitID)</param>
        /// <param name="seat">Index of a seat to switch to (number)</param>
        /// <example>UnitSwitchToVehicleSeat("unit",seat)</example>
        internal static string[] UnitSwitchToVehicleSeat(string unit, int seat)
        {
            return Run("UnitSwitchToVehicleSeat(\"{0}\",{1})", unit, seat);
        }

        /// <summary>
        /// Returns whether attempts to target a unit should target its vehicle. The unit can still be targeted: this flag is used to provide a convenience in the default UI for certain cases (such as the Malygos encounter) such that clicking a unit in the raid UI targets its vehicle (e.g. so players can use their drakes to heal other players' drakes).
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>targetVehicle=UnitTargetsVehicleInRaidUI("unit")</example>
        internal static string[] UnitTargetsVehicleInRaidUI(string unit)
        {
            return Run("UnitTargetsVehicleInRaidUI(\"{0}\")", unit); //targetVehicle
        }

        /// <summary>
        /// Returns the general threat status of a unit. See UnitDetailedThreatSituation for details about threat values.Threat information for a pair of units is only returned if the player has threat against the NPC unit in question. (For example, no threat data is provided if the player's pet is attacking an NPC but the player himself has taken no action, even though the pet has threat against the NPC.)
        /// </summary>
        /// <param name="unit">The unit whose threat situation is being requested (unitid)</param>
        /// <param name="name">The name of a unit to query. Only valid for the player, pet, and party/raid members. (string)</param>
        /// <param name="mobUnit">An NPC unit the first unit may have threat against; if nil, returned values reflect whichever NPC unit the first unit has the highest threat against. (unitid)</param>
        /// <example>status=UnitThreatSituation(unit[,mobUnit])orUnitThreatSituation("name"[,mobUnit])</example>
        internal static string[] UnitThreatSituation(string unit, string name, string mobUnit)
        {
            return Run("UnitThreatSituation({0}[,{2}])orUnitThreatSituation(\"{1}\"[,{2}])", unit, name, mobUnit); //status
        }

        /// <summary>
        /// Returns whether a unit is using a vehicle. Unlike similar functions, UnitUsingVehicle() also returns true while the unit is transitioning between seats in a vehicle.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>usingVehicle=UnitUsingVehicle("unit")</example>
        internal static string[] UnitUsingVehicle(string unit)
        {
            return Run("UnitUsingVehicle(\"{0}\")", unit); //usingVehicle
        }

        /// <summary>
        /// Returns the number of seats in a unit's vehicle. Note: returns 0 for multi-passenger mounts even thought multiple seats are available.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <example>numSeats=UnitVehicleSeatCount("unit")</example>
        internal static string[] UnitVehicleSeatCount(string unit)
        {
            return Run("UnitVehicleSeatCount(\"{0}\")", unit); //numSeats
        }

        /// <summary>
        /// Returns information about seats in a vehicle. Note: multi-passenger mounts appear as vehicles for passengers but not for the owner; seat information applies only to the passenger seats.
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="seat">Index of a seat in the unit's vehicle (number)</param>
        /// <example>controlType,occupantName,occupantRealm,canEject,canSwitchSeats=UnitVehicleSeatInfo("unit",seat)</example>
        internal static string[] UnitVehicleSeatInfo(string unit, int seat)
        {
            return Run("UnitVehicleSeatInfo(\"{0}\",{1})", unit, seat); //controlType,occupantName,occupantRealm,canEject,canSwitchSeats
        }

        /// <summary>
        /// Returns the style of vehicle UI to display for a unit
        /// </summary>
        /// <param name="unit">A unit to query (string, unitID)</param>
        /// <param name="name">Name of a unit to query; only valid for player, pet, and party/raid members (string)</param>
        /// <example>skin=UnitVehicleSkin("unit")orUnitVehicleSkin("name")</example>
        internal static string[] UnitVehicleSkin(string unit, string name)
        {
            return Run("UnitVehicleSkin(\"{0}\")orUnitVehicleSkin(\"{1}\")", unit, name); //skin
        }

        /// <summary>
        /// Returns the player's current amount of experience points
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player (string, unitID)</param>
        /// <example>currXP=UnitXP("unit")</example>
        internal static string[] UnitXP(string unit)
        {
            return Run("UnitXP(\"{0}\")", unit); //currXP
        }

        /// <summary>
        /// Return the total amount of experience points required for the player to gain a level
        /// </summary>
        /// <param name="unit">A unit to query; only valid for player (string, unitID)</param>
        /// <example>playerMaxXP=UnitXPMax("unit")</example>
        internal static string[] UnitXPMax(string unit)
        {
            return Run("UnitXPMax(\"{0}\")", unit); //playerMaxXP
        }

        /// <summary>
        /// Returns the list of elements in a table. Equivalent to   return t[i], t[i+1], ellips t[j]
        /// for an arbitrary number of elements.
        /// </summary>
        /// <param name="t">A table (table)</param>
        /// <param name="i">A numeric index to the table; defaults to 1 if omitted (number)</param>
        /// <param name="j">A numeric index to the table; defaults to #t if omitted (number)</param>
        /// <example>...=unpack(t[,i[,j]])</example>
        internal static string[] unpack(string t, int i, int j)
        {
            return Run("unpack({0}[,{1}[,{2}]])", t, i, j); //...
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>UnSilenceMember()</example>
        internal static string[] UnSilenceMember()
        {
            return Run("UnSilenceMember()");
        }

        /// <summary>
        /// Makes a pet from the stables the active pet. If another pet is already active, it will be placed in the stables.
        /// </summary>
        /// <param name="index">Index of a stable slot (between 1 and GetNumStablePets()) (number)</param>
        /// <example>UnstablePet(index)</example>
        internal static string[] UnstablePet(int index)
        {
            return Run("UnstablePet({0})", index);
        }

        /// <summary>
        /// Updates addon CPU profiling information. Only has effect if the scriptProfile CVar is set to 1. See GetAddOnCPUUsage() for the updated data.
        /// </summary>
        /// <example>UpdateAddOnCPUUsage()</example>
        internal static string[] UpdateAddOnCPUUsage()
        {
            return Run("UpdateAddOnCPUUsage()");
        }

        /// <summary>
        /// Updates addon memory usage information. See GetAddOnMemoryUsage() for the updated data.
        /// </summary>
        /// <example>UpdateAddOnMemoryUsage()</example>
        internal static string[] UpdateAddOnMemoryUsage()
        {
            return Run("UpdateAddOnMemoryUsage()");
        }

        /// <summary>
        /// Updates the open GM ticket with new text
        /// </summary>
        /// <param name=text>New text for the ticket (string)</param>
        /// <example>UpdateGMTicket(text)</example>
        internal static string[] UpdateGMTicket(string text)
        {
            return Run("UpdateGMTicket(\"{0}\")", text);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>UpdateInventoryAlertStatus()</example>
        internal static string[] UpdateInventoryAlertStatus()
        {
            return Run("UpdateInventoryAlertStatus()");
        }

        /// <summary>
        /// Returns information about the texture used for highlighting zones in a continent map on mouseover
        /// </summary>
        /// <param name="cursorX">Horizontal position of the mouse cursor relative to the current world map (0 = left edge, 1 = right edge) (number)</param>
        /// <param name="cursorY">Vertical position of the unit relative to the current world map (0 = top, 1 = bottom) (number)</param>
        /// <example>name,fileName,texCoordX,texCoordY,textureX,textureY,scrollChildX,scrollChildY=UpdateMapHighlight(cursorX,cursorY)</example>
        internal static string[] UpdateMapHighlight(int cursorX, int cursorY)
        {
            return Run("UpdateMapHighlight({0},{1})", cursorX, cursorY); //name,fileName,texCoordX,texCoordY,textureX,textureY,scrollChildX,scrollChildY
        }

        /// <summary>
        /// Requests spellbook information from the server. The UPDATE_SPELLS event fires when new spellbook information is available.
        /// </summary>
        /// <example>UpdateSpells()</example>
        internal static string[] UpdateSpells()
        {
            return Run("UpdateSpells()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>UpdateWorldMapArrowFrames()</example>
        internal static string[] UpdateWorldMapArrowFrames()
        {
            return Run("UpdateWorldMapArrowFrames()");
        }

        /// <summary>
        /// Stores a backup of game settings on the server. Does nothing unless server-side settings have been disabled by setting the synchronizeSettings CVar to 0.
        /// </summary>
        /// <example>UploadSettings()</example>
        internal static string[] UploadSettings()
        {
            return Run("UploadSettings()");
        }

        /// <summary>
        /// Uses an action
        /// </summary>
        /// <param name="slot">An action bar slot (number, actionID)</param>
        /// <param name="target">A unit to be used as target for the action (string, unitID)</param>
        /// <param name=button>Mouse button used to activate the action (string) Button4 - Fourth mouse buttonButton5 - Fifth mouse buttonLeftButton - Left mouse button (also used when the action is activated via keyboard)MiddleButton - Third mouse button (typically middle button / scroll wheel)RightButton - Right mouse button</param>
        /// <example>UseAction(slot[,"target"[,button]])</example>
        internal static string[] UseAction(string slot, string target, string button)
        {
            return Run("UseAction({0}[,\"{1}\"[,\"{2}\"]])", slot, target, button);
        }

        /// <summary>
        /// Activate (as with right-clicking) an item in one of the player's bags. Has the same effect as right-clicking an item in the default UI; therefore, results may vary by context. In cases of conflict, conditions listed first override those below:If the bank or guild bank UI is open, moves the item into the bank or guild bank (or if the item is in the bank or guild bank, moves it into the player's inventory).If the trade UI is open, puts the item into the first available trade slot (or if the item is soulbound, into the "will not be traded" slot).If the merchant UI is open and not in repair mode, attempts to sell the item to the merchant.If the Send Mail UI is open, puts the item into the first available slot for message attachments.If an item is readable (e.g. Lament of the Highborne), opens it for reading.If an item is lootable (e.g. Magically Wrapped Gift), opens it for lootingIf an item can be equipped, attempts to equip the item (placing any currently equipped item of the same type into the container slot used).If an item has a "Use:" effect, activates said effect. Under this condition only, the function is protected and can only be called by the Blizzard UI.If none of the above conditions are true, nothing happens.
        /// </summary>
        /// <param name="container">Index of one of the player's bags or other containers (number, containerID)</param>
        /// <param name="slot">Index of an item slot within the container (number, containerSlotID)</param>
        /// <param name="target">A unit to be used as target for the action (string, unitID)</param>
        /// <example>UseContainerItem(container,slot[,"target"])</example>
        internal static string[] UseContainerItem(int container, int slot, string target = "")
        {
            return Run("UseContainerItem({0},{1}{2})", container, slot, target != "" ? string.Format(",\"{0}\"", target) : "");
        }

        /// <summary>
        /// Equips the items in an equipment set
        /// </summary>
        /// <param name="name">Name of an equipment set (case sensitive) (string)</param>
        /// <example>equipped=UseEquipmentSet("name")</example>
        internal static string[] UseEquipmentSet(string name)
        {
            return Run("UseEquipmentSet(\"{0}\")", name); //equipped
        }

        /// <summary>
        /// Activate (as with right-clicking) an equipped item. If the inventoryID passed refers to an empty slot or a slot containing an item without a "Use:" action, this function is not protected (i.e. usable only by the Blizzard UI), but also has no effect.
        /// </summary>
        /// <param name="slot">An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID)</param>
        /// <example>UseInventoryItem(slot)</example>
        internal static string[] UseInventoryItem(string slot)
        {
            return Run("UseInventoryItem({0})", slot);
        }

        /// <summary>
        /// Uses an arbitrary item (optionally on a specified unit)
        /// </summary>
        /// <param name="itemID">An item's ID (number)</param>
        /// <param name="itemName">An item's name (string)</param>
        /// <param name="itemLink">An item's hyperlink, or any string containing the itemString portion of an item link (string)</param>
        /// <param name="target">A unit on which to use the item, if applicable (string, unitID)</param>
        /// <example>UseItemByName(itemID[,"target"])orUseItemByName("itemName"[,"target"])orUseItemByName("itemLink"[,"target"])</example>
        internal static string[] UseItemByName(string itemName, string target)
        {
            return Run("UseItemByName(\"{0}\",\"{1}\")", itemName, target);
        }

        /// <summary>
        /// Uses the item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)
        /// </summary>
        /// <param name="questIndex">Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number)</param>
        /// <example>UseQuestLogSpecialItem(questIndex)</example>
        internal static string[] UseQuestLogSpecialItem(int questIndex)
        {
            return Run("UseQuestLogSpecialItem({0})", questIndex);
        }

        /// <summary>
        /// Instantly resurrects the player in place, if possible. Usable if the player is dead (and has not yet released his or her spirit to the graveyard) and has the ability to instantly resurrect (provided by a Warlock's Soulstone or a Shaman's Reincarnation passive ability).
        /// </summary>
        /// <example>UseSoulstone()</example>
        internal static string[] UseSoulstone()
        {
            return Run("UseSoulstone()");
        }

        /// <summary>
        /// Adjusts vehicle aim downward by a specified amount
        /// </summary>
        /// <param name="amount">Angle by which to adjust aim (in radians) (number)</param>
        /// <example>VehicleAimDecrement(amount)</example>
        internal static string[] VehicleAimDecrement(int amount)
        {
            return Run("VehicleAimDecrement({0})", amount);
        }

        /// <summary>
        /// Starts adjusting vehicle aim downward
        /// </summary>
        /// <example>VehicleAimDownStart()</example>
        internal static string[] VehicleAimDownStart()
        {
            return Run("VehicleAimDownStart()");
        }

        /// <summary>
        /// Stops adjusting vehicle aim downward
        /// </summary>
        /// <example>VehicleAimDownStop()</example>
        internal static string[] VehicleAimDownStop()
        {
            return Run("VehicleAimDownStop()");
        }

        /// <summary>
        /// Returns the aim angle of a vehicle weapon. The returned value is in radians, with positive values indicating upward angle, negative values indicating downward angle, and 0 indicating straight ahead.
        /// </summary>
        /// <example>angle=VehicleAimGetAngle()</example>
        internal static string[] VehicleAimGetAngle()
        {
            return Run("VehicleAimGetAngle()"); //angle
        }

        /// <summary>
        /// Returns the aim angle of a vehicle weapon relative to its minimum angle. The returned value is in radians, with 0 indicating the lowest angle allowed for the vehicle weapon and increasing values for upward aim.
        /// </summary>
        /// <example>angle=VehicleAimGetNormAngle()</example>
        internal static string[] VehicleAimGetNormAngle()
        {
            return Run("VehicleAimGetNormAngle()"); //angle
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>VehicleAimGetNormPower()</example>
        internal static string[] VehicleAimGetNormPower()
        {
            return Run("VehicleAimGetNormPower()");
        }

        /// <summary>
        /// Adjusts vehicle aim upward by a specified amount
        /// </summary>
        /// <param name="amount">Angle by which to adjust aim (in radians) (number)</param>
        /// <example>VehicleAimIncrement(amount)</example>
        internal static string[] VehicleAimIncrement(int amount)
        {
            return Run("VehicleAimIncrement({0})", amount);
        }

        /// <summary>
        /// Attempts to set a vehicle weapon's aim angle to a specific value. Causes aim angle to transition smoothly from the current value to the requested value (or to the closest allowed value to the requested value if it is beyond the vehicle's limits).Aim angle values are in radians, with positive values indicating upward angle, negative values indicating downward angle, and 0 indicating straight ahead.
        /// </summary>
        /// <param name="amount">New aim angle (in radians) (number)</param>
        /// <example>VehicleAimRequestAngle(amount)</example>
        internal static string[] VehicleAimRequestAngle(int amount)
        {
            return Run("VehicleAimRequestAngle({0})", amount);
        }

        /// <summary>
        /// Attempts to set a vehicle weapon's aim angle to a specific value relative to its minimum value. Causes aim angle to transition smoothly from the current value to the requested value (or to the closest allowed value to the requested value if it is beyond the vehicle's limits).The returned value is in radians, with 0 indicating the lowest angle allowed for the vehicle weapon and increasing values for upward aim.
        /// </summary>
        /// <param name="amount">New aim angle (in radians) (number)</param>
        /// <example>VehicleAimRequestNormAngle(amount)</example>
        internal static string[] VehicleAimRequestNormAngle(int amount)
        {
            return Run("VehicleAimRequestNormAngle({0})", amount);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>VehicleAimSetNormPower()</example>
        internal static string[] VehicleAimSetNormPower()
        {
            return Run("VehicleAimSetNormPower()");
        }

        /// <summary>
        /// Starts adjusting vehicle aim upward
        /// </summary>
        /// <example>VehicleAimUpStart()</example>
        internal static string[] VehicleAimUpStart()
        {
            return Run("VehicleAimUpStart()");
        }

        /// <summary>
        /// Stops adjusting vehicle aim upward
        /// </summary>
        /// <example>VehicleAimUpStop()</example>
        internal static string[] VehicleAimUpStop()
        {
            return Run("VehicleAimUpStop()");
        }

        /// <summary>
        /// Zooms the player's view in while in a vehicle
        /// </summary>
        /// <example>VehicleCameraZoomIn()</example>
        internal static string[] VehicleCameraZoomIn()
        {
            return Run("VehicleCameraZoomIn()");
        }

        /// <summary>
        /// Zooms the player's view out while in a vehicle
        /// </summary>
        /// <example>VehicleCameraZoomOut()</example>
        internal static string[] VehicleCameraZoomOut()
        {
            return Run("VehicleCameraZoomOut()");
        }

        /// <summary>
        /// Removes the player from the current vehicle. Does nothing if the player is not in a vehicle.
        /// </summary>
        /// <example>VehicleExit()</example>
        internal static string[] VehicleExit()
        {
            return Run("VehicleExit()");
        }

        /// <summary>
        /// Moves the player from his current seat in a vehicle to the next sequentially numbered seat. If the player is in the highest-numbered seat, cycles around to the lowest-numbered seat.
        /// </summary>
        /// <example>VehicleNextSeat()</example>
        internal static string[] VehicleNextSeat()
        {
            return Run("VehicleNextSeat()");
        }

        /// <summary>
        /// Moves the player from his current seat in a vehicle to the previous sequentially numbered seat. If the player is in the lowest-numbered seat, cycles around to the highest-numbered seat.
        /// </summary>
        /// <example>VehiclePrevSeat()</example>
        internal static string[] VehiclePrevSeat()
        {
            return Run("VehiclePrevSeat()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>VoiceChat_ActivatePrimaryCaptureCallback()</example>
        internal static string[] VoiceChat_ActivatePrimaryCaptureCallback()
        {
            return Run("VoiceChat_ActivatePrimaryCaptureCallback()");
        }

        /// <summary>
        /// Returns the current volume level of the microphone signal
        /// </summary>
        /// <example>volume=VoiceChat_GetCurrentMicrophoneSignalLevel()</example>
        internal static string[] VoiceChat_GetCurrentMicrophoneSignalLevel()
        {
            return Run("VoiceChat_GetCurrentMicrophoneSignalLevel()"); //volume
        }

        /// <summary>
        /// Returns whether the Microphone Test recording is playing
        /// </summary>
        /// <param name="isPlaying">1 if the loopback sound is currently being played; otherwise nil (number)</param>
        /// <example>VoiceChat_IsPlayingLoopbackSound(isPlaying)</example>
        internal static string[] VoiceChat_IsPlayingLoopbackSound(int isPlaying)
        {
            return Run("VoiceChat_IsPlayingLoopbackSound({0})", isPlaying);
        }

        /// <summary>
        /// Returns whether a Microphone Test is recording
        /// </summary>
        /// <example>isRecording=VoiceChat_IsRecordingLoopbackSound()</example>
        internal static string[] VoiceChat_IsRecordingLoopbackSound()
        {
            return Run("VoiceChat_IsRecordingLoopbackSound()"); //isRecording
        }

        /// <summary>
        /// Plays back the Microphone Test recording
        /// </summary>
        /// <example>VoiceChat_PlayLoopbackSound()</example>
        internal static string[] VoiceChat_PlayLoopbackSound()
        {
            return Run("VoiceChat_PlayLoopbackSound()");
        }

        /// <summary>
        /// Begins recording a Microphone Test
        /// </summary>
        /// <param name="seconds">The amount of time to record (in seconds) (number)</param>
        /// <example>VoiceChat_RecordLoopbackSound(seconds)</example>
        internal static string[] VoiceChat_RecordLoopbackSound(int seconds)
        {
            return Run("VoiceChat_RecordLoopbackSound({0})", seconds);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>VoiceChat_StartCapture()</example>
        internal static string[] VoiceChat_StartCapture()
        {
            return Run("VoiceChat_StartCapture()");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <example>VoiceChat_StopCapture()</example>
        internal static string[] VoiceChat_StopCapture()
        {
            return Run("VoiceChat_StopCapture()");
        }

        /// <summary>
        /// Stops playing the Microphone Test recording
        /// </summary>
        /// <example>VoiceChat_StopPlayingLoopbackSound()</example>
        internal static string[] VoiceChat_StopPlayingLoopbackSound()
        {
            return Run("VoiceChat_StopPlayingLoopbackSound()");
        }

        /// <summary>
        /// Stops recording a Microphone Test
        /// </summary>
        /// <example>VoiceChat_StopRecordingLoopbackSound()</example>
        internal static string[] VoiceChat_StopRecordingLoopbackSound()
        {
            return Run("VoiceChat_StopRecordingLoopbackSound()");
        }

        /// <summary>
        /// Returns the name of an audio input device for voice chat
        /// </summary>
        /// <param name="deviceIndex">Index of the device (between 1 and Sound_ChatSystem_GetNumInputDrivers()) (number)</param>
        /// <example>deviceName=VoiceEnumerateCaptureDevices(deviceIndex)</example>
        internal static string[] VoiceEnumerateCaptureDevices(int deviceIndex)
        {
            return Run("VoiceEnumerateCaptureDevices({0})", deviceIndex); //deviceName
        }

        /// <summary>
        /// Returns the name of an audio output device for voice chat
        /// </summary>
        /// <param name="deviceIndex">Index of the device (between 1 and Sound_ChatSystem_GetNumOutputDrivers()) (number)</param>
        /// <example>device=VoiceEnumerateOutputDevices(deviceIndex)</example>
        internal static string[] VoiceEnumerateOutputDevices(int deviceIndex)
        {
            return Run("VoiceEnumerateOutputDevices({0})", deviceIndex); //device
        }

        /// <summary>
        /// Returns the index of the current voice capture device
        /// </summary>
        /// <example>index=VoiceGetCurrentCaptureDevice()</example>
        internal static string[] VoiceGetCurrentCaptureDevice()
        {
            return Run("VoiceGetCurrentCaptureDevice()"); //index
        }

        /// <summary>
        /// Returns the index of the current voice output device
        /// </summary>
        /// <example>index=VoiceGetCurrentOutputDevice()</example>
        internal static string[] VoiceGetCurrentOutputDevice()
        {
            return Run("VoiceGetCurrentOutputDevice()"); //index
        }

        /// <summary>
        /// Returns whether the voice chat system cannot be enabled. Voice chat may be disabled if the underlying hardware does not support it or if multiple instances of World of Warcraft are running on the same hardware.
        /// </summary>
        /// <example>isDisabled=VoiceIsDisabledByClient()</example>
        internal static string[] VoiceIsDisabledByClient()
        {
            return Run("VoiceIsDisabledByClient()"); //isDisabled
        }

        /// <summary>
        /// Used internally to start talking, when push-to-talk is active in voice chat.
        /// </summary>
        /// <example>VoicePushToTalkStart()</example>
        internal static string[] VoicePushToTalkStart()
        {
            return Run("VoicePushToTalkStart()");
        }

        /// <summary>
        /// Used internally to stop talking, when push-to-talk is active in voice chat
        /// </summary>
        /// <example>VoicePushToTalkStop()</example>
        internal static string[] VoicePushToTalkStop()
        {
            return Run("VoicePushToTalkStop()");
        }

        /// <summary>
        /// Selects an audio input device for voice chat
        /// </summary>
        /// <param name="deviceName">Name of an audio input device, as returned from VoiceEnumerateCaptureDevices() (string)</param>
        /// <example>VoiceSelectCaptureDevice("deviceName")</example>
        internal static string[] VoiceSelectCaptureDevice(string deviceName)
        {
            return Run("VoiceSelectCaptureDevice(\"{0}\")", deviceName);
        }

        /// <summary>
        /// Selects an audio output device for voice chat
        /// </summary>
        /// <param name="deviceName">Name of an audio output device, as returned from VoiceEnumerateOutputDevices() (string)</param>
        /// <example>VoiceSelectOutputDevice("deviceName")</example>
        internal static string[] VoiceSelectOutputDevice(string deviceName)
        {
            return Run("VoiceSelectOutputDevice(\"{0}\")", deviceName);
        }

        /// <summary>
        /// Removes all entries from a table
        /// </summary>
        /// <param name="aTable">A table whose contents are to be erased (table)</param>
        /// <example>emptyTable=wipe(aTable)</example>
        internal static string[] wipe(string aTable)
        {
            return Run("wipe({0})", aTable); //emptyTable
        }

        /// <summary>
        /// Attempts to withdraw money from the guild bank. Causes a PLAYER_MONEY event to fire, indicating the amount withdrawn has been added to the player's total (see GetMoney()). Causes an error or system message if amount exceeds the amount of money in the guild bank or the player's allowed daily withdrawal amount.
        /// </summary>
        /// <param name="amount">Amount of money to withdraw (in copper) (number)</param>
        /// <example>WithdrawGuildBankMoney(amount)</example>
        internal static string[] WithdrawGuildBankMoney(int amount)
        {
            return Run("WithdrawGuildBankMoney({0})", amount);
        }

        /// <summary>
        /// Executes a function in protected mode with a custom error handler
        /// </summary>
        /// <param name="f">A function (function)</param>
        /// <param name="err">Error handler function to be used should f cause an error (function)</param>
        /// <example>status,...=xpcall(f,err)</example>
        internal static string[] xpcall(string f, string err)
        {
            return Run("xpcall({0},{1})", f, err); //status,...
        }

        /// <summary>
        /// Sets the world map to show the area containing its current area. Only used by the default UI in certain circumstances: to "zoom out" from a multi-level map (e.g. Dalaran or a dungeon) to the containing zone/continent. May cause problems when not used in such cases.
        /// </summary>
        /// <example>ZoomOut()</example>
        internal static string[] ZoomOut()
        {
            return Run("ZoomOut()");
        }
        #endregion
    }
}